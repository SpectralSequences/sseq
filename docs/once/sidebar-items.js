initSidebarItems({"constant":[["MAX_OUTER_LENGTH","The maximum length of a OnceVec is 2^{MAX_OUTER_LENGTH} - 1. The performance cost of increasing MAX_OUTER_LENGTH is relatively small, but [T; N] does not implement Default for N > 32, which we need for initialization. So let us stick with 32."],["USIZE_LEN",""]],"enum":[["Ordering","Atomic memory orderings"]],"macro":[["Eq","Derive macro generating an impl of the trait `Eq`."],["PartialEq","Derive macro generating an impl of the trait `PartialEq`."]],"mod":[["fmt","Utilities for formatting and printing `String`s."],["io","Traits, helpers, and type definitions for core I/O functionality."]],"struct":[["AtomicUsize","An integer type which can be safely shared between threads."],["Mutex","A mutual exclusion primitive useful for protecting shared data"],["MutexGuard","An RAII implementation of a “scoped lock” of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["OnceBiVec",""],["OnceVec","A OnceVec is a push-only vector which is (hopefully) thread-safe. To ensure thread-safety, we need to ensure three things"],["UnsafeCell","The core primitive for interior mutability in Rust."]],"trait":[["Eq","Trait for equality comparisons which are equivalence relations."],["Index","Used for indexing operations (`container[index]`) in immutable contexts."],["IndexMut","Used for indexing operations (`container[index]`) in mutable contexts."],["Load",""],["PartialEq","Trait for equality comparisons which are partial equivalence relations."],["Read","The `Read` trait allows for reading bytes from a source."],["Save",""],["Write","A trait for objects which are byte-oriented sinks."]]});
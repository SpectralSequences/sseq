(function() {var implementors = {};
implementors["algebra"] = [{"text":"impl&lt;A:&nbsp;<a class=\"trait\" href=\"algebra/algebra/algebra_trait/trait.Algebra.html\" title=\"trait algebra::algebra::algebra_trait::Algebra\">Algebra</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"algebra/module/finite_dimensional_module/struct.FiniteDimensionalModule.html\" title=\"struct algebra::module::finite_dimensional_module::FiniteDimensionalModule\">FiniteDimensionalModule</a>&lt;A&gt;","synthetic":false,"types":["algebra::module::finite_dimensional_module::FiniteDimensionalModule"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"algebra/module/free_module/struct.OperationGeneratorPair.html\" title=\"struct algebra::module::free_module::OperationGeneratorPair\">OperationGeneratorPair</a>","synthetic":false,"types":["algebra::module::free_module::OperationGeneratorPair"]},{"text":"impl&lt;S:&nbsp;<a class=\"trait\" href=\"algebra/module/module_trait/trait.Module.html\" title=\"trait algebra::module::module_trait::Module\">Module</a>, T:&nbsp;<a class=\"trait\" href=\"algebra/module/module_trait/trait.Module.html\" title=\"trait algebra::module::module_trait::Module\">Module</a>&lt;Algebra = S::<a class=\"associatedtype\" href=\"algebra/module/module_trait/trait.Module.html#associatedtype.Algebra\" title=\"type algebra::module::module_trait::Module::Algebra\">Algebra</a>&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"algebra/module/homomorphism/full_module_homomorphism/struct.FullModuleHomomorphism.html\" title=\"struct algebra::module::homomorphism::full_module_homomorphism::FullModuleHomomorphism\">FullModuleHomomorphism</a>&lt;S, T&gt;","synthetic":false,"types":["algebra::module::homomorphism::full_module_homomorphism::FullModuleHomomorphism"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"algebra/steenrod_parser/enum.AlgebraBasisElt.html\" title=\"enum algebra::steenrod_parser::AlgebraBasisElt\">AlgebraBasisElt</a>","synthetic":false,"types":["algebra::steenrod_parser::AlgebraBasisElt"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"algebra/steenrod_parser/enum.AlgebraNode.html\" title=\"enum algebra::steenrod_parser::AlgebraNode\">AlgebraNode</a>","synthetic":false,"types":["algebra::steenrod_parser::AlgebraNode"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"algebra/steenrod_parser/enum.BocksteinOrSq.html\" title=\"enum algebra::steenrod_parser::BocksteinOrSq\">BocksteinOrSq</a>","synthetic":false,"types":["algebra::steenrod_parser::BocksteinOrSq"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"algebra/algebra/adem_algebra/struct.AdemBasisElement.html\" title=\"struct algebra::algebra::adem_algebra::AdemBasisElement\">AdemBasisElement</a>","synthetic":false,"types":["algebra::algebra::adem_algebra::AdemBasisElement"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"algebra/algebra/milnor_algebra/struct.QPart.html\" title=\"struct algebra::algebra::milnor_algebra::QPart\">QPart</a>","synthetic":false,"types":["algebra::algebra::milnor_algebra::QPart"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"algebra/algebra/milnor_algebra/struct.MilnorBasisElement.html\" title=\"struct algebra::algebra::milnor_algebra::MilnorBasisElement\">MilnorBasisElement</a>","synthetic":false,"types":["algebra::algebra::milnor_algebra::MilnorBasisElement"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"algebra/algebra/polynomial_algebra/struct.PolynomialAlgebraMonomial.html\" title=\"struct algebra::algebra::polynomial_algebra::PolynomialAlgebraMonomial\">PolynomialAlgebraMonomial</a>","synthetic":false,"types":["algebra::algebra::polynomial_algebra::PolynomialAlgebraMonomial"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"algebra/algebra/steenrod_algebra/enum.AlgebraType.html\" title=\"enum algebra::algebra::steenrod_algebra::AlgebraType\">AlgebraType</a>","synthetic":false,"types":["algebra::algebra::steenrod_algebra::AlgebraType"]}];
implementors["bivec"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"bivec/struct.BiVec.html\" title=\"struct bivec::BiVec\">BiVec</a>&lt;T&gt;","synthetic":false,"types":["bivec::BiVec"]}];
implementors["ext"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"ext/save/enum.SaveKind.html\" title=\"enum ext::save::SaveKind\">SaveKind</a>","synthetic":false,"types":["ext::save::SaveKind"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"ext/nassau/struct.MilnorSubalgebra.html\" title=\"struct ext::nassau::MilnorSubalgebra\">MilnorSubalgebra</a>","synthetic":false,"types":["ext::nassau::MilnorSubalgebra"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"ext/utils/struct.Config.html\" title=\"struct ext::utils::Config\">Config</a>","synthetic":false,"types":["ext::utils::Config"]}];
implementors["fp"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/limb/struct.LimbBitIndexPair.html\" title=\"struct fp::limb::LimbBitIndexPair\">LimbBitIndexPair</a>","synthetic":false,"types":["fp::limb::LimbBitIndexPair"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/matrix/matrix_inner/struct.Matrix.html\" title=\"struct fp::matrix::matrix_inner::Matrix\">Matrix</a>","synthetic":false,"types":["fp::matrix::matrix_inner::Matrix"]},{"text":"impl&lt;const N:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.59.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/matrix/matrix_inner/struct.AugmentedMatrix.html\" title=\"struct fp::matrix::matrix_inner::AugmentedMatrix\">AugmentedMatrix</a>&lt;N&gt;","synthetic":false,"types":["fp::matrix::matrix_inner::AugmentedMatrix"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/matrix/quasi_inverse/struct.QuasiInverse.html\" title=\"struct fp::matrix::quasi_inverse::QuasiInverse\">QuasiInverse</a>","synthetic":false,"types":["fp::matrix::quasi_inverse::QuasiInverse"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/matrix/subquotient/struct.Subquotient.html\" title=\"struct fp::matrix::subquotient::Subquotient\">Subquotient</a>","synthetic":false,"types":["fp::matrix::subquotient::Subquotient"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/matrix/subspace/struct.Subspace.html\" title=\"struct fp::matrix::subspace::Subspace\">Subspace</a>","synthetic":false,"types":["fp::matrix::subspace::Subspace"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/prime/struct.ValidPrime.html\" title=\"struct fp::prime::ValidPrime\">ValidPrime</a>","synthetic":false,"types":["fp::prime::ValidPrime"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"fp/vector/enum.FpVector.html\" title=\"enum fp::vector::FpVector\">FpVector</a>","synthetic":false,"types":["fp::vector::FpVector"]},{"text":"impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"fp/vector/enum.Slice.html\" title=\"enum fp::vector::Slice\">Slice</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector::Slice"]},{"text":"impl&lt;const P:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.59.0/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/vector_inner/struct.FpVectorP.html\" title=\"struct fp::vector_inner::FpVectorP\">FpVectorP</a>&lt;P&gt;","synthetic":false,"types":["fp::vector_inner::FpVectorP"]},{"text":"impl&lt;'a, const P:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.59.0/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fp/vector_inner/struct.SliceP.html\" title=\"struct fp::vector_inner::SliceP\">SliceP</a>&lt;'a, P&gt;","synthetic":false,"types":["fp::vector_inner::SliceP"]}];
implementors["once"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"once/struct.OooTracker.html\" title=\"struct once::OooTracker\">OooTracker</a>","synthetic":false,"types":["once::OooTracker"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"once/struct.OnceVec.html\" title=\"struct once::OnceVec\">OnceVec</a>&lt;T&gt;","synthetic":false,"types":["once::OnceVec"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"once/struct.OnceBiVec.html\" title=\"struct once::OnceBiVec\">OnceBiVec</a>&lt;T&gt;","synthetic":false,"types":["once::OnceBiVec"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
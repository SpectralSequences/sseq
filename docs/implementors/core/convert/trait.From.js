(function() {var implementors = {};
implementors["algebra"] = [{"text":"impl&lt;M:&nbsp;<a class=\"trait\" href=\"algebra/module/module_trait/trait.Module.html\" title=\"trait algebra::module::module_trait::Module\">Module</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.reference.html\">&amp;'_ </a>M&gt; for <a class=\"struct\" href=\"algebra/module/finite_dimensional_module/struct.FiniteDimensionalModule.html\" title=\"struct algebra::module::finite_dimensional_module::FiniteDimensionalModule\">FiniteDimensionalModule</a>&lt;M::<a class=\"associatedtype\" href=\"algebra/module/module_trait/trait.Module.html#associatedtype.Algebra\" title=\"type algebra::module::module_trait::Module::Algebra\">Algebra</a>&gt;","synthetic":false,"types":["algebra::module::finite_dimensional_module::FiniteDimensionalModule"]}];
implementors["ext"] = [{"text":"impl&lt;M, F1, F2, CC&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"ext/chain_complex/finite_chain_complex/struct.FiniteAugmentedChainComplex.html\" title=\"struct ext::chain_complex::finite_chain_complex::FiniteAugmentedChainComplex\">FiniteAugmentedChainComplex</a>&lt;M, F1, F2, CC&gt;&gt; for <a class=\"struct\" href=\"ext/chain_complex/finite_chain_complex/struct.FiniteChainComplex.html\" title=\"struct ext::chain_complex::finite_chain_complex::FiniteChainComplex\">FiniteChainComplex</a>&lt;M, F1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: <a class=\"trait\" href=\"algebra/module/module_trait/trait.Module.html\" title=\"trait algebra::module::module_trait::Module\">Module</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;CC: <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a>&lt;Algebra = M::<a class=\"associatedtype\" href=\"algebra/module/module_trait/trait.Module.html#associatedtype.Algebra\" title=\"type algebra::module::module_trait::Module::Algebra\">Algebra</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: <a class=\"trait\" href=\"algebra/module/homomorphism/trait.ModuleHomomorphism.html\" title=\"trait algebra::module::homomorphism::ModuleHomomorphism\">ModuleHomomorphism</a>&lt;Source = M, Target = M&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: <a class=\"trait\" href=\"algebra/module/homomorphism/trait.ModuleHomomorphism.html\" title=\"trait algebra::module::homomorphism::ModuleHomomorphism\">ModuleHomomorphism</a>&lt;Source = M, Target = CC::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Module\" title=\"type ext::chain_complex::ChainComplex::Module\">Module</a>&gt;,&nbsp;</span>","synthetic":false,"types":["ext::chain_complex::finite_chain_complex::FiniteChainComplex"]}];
implementors["fp"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"fp/prime/struct.ValidPrime.html\" title=\"struct fp::prime::ValidPrime\">ValidPrime</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u32.html\">u32</a>","synthetic":false,"types":[]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'_ <a class=\"enum\" href=\"fp/vector/enum.FpVector.html\" title=\"enum fp::vector::FpVector\">FpVector</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.61.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u32.html\">u32</a>&gt;","synthetic":false,"types":["alloc::vec::Vec"]},{"text":"impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a mut <a class=\"enum\" href=\"fp/vector/enum.SliceMut.html\" title=\"enum fp::vector::SliceMut\">SliceMut</a>&lt;'b&gt;&gt; for <a class=\"enum\" href=\"fp/vector/enum.SliceMut.html\" title=\"enum fp::vector::SliceMut\">SliceMut</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector::SliceMut"]},{"text":"impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"enum\" href=\"fp/vector/enum.Slice.html\" title=\"enum fp::vector::Slice\">Slice</a>&lt;'b&gt;&gt; for <a class=\"enum\" href=\"fp/vector/enum.Slice.html\" title=\"enum fp::vector::Slice\">Slice</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector::Slice"]},{"text":"impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"enum\" href=\"fp/vector/enum.SliceMut.html\" title=\"enum fp::vector::SliceMut\">SliceMut</a>&lt;'b&gt;&gt; for <a class=\"enum\" href=\"fp/vector/enum.Slice.html\" title=\"enum fp::vector::Slice\">Slice</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector::Slice"]},{"text":"impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"enum\" href=\"fp/vector/enum.FpVector.html\" title=\"enum fp::vector::FpVector\">FpVector</a>&gt; for <a class=\"enum\" href=\"fp/vector/enum.Slice.html\" title=\"enum fp::vector::Slice\">Slice</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector::Slice"]},{"text":"impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a mut <a class=\"enum\" href=\"fp/vector/enum.FpVector.html\" title=\"enum fp::vector::FpVector\">FpVector</a>&gt; for <a class=\"enum\" href=\"fp/vector/enum.SliceMut.html\" title=\"enum fp::vector::SliceMut\">SliceMut</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector::SliceMut"]},{"text":"impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a mut <a class=\"struct\" href=\"fp/vector_inner/struct.SliceMutP.html\" title=\"struct fp::vector_inner::SliceMutP\">SliceMutP</a>&lt;'b, 2_u32&gt;&gt; for <a class=\"type\" href=\"fp/vector_2/type.SliceMut.html\" title=\"type fp::vector_2::SliceMut\">SliceMut</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector_2::SliceMut"]},{"text":"impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"fp/vector_inner/struct.SliceP.html\" title=\"struct fp::vector_inner::SliceP\">SliceP</a>&lt;'b, 2_u32&gt;&gt; for <a class=\"type\" href=\"fp/vector_2/type.Slice.html\" title=\"type fp::vector_2::Slice\">Slice</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector_2::Slice"]},{"text":"impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"fp/vector_inner/struct.SliceMutP.html\" title=\"struct fp::vector_inner::SliceMutP\">SliceMutP</a>&lt;'b, 2_u32&gt;&gt; for <a class=\"type\" href=\"fp/vector_2/type.Slice.html\" title=\"type fp::vector_2::Slice\">Slice</a>&lt;'a&gt;","synthetic":false,"types":["fp::vector_2::Slice"]},{"text":"impl&lt;'a, const P:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"fp/vector_inner/struct.FpVectorP.html\" title=\"struct fp::vector_inner::FpVectorP\">FpVectorP</a>&lt;P&gt;&gt; for <a class=\"struct\" href=\"fp/vector_inner/struct.SliceP.html\" title=\"struct fp::vector_inner::SliceP\">SliceP</a>&lt;'a, P&gt;","synthetic":false,"types":["fp::vector_inner::SliceP"]},{"text":"impl&lt;'a, const P:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a mut <a class=\"struct\" href=\"fp/vector_inner/struct.FpVectorP.html\" title=\"struct fp::vector_inner::FpVectorP\">FpVectorP</a>&lt;P&gt;&gt; for <a class=\"struct\" href=\"fp/vector_inner/struct.SliceMutP.html\" title=\"struct fp::vector_inner::SliceMutP\">SliceMutP</a>&lt;'a, P&gt;","synthetic":false,"types":["fp::vector_inner::SliceMutP"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">[</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u32.html\">u32</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt;, const P:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.reference.html\">&amp;'_ </a>T&gt; for <a class=\"struct\" href=\"fp/vector_inner/struct.FpVectorP.html\" title=\"struct fp::vector_inner::FpVectorP\">FpVectorP</a>&lt;P&gt;","synthetic":false,"types":["fp::vector_inner::FpVectorP"]},{"text":"impl&lt;const P:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'_ <a class=\"struct\" href=\"fp/vector_inner/struct.FpVectorP.html\" title=\"struct fp::vector_inner::FpVectorP\">FpVectorP</a>&lt;P&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.61.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u32.html\">u32</a>&gt;","synthetic":false,"types":["alloc::vec::Vec"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
(function() {var type_impls = {
"maybe_rayon":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Scope%3C'scope%3E\" class=\"impl\"><a href=\"#impl-Scope%3C'scope%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'scope&gt; Scope&lt;'scope&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">spawn</a>&lt;BODY&gt;(&amp;self, body: BODY)<div class=\"where\">where\n    BODY: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;Scope&lt;'scope&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'scope,</div></h4></section></summary><div class=\"docblock\"><p>Spawns a job into the fork-join scope <code>self</code>. This job will\nexecute sometime before the fork-join scope completes.  The\njob is specified as a closure, and this closure receives its\nown reference to the scope <code>self</code> as argument. This can be\nused to inject new jobs into <code>self</code>.</p>\n<h5 id=\"returns\"><a href=\"#returns\">Returns</a></h5>\n<p>Nothing. The spawned closures cannot pass back values to the\ncaller directly, though they can write to local variables on\nthe stack (if those variables outlive the scope) or\ncommunicate through shared channels.</p>\n<p>(The intention is to eventually integrate with Rust futures to\nsupport spawns of functions that compute a value.)</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value_a = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value_b = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value_c = <span class=\"prelude-val\">None</span>;\nrayon::scope(|s| {\n    s.spawn(|s1| {\n          <span class=\"comment\">// ^ this is the same scope as `s`; this handle `s1`\n          //   is intended for use by the spawned task,\n          //   since scope handles cannot cross thread boundaries.\n\n        </span>value_a = <span class=\"prelude-val\">Some</span>(<span class=\"number\">22</span>);\n\n        <span class=\"comment\">// the scope `s` will not end until all these tasks are done\n        </span>s1.spawn(|<span class=\"kw\">_</span>| {\n            value_b = <span class=\"prelude-val\">Some</span>(<span class=\"number\">44</span>);\n        });\n    });\n\n    s.spawn(|<span class=\"kw\">_</span>| {\n        value_c = <span class=\"prelude-val\">Some</span>(<span class=\"number\">66</span>);\n    });\n});\n<span class=\"macro\">assert_eq!</span>(value_a, <span class=\"prelude-val\">Some</span>(<span class=\"number\">22</span>));\n<span class=\"macro\">assert_eq!</span>(value_b, <span class=\"prelude-val\">Some</span>(<span class=\"number\">44</span>));\n<span class=\"macro\">assert_eq!</span>(value_c, <span class=\"prelude-val\">Some</span>(<span class=\"number\">66</span>));</code></pre></div>\n<h5 id=\"see-also\"><a href=\"#see-also\">See also</a></h5>\n<p>The <a href=\"fn.scope.html\"><code>scope</code> function</a> has more extensive documentation about\ntask spawning.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_broadcast\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">spawn_broadcast</a>&lt;BODY&gt;(&amp;self, body: BODY)<div class=\"where\">where\n    BODY: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Scope&lt;'scope&gt;, BroadcastContext&lt;'_&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'scope,</div></h4></section></summary><div class=\"docblock\"><p>Spawns a job into every thread of the fork-join scope <code>self</code>. This job will\nexecute on each thread sometime before the fork-join scope completes.  The\njob is specified as a closure, and this closure receives its own reference\nto the scope <code>self</code> as argument, as well as a <code>BroadcastContext</code>.</p>\n</div></details></div></details>",0,"maybe_rayon::concurrent::Scope"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Scope%3C'scope%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Scope%3C'scope%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'scope&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Scope&lt;'scope&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","maybe_rayon::concurrent::Scope"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()
(function() {var type_impls = {
"ext":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AugmentedChainComplex-for-MuResolution%3CU,+CC%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#909-923\">source</a><a href=\"#impl-AugmentedChainComplex-for-MuResolution%3CU,+CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, CC: <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a>&gt; <a class=\"trait\" href=\"ext/chain_complex/trait.AugmentedChainComplex.html\" title=\"trait ext::chain_complex::AugmentedChainComplex\">AugmentedChainComplex</a> for <a class=\"struct\" href=\"ext/resolution/struct.MuResolution.html\" title=\"struct ext::resolution::MuResolution\">MuResolution</a>&lt;U, CC&gt;<div class=\"where\">where\n    CC::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" title=\"type ext::chain_complex::ChainComplex::Algebra\">Algebra</a>: <a class=\"trait\" href=\"algebra/algebra/algebra_trait/trait.MuAlgebra.html\" title=\"trait algebra::algebra::algebra_trait::MuAlgebra\">MuAlgebra</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.ChainMap\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ChainMap\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ext/chain_complex/trait.AugmentedChainComplex.html#associatedtype.ChainMap\" class=\"associatedtype\">ChainMap</a> = <a class=\"struct\" href=\"algebra/module/homomorphism/free_module_homomorphism/struct.MuFreeModuleHomomorphism.html\" title=\"struct algebra::module::homomorphism::free_module_homomorphism::MuFreeModuleHomomorphism\">MuFreeModuleHomomorphism</a>&lt;U, &lt;CC as <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a>&gt;::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Module\" title=\"type ext::chain_complex::ChainComplex::Module\">Module</a>&gt;</h4></section><section id=\"associatedtype.TargetComplex\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.TargetComplex\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ext/chain_complex/trait.AugmentedChainComplex.html#associatedtype.TargetComplex\" class=\"associatedtype\">TargetComplex</a> = CC</h4></section><section id=\"method.target\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#916-918\">source</a><a href=\"#method.target\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.AugmentedChainComplex.html#tymethod.target\" class=\"fn\">target</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.AugmentedChainComplex.html#associatedtype.TargetComplex\" title=\"type ext::chain_complex::AugmentedChainComplex::TargetComplex\">TargetComplex</a>&gt;</h4></section><section id=\"method.chain_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#920-922\">source</a><a href=\"#method.chain_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.AugmentedChainComplex.html#tymethod.chain_map\" class=\"fn\">chain_map</a>(&amp;self, s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.AugmentedChainComplex.html#associatedtype.ChainMap\" title=\"type ext::chain_complex::AugmentedChainComplex::ChainMap\">ChainMap</a>&gt;</h4></section></div></details>","AugmentedChainComplex","ext::resolution::Resolution","ext::resolution::UnstableResolution"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ChainComplex-for-MuResolution%3CU,+CC%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#839-907\">source</a><a href=\"#impl-ChainComplex-for-MuResolution%3CU,+CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, CC: <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a>&gt; <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a> for <a class=\"struct\" href=\"ext/resolution/struct.MuResolution.html\" title=\"struct ext::resolution::MuResolution\">MuResolution</a>&lt;U, CC&gt;<div class=\"where\">where\n    CC::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" title=\"type ext::chain_complex::ChainComplex::Algebra\">Algebra</a>: <a class=\"trait\" href=\"algebra/algebra/algebra_trait/trait.MuAlgebra.html\" title=\"trait algebra::algebra::algebra_trait::MuAlgebra\">MuAlgebra</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Algebra\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Algebra\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" class=\"associatedtype\">Algebra</a> = &lt;CC as <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a>&gt;::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" title=\"type ext::chain_complex::ChainComplex::Algebra\">Algebra</a></h4></section><section id=\"associatedtype.Homomorphism\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Homomorphism\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Homomorphism\" class=\"associatedtype\">Homomorphism</a> = <a class=\"struct\" href=\"algebra/module/homomorphism/free_module_homomorphism/struct.MuFreeModuleHomomorphism.html\" title=\"struct algebra::module::homomorphism::free_module_homomorphism::MuFreeModuleHomomorphism\">MuFreeModuleHomomorphism</a>&lt;U, <a class=\"struct\" href=\"algebra/module/free_module/struct.MuFreeModule.html\" title=\"struct algebra::module::free_module::MuFreeModule\">MuFreeModule</a>&lt;U, &lt;<a class=\"struct\" href=\"ext/resolution/struct.MuResolution.html\" title=\"struct ext::resolution::MuResolution\">MuResolution</a>&lt;U, CC&gt; as <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a>&gt;::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" title=\"type ext::chain_complex::ChainComplex::Algebra\">Algebra</a>&gt;&gt;</h4></section><section id=\"associatedtype.Module\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Module\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Module\" class=\"associatedtype\">Module</a> = <a class=\"struct\" href=\"algebra/module/free_module/struct.MuFreeModule.html\" title=\"struct algebra::module::free_module::MuFreeModule\">MuFreeModule</a>&lt;U, &lt;<a class=\"struct\" href=\"ext/resolution/struct.MuResolution.html\" title=\"struct ext::resolution::MuResolution\">MuResolution</a>&lt;U, CC&gt; as <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a>&gt;::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" title=\"type ext::chain_complex::ChainComplex::Algebra\">Algebra</a>&gt;</h4></section><section id=\"method.algebra\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#847-849\">source</a><a href=\"#method.algebra\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#tymethod.algebra\" class=\"fn\">algebra</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" title=\"type ext::chain_complex::ChainComplex::Algebra\">Algebra</a>&gt;</h4></section><section id=\"method.module\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#851-853\">source</a><a href=\"#method.module\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#tymethod.module\" class=\"fn\">module</a>(&amp;self, s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Module\" title=\"type ext::chain_complex::ChainComplex::Module\">Module</a>&gt;</h4></section><section id=\"method.zero_module\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#855-857\">source</a><a href=\"#method.zero_module\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#tymethod.zero_module\" class=\"fn\">zero_module</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Module\" title=\"type ext::chain_complex::ChainComplex::Module\">Module</a>&gt;</h4></section><section id=\"method.min_degree\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#859-861\">source</a><a href=\"#method.min_degree\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#tymethod.min_degree\" class=\"fn\">min_degree</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.i32.html\">i32</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_computed_bidegree\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#863-865\">source</a><a href=\"#method.has_computed_bidegree\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#tymethod.has_computed_bidegree\" class=\"fn\">has_computed_bidegree</a>(&amp;self, b: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>If the complex has been computed at bidegree (s, t). This means the module has been\ncomputed at (s, t), and so has the differential at (s, t). In the case of a free module,\nthe target of the differential, namely the bidegree (s - 1, t), need not be computed, as\nlong as all the generators hit by the differential have already been computed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.differential\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#867-869\">source</a><a href=\"#method.differential\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#tymethod.differential\" class=\"fn\">differential</a>(&amp;self, s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Homomorphism\" title=\"type ext::chain_complex::ChainComplex::Homomorphism\">Homomorphism</a>&gt;</h4></section></summary><div class='docblock'>This returns the differential starting from the sth module.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compute_through_bidegree\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#871\">source</a><a href=\"#method.compute_through_bidegree\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#tymethod.compute_through_bidegree\" class=\"fn\">compute_through_bidegree</a>(&amp;self, b: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>)</h4></section></summary><div class='docblock'>Ensure all bidegrees less than or equal to (s, t) have been computed</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_homological_degree\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#876-878\">source</a><a href=\"#method.next_homological_degree\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#tymethod.next_homological_degree\" class=\"fn\">next_homological_degree</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The first s such that <code>self.module(s)</code> is not defined.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_quasi_inverse\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#880-902\">source</a><a href=\"#method.apply_quasi_inverse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#method.apply_quasi_inverse\" class=\"fn\">apply_quasi_inverse</a>&lt;T, S&gt;(\n    &amp;self,\n    results: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>,\n    b: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>,\n    inputs: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[S]</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    for&lt;'a&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;'a mut T</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"fp/vector/fp_wrapper/enum.FpSliceMut.html\" title=\"enum fp::vector::fp_wrapper::FpSliceMut\">FpSliceMut</a>&lt;'a&gt;&gt;,\n    for&lt;'a&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;'a S</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"fp/vector/fp_wrapper/enum.FpSlice.html\" title=\"enum fp::vector::fp_wrapper::FpSlice\">FpSlice</a>&lt;'a&gt;&gt;,</div></h4></section></summary><div class='docblock'>Apply the quasi-inverse of the (s, t)th differential to the list of inputs and results.\nThis defaults to applying <code>self.differentials(s).quasi_inverse(t)</code>, but in some cases\nthe quasi-inverse might be stored separately on disk. <a href=\"ext/chain_complex/trait.ChainComplex.html#method.apply_quasi_inverse\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.save_dir\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#904-906\">source</a><a href=\"#method.save_dir\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#method.save_dir\" class=\"fn\">save_dir</a>(&amp;self) -&gt; &amp;<a class=\"enum\" href=\"ext/save/enum.SaveDirectory.html\" title=\"enum ext::save::SaveDirectory\">SaveDirectory</a></h4></section></summary><div class='docblock'>A directory used to save information about the chain complex.</div></details><section id=\"method.prime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/chain_complex/mod.rs.html#166-168\">source</a><a href=\"#method.prime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#method.prime\" class=\"fn\">prime</a>(&amp;self) -&gt; <a class=\"struct\" href=\"fp/prime/primes_generic/struct.ValidPrime.html\" title=\"struct fp::prime::primes_generic::ValidPrime\">ValidPrime</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_stem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/chain_complex/mod.rs.html#192-198\">source</a><a href=\"#method.iter_stem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#method.iter_stem\" class=\"fn\">iter_stem</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ext/chain_complex/struct.StemIterator.html\" title=\"struct ext::chain_complex::StemIterator\">StemIterator</a>&lt;'_, Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StemIterator&lt;&#39;_, Self&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Iterate through all defined bidegrees in increasing order of stem. The return values are of\nthe form <code>(s, n, t)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.save_file\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ext/chain_complex/mod.rs.html#235-246\">source</a><a href=\"#method.save_file\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ext/chain_complex/trait.ChainComplex.html#method.save_file\" class=\"fn\">save_file</a>(&amp;self, kind: <a class=\"enum\" href=\"ext/save/enum.SaveKind.html\" title=\"enum ext::save::SaveKind\">SaveKind</a>, b: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>) -&gt; <a class=\"struct\" href=\"ext/save/struct.SaveFile.html\" title=\"struct ext::save::SaveFile\">SaveFile</a>&lt;Self::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" title=\"type ext::chain_complex::ChainComplex::Algebra\">Algebra</a>&gt;</h4></section></summary><div class='docblock'>Get the save file of a bidegree</div></details></div></details>","ChainComplex","ext::resolution::Resolution","ext::resolution::UnstableResolution"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MuResolution%3CU,+CC%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#100-837\">source</a><a href=\"#impl-MuResolution%3CU,+CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, CC: <a class=\"trait\" href=\"ext/chain_complex/trait.ChainComplex.html\" title=\"trait ext::chain_complex::ChainComplex\">ChainComplex</a>&gt; <a class=\"struct\" href=\"ext/resolution/struct.MuResolution.html\" title=\"struct ext::resolution::MuResolution\">MuResolution</a>&lt;U, CC&gt;<div class=\"where\">where\n    CC::<a class=\"associatedtype\" href=\"ext/chain_complex/trait.ChainComplex.html#associatedtype.Algebra\" title=\"type ext::chain_complex::ChainComplex::Algebra\">Algebra</a>: <a class=\"trait\" href=\"algebra/algebra/algebra_trait/trait.MuAlgebra.html\" title=\"trait algebra::algebra::algebra_trait::MuAlgebra\">MuAlgebra</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#104-107\">source</a><h4 class=\"code-header\">pub fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.new\" class=\"fn\">new</a>(complex: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;CC&gt;) -&gt; Self</h4></section><section id=\"method.new_with_save\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#109-138\">source</a><h4 class=\"code-header\">pub fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.new_with_save\" class=\"fn\">new_with_save</a>(\n    complex: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;CC&gt;,\n    save_dir: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"ext/save/enum.SaveDirectory.html\" title=\"enum ext::save::SaveDirectory\">SaveDirectory</a>&gt;,\n) -&gt; <a class=\"type\" href=\"https://docs.rs/anyhow/1.0.85/anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;Self&gt;</h4></section><section id=\"method.set_name\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#140-142\">source</a><h4 class=\"code-header\">pub fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.set_name\" class=\"fn\">set_name</a>(&amp;mut self, name: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>)</h4></section><section id=\"method.name\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#144-146\">source</a><h4 class=\"code-header\">pub fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.name\" class=\"fn\">name</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_through_degree\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#151-184\">source</a><h4 class=\"code-header\">fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.extend_through_degree\" class=\"fn\">extend_through_degree</a>(&amp;self, max_s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>This function prepares the Resolution object to perform computations up to the\nspecified s degree. It does <em>not</em> perform any computations by itself. It simply lengthens\nthe <code>OnceVec</code>s <code>modules</code>, <code>chain_maps</code>, etc. to the right length.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_kernel\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#190\">source</a><h4 class=\"code-header\">fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.get_kernel\" class=\"fn\">get_kernel</a>(&amp;self, b: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>) -&gt; <a class=\"struct\" href=\"fp/matrix/subspace/struct.Subspace.html\" title=\"struct fp::matrix::subspace::Subspace\">Subspace</a></h4></section></summary><div class=\"docblock\"><p>Gets the kernel of the differential starting at $(s, t)$. If this was previously computed,\nwe simply retrieve the value (and remove it from the cache). Otherwise, we compute the\nkernel. This requires the differential to be computed at $(s, t - 1)$, but not $(s, t)$\nitself. Indeed, the new generators added to $(s, t)$ are by construction not in the kernel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step_resolution\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#323\">source</a><h4 class=\"code-header\">fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.step_resolution\" class=\"fn\">step_resolution</a>(&amp;self, b: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>)</h4></section></summary><div class=\"docblock\"><p>Call our resolution $X$, and the chain complex to resolve $C$. This is a legitimate\nresolution if the map $f: X \\to C$ induces an isomorphism on homology. This is the same as\nsaying the cofiber is exact. The cofiber is given by the complex</p>\n<p>$$ X_s \\oplus C_{s+1} \\to X_{s-1} \\oplus C_s \\to X_{s-2} \\oplus C_{s-1} \\to \\cdots $$</p>\n<p>where the differentials are given by</p>\n<p>$$ \\begin{pmatrix} d_X &amp; 0 \\\\ (-1)^s f &amp; d_C \\end{pmatrix} $$</p>\n<p>Our method of producing $X_{s, t}$ and the chain maps are as follows. Suppose we have already\nbuilt the chain map and differential for $X_{s-1, t}$ and $X_{s, t-1}$. Since $X_s$ is a\nfree module, the generators in degree $&lt; t$ gives us a bunch of elements in $X_s$ already,\nand we know exactly where they get mapped to. Let $T$ be the $\\mathbb{F}_p$ vector space\ngenerated by these elements. Then we already have a map</p>\n<p>$$ T \\to X_{s-1, t} \\oplus C_{s, t}$$</p>\n<p>and we know this hits the kernel of the map</p>\n<p>$$ D = X_{s-1, t} \\oplus C_{s, t} \\to X_{s-2, t} \\oplus C_{s-1, t}. $$</p>\n<p>What we need to do now is to add generators to $X_{s, t}$ to hit the entirity of this\nkernel.  Note that we don’t <em>have</em> to do this. Some of the elements in the kernel might be\nhit by $C_{s+1, t}$ and we don’t have to hit them, but we opt to add generators to hit it\nanyway.</p>\n<p>If we do it this way, then we know the composite of the map</p>\n<p>$$ T \\to X_{s-1, t} \\oplus C_{s, t} \\to C_{s, t} $$</p>\n<p>has to be surjective, since the image of $C_{s, t}$ under $D$ is also in the image of $X_{s-1, t}$.\nSo our first step is to add generators to $X_{s, t}$ such that this composite is\nsurjective.</p>\n<p>After adding these generators, we need to decide where to send them to. We know their\nvalues in the $C_{s, t}$ component, but we need to use a quasi-inverse to find the element in\n$X_{s-1, t}$ that hits the corresponding image of $C_{s, t}$. This tells us the $X_{s-1,\nt}$ component.</p>\n<p>Finally, we need to add further generators to $X_{s, t}$ to hit all the elements in the\nkernel of</p>\n<p>$$ X_{s-1, t} \\to X_{s-2, t} \\oplus C_{s-1, t}. $$</p>\n<p>This kernel was recorded by the previous iteration of the method in <code>old_kernel</code>, so this\nstep is doable as well.</p>\n<p>Note that if we add our new generators conservatively, then the kernel of the maps</p>\n<p>$$\n\\begin{aligned}\nT &amp;\\to X_{s-1, t} \\oplus C_{s, t} \\\\\nX_{s, t} &amp;\\to X_{s-1, t} \\oplus C_{s, t}\n\\end{aligned}\n$$\nagree.</p>\n<p>In the code, we first row reduce the matrix of the map from $T$. This lets us record\nthe kernel which is what the function returns at the end. This computation helps us perform\nthe future steps since we need to know about the cokernel of this map.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>s</code> - The s degree to calculate</li>\n<li><code>t</code> - The t degree to calculate</li>\n</ul>\n<p>To run <code>step_resolution(s, t)</code>, we must have already had run <code>step_resolution(s, t - 1)</code>\nand <code>step_resolution(s - 1, t - 1)</code>. It is more efficient if we have in fact run\n<code>step_resolution(s - 1, t)</code>, so try your best to arrange calls to be run in this order.</p>\n</div></details><section id=\"method.compute_through_bidegree_with_callback\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#704-758\">source</a><h4 class=\"code-header\">pub fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.compute_through_bidegree_with_callback\" class=\"fn\">compute_through_bidegree_with_callback</a>(\n    &amp;self,\n    max: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>,\n    cb: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>),\n)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.compute_through_stem\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#761\">source</a><h4 class=\"code-header\">pub fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.compute_through_stem\" class=\"fn\">compute_through_stem</a>(&amp;self, max: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>)</h4></section></summary><div class=\"docblock\"><p>This function resolves up till a fixed stem instead of a fixed t.</p>\n</div></details><section id=\"method.compute_through_stem_with_callback\" class=\"method\"><a class=\"src rightside\" href=\"src/ext/resolution.rs.html#766-836\">source</a><h4 class=\"code-header\">pub fn <a href=\"ext/resolution/struct.MuResolution.html#tymethod.compute_through_stem_with_callback\" class=\"fn\">compute_through_stem_with_callback</a>(\n    &amp;self,\n    max: <a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>,\n    cb: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"sseq/coordinates/bidegree/struct.Bidegree.html\" title=\"struct sseq::coordinates::bidegree::Bidegree\">Bidegree</a>),\n)</h4></section></div></details>",0,"ext::resolution::Resolution","ext::resolution::UnstableResolution"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()
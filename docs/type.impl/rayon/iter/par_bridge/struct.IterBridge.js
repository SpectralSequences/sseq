(function() {var type_impls = {
"maybe_rayon":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-IterBridge%3CIter%3E\" class=\"impl\"><a href=\"#impl-Clone-for-IterBridge%3CIter%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Iter&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for IterBridge&lt;Iter&gt;<div class=\"where\">where\n    Iter: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; IterBridge&lt;Iter&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.78.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","maybe_rayon::concurrent::prelude::MaybeIterBridge"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-IterBridge%3CIter%3E\" class=\"impl\"><a href=\"#impl-Debug-for-IterBridge%3CIter%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Iter&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for IterBridge&lt;Iter&gt;<div class=\"where\">where\n    Iter: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","maybe_rayon::concurrent::prelude::MaybeIterBridge"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelIterator-for-IterBridge%3CIter%3E\" class=\"impl\"><a href=\"#impl-ParallelIterator-for-IterBridge%3CIter%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Iter&gt; <a class=\"trait\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html\" title=\"trait maybe_rayon::concurrent::prelude::ParallelIterator\">ParallelIterator</a> for IterBridge&lt;Iter&gt;<div class=\"where\">where\n    Iter: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    &lt;Iter as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\" title=\"type core::iter::traits::iterator::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;Iter as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\" title=\"type core::iter::traits::iterator::Iterator::Item\">Item</a></h4></section></summary><div class='docblock'>The type of item that this parallel iterator produces.\nFor example, if you use the <a href=\"#method.for_each\"><code>for_each</code></a> method, this is the type of\nitem that your closure will be invoked with.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drive_unindexed\" class=\"method trait-impl\"><a href=\"#method.drive_unindexed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#tymethod.drive_unindexed\" class=\"fn\">drive_unindexed</a>&lt;C&gt;(\n    self,\n    consumer: C\n) -&gt; &lt;C as Consumer&lt;&lt;IterBridge&lt;Iter&gt; as <a class=\"trait\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html\" title=\"trait maybe_rayon::concurrent::prelude::ParallelIterator\">ParallelIterator</a>&gt;::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;&gt;::Result<div class=\"where\">where\n    C: UnindexedConsumer&lt;&lt;IterBridge&lt;Iter&gt; as <a class=\"trait\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html\" title=\"trait maybe_rayon::concurrent::prelude::ParallelIterator\">ParallelIterator</a>&gt;::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Internal method used to define the behavior of this parallel\niterator. You should not need to call this directly. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#tymethod.drive_unindexed\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each\" class=\"method trait-impl\"><a href=\"#method.for_each\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.for_each\" class=\"fn\">for_each</a>&lt;OP&gt;(self, op: OP)<div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Executes <code>OP</code> on each item produced by the iterator, in parallel. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each_with\" class=\"method trait-impl\"><a href=\"#method.for_each_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.for_each_with\" class=\"fn\">for_each_with</a>&lt;OP, T&gt;(self, init: T, op: OP)<div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;mut T</a>, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Executes <code>OP</code> on the given <code>init</code> value with each item produced by\nthe iterator, in parallel. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.for_each_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each_init\" class=\"method trait-impl\"><a href=\"#method.for_each_init\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.for_each_init\" class=\"fn\">for_each_init</a>&lt;OP, INIT, T&gt;(self, init: INIT, op: OP)<div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;mut T</a>, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    INIT: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Executes <code>OP</code> on a value returned by <code>init</code> with each item produced by\nthe iterator, in parallel. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.for_each_init\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_for_each\" class=\"method trait-impl\"><a href=\"#method.try_for_each\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_for_each\" class=\"fn\">try_for_each</a>&lt;OP, R&gt;(self, op: OP) -&gt; R<div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: Try&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Executes a fallible <code>OP</code> on each item produced by the iterator, in parallel. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_for_each_with\" class=\"method trait-impl\"><a href=\"#method.try_for_each_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_for_each_with\" class=\"fn\">try_for_each_with</a>&lt;OP, T, R&gt;(self, init: T, op: OP) -&gt; R<div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;mut T</a>, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    R: Try&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Executes a fallible <code>OP</code> on the given <code>init</code> value with each item\nproduced by the iterator, in parallel. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_for_each_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_for_each_init\" class=\"method trait-impl\"><a href=\"#method.try_for_each_init\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_for_each_init\" class=\"fn\">try_for_each_init</a>&lt;OP, INIT, T, R&gt;(self, init: INIT, op: OP) -&gt; R<div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;mut T</a>, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    INIT: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: Try&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Executes a fallible <code>OP</code> on a value returned by <code>init</code> with each item\nproduced by the iterator, in parallel. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_for_each_init\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><a href=\"#method.count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.count\" class=\"fn\">count</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Counts the number of items in this parallel iterator. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.count\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.map\" class=\"fn\">map</a>&lt;F, R&gt;(self, map_op: F) -&gt; Map&lt;Self, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies <code>map_op</code> to each item of this iterator, producing a new\niterator with the results. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_with\" class=\"method trait-impl\"><a href=\"#method.map_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.map_with\" class=\"fn\">map_with</a>&lt;F, T, R&gt;(self, init: T, map_op: F) -&gt; MapWith&lt;Self, T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;mut T</a>, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies <code>map_op</code> to the given <code>init</code> value with each item of this\niterator, producing a new iterator with the results. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.map_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_init\" class=\"method trait-impl\"><a href=\"#method.map_init\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.map_init\" class=\"fn\">map_init</a>&lt;F, INIT, T, R&gt;(\n    self,\n    init: INIT,\n    map_op: F\n) -&gt; MapInit&lt;Self, INIT, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;mut T</a>, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    INIT: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies <code>map_op</code> to a value returned by <code>init</code> with each item of this\niterator, producing a new iterator with the results. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.map_init\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method trait-impl\"><a href=\"#method.cloned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.cloned\" class=\"fn\">cloned</a>&lt;'a, T&gt;(self) -&gt; Cloned&lt;Self&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    Self: <a class=\"trait\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html\" title=\"trait maybe_rayon::concurrent::prelude::ParallelIterator\">ParallelIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator which clones all of its elements.  This may be\nuseful when you have an iterator over <code>&amp;T</code>, but you need <code>T</code>, and\nthat type implements <code>Clone</code>. See also <a href=\"#method.copied\"><code>copied()</code></a>. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.cloned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copied\" class=\"method trait-impl\"><a href=\"#method.copied\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.copied\" class=\"fn\">copied</a>&lt;'a, T&gt;(self) -&gt; Copied&lt;Self&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    Self: <a class=\"trait\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html\" title=\"trait maybe_rayon::concurrent::prelude::ParallelIterator\">ParallelIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates an iterator which copies all of its elements.  This may be\nuseful when you have an iterator over <code>&amp;T</code>, but you need <code>T</code>, and\nthat type implements <code>Copy</code>. See also <a href=\"#method.cloned\"><code>cloned()</code></a>. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.copied\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method trait-impl\"><a href=\"#method.inspect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.inspect\" class=\"fn\">inspect</a>&lt;OP&gt;(self, inspect_op: OP) -&gt; Inspect&lt;Self, OP&gt;<div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies <code>inspect_op</code> to a reference to each item of this iterator,\nproducing a new iterator passing through the original items.  This is\noften useful for debugging to see what’s happening in iterator stages. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.inspect\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method trait-impl\"><a href=\"#method.update\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.update\" class=\"fn\">update</a>&lt;F&gt;(self, update_op: F) -&gt; Update&lt;Self, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;mut Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Mutates each item of this iterator before yielding it. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.update\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, filter_op: P) -&gt; Filter&lt;Self, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies <code>filter_op</code> to each item of this iterator, producing a new\niterator with only the items that gave <code>true</code> results. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.filter\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method trait-impl\"><a href=\"#method.filter_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.filter_map\" class=\"fn\">filter_map</a>&lt;P, R&gt;(self, filter_op: P) -&gt; FilterMap&lt;Self, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies <code>filter_op</code> to each item of this iterator to get an <code>Option</code>,\nproducing a new iterator with only the items from <code>Some</code> results. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.filter_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><a href=\"#method.flat_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.flat_map\" class=\"fn\">flat_map</a>&lt;F, PI&gt;(self, map_op: F) -&gt; FlatMap&lt;Self, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; PI + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    PI: IntoParallelIterator,</div></h4></section></summary><div class='docblock'>Applies <code>map_op</code> to each item of this iterator to get nested parallel iterators,\nproducing a new parallel iterator that flattens these back into one. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.flat_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map_iter\" class=\"method trait-impl\"><a href=\"#method.flat_map_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.flat_map_iter\" class=\"fn\">flat_map_iter</a>&lt;F, SI&gt;(self, map_op: F) -&gt; FlatMapIter&lt;Self, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; SI + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    SI: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,\n    &lt;SI as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies <code>map_op</code> to each item of this iterator to get nested serial iterators,\nproducing a new parallel iterator that flattens these back into one. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.flat_map_iter\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reduce\" class=\"method trait-impl\"><a href=\"#method.reduce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.reduce\" class=\"fn\">reduce</a>&lt;OP, ID&gt;(self, identity: ID, op: OP) -&gt; Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a><div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    ID: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Reduces the items in the iterator into one item using <code>op</code>.\nThe argument <code>identity</code> should be a closure that can produce\n“identity” value which may be inserted into the sequence as\nneeded to create opportunities for parallel execution. So, for\nexample, if you are doing a summation, then <code>identity()</code> ought\nto produce something that represents the zero for your type\n(but consider just calling <code>sum()</code> in that case). <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reduce_with\" class=\"method trait-impl\"><a href=\"#method.reduce_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.reduce_with\" class=\"fn\">reduce_with</a>&lt;OP&gt;(self, op: OP) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;<div class=\"where\">where\n    OP: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Reduces the items in the iterator into one item using <code>op</code>.\nIf the iterator is empty, <code>None</code> is returned; otherwise,\n<code>Some</code> is returned. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.reduce_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold\" class=\"method trait-impl\"><a href=\"#method.fold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.fold\" class=\"fn\">fold</a>&lt;T, ID, F&gt;(self, identity: ID, fold_op: F) -&gt; Fold&lt;Self, ID, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(T, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    ID: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Parallel fold is similar to sequential fold except that the\nsequence of items may be subdivided before it is\nfolded. Consider a list of numbers like <code>22 3 77 89 46</code>. If\nyou used sequential fold to add them (<code>fold(0, |a,b| a+b)</code>,\nyou would wind up first adding 0 + 22, then 22 + 3, then 25 +\n77, and so forth. The <strong>parallel fold</strong> works similarly except\nthat it first breaks up your list into sublists, and hence\ninstead of yielding up a single sum at the end, it yields up\nmultiple sums. The number of results is nondeterministic, as\nis the point where the breaks occur. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold_with\" class=\"method trait-impl\"><a href=\"#method.fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.fold_with\" class=\"fn\">fold_with</a>&lt;F, T&gt;(self, init: T, fold_op: F) -&gt; FoldWith&lt;Self, T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(T, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Applies <code>fold_op</code> to the given <code>init</code> value with each item of this\niterator, finally producing the value for further use. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.fold_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_fold\" class=\"method trait-impl\"><a href=\"#method.try_fold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_fold\" class=\"fn\">try_fold</a>&lt;T, R, ID, F&gt;(\n    self,\n    identity: ID,\n    fold_op: F\n) -&gt; TryFold&lt;Self, R, ID, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(T, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    ID: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: Try&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Performs a fallible parallel fold. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_fold_with\" class=\"method trait-impl\"><a href=\"#method.try_fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_fold_with\" class=\"fn\">try_fold_with</a>&lt;F, T, R&gt;(self, init: T, fold_op: F) -&gt; TryFoldWith&lt;Self, R, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(T, Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: Try&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Performs a fallible parallel fold with a cloneable <code>init</code> value. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.try_fold_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.sum\" class=\"fn\">sum</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>,</div></h4></section></summary><div class='docblock'>Sums up the items in the iterator. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.product\" class=\"fn\">product</a>&lt;P&gt;(self) -&gt; P<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>,</div></h4></section></summary><div class='docblock'>Multiplies all the items in the iterator. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.product\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by\" class=\"method trait-impl\"><a href=\"#method.min_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.min_by\" class=\"fn\">min_by</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Computes the minimum of all the items in the iterator with respect to\nthe given comparison function. If the iterator is empty, <code>None</code> is\nreturned; otherwise, <code>Some(min)</code> is returned. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.min_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by_key\" class=\"method trait-impl\"><a href=\"#method.min_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.min_by_key\" class=\"fn\">min_by_key</a>&lt;K, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; K,</div></h4></section></summary><div class='docblock'>Computes the item that yields the minimum value for the given\nfunction. If the iterator is empty, <code>None</code> is returned;\notherwise, <code>Some(item)</code> is returned. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.min_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by\" class=\"method trait-impl\"><a href=\"#method.max_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.max_by\" class=\"fn\">max_by</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Computes the maximum of all the items in the iterator with respect to\nthe given comparison function. If the iterator is empty, <code>None</code> is\nreturned; otherwise, <code>Some(max)</code> is returned. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.max_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by_key\" class=\"method trait-impl\"><a href=\"#method.max_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.max_by_key\" class=\"fn\">max_by_key</a>&lt;K, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; K,</div></h4></section></summary><div class='docblock'>Computes the item that yields the maximum value for the given\nfunction. If the iterator is empty, <code>None</code> is returned;\notherwise, <code>Some(item)</code> is returned. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.max_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.chain\" class=\"fn\">chain</a>&lt;C&gt;(self, chain: C) -&gt; Chain&lt;Self, &lt;C as IntoParallelIterator&gt;::Iter&gt;<div class=\"where\">where\n    C: IntoParallelIterator&lt;Item = Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes two iterators and creates a new iterator over both. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_any\" class=\"method trait-impl\"><a href=\"#method.find_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_any\" class=\"fn\">find_any</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Searches for <strong>some</strong> item in the parallel iterator that\nmatches the given predicate and returns it. This operation\nis similar to <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find\"><code>find</code> on sequential iterators</a> but\nthe item returned may not be the <strong>first</strong> one in the parallel\nsequence which matches, since we search the entire sequence in parallel. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_first\" class=\"method trait-impl\"><a href=\"#method.find_first\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_first\" class=\"fn\">find_first</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Searches for the sequentially <strong>first</strong> item in the parallel iterator\nthat matches the given predicate and returns it. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_first\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_last\" class=\"method trait-impl\"><a href=\"#method.find_last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_last\" class=\"fn\">find_last</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Searches for the sequentially <strong>last</strong> item in the parallel iterator\nthat matches the given predicate and returns it. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_last\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_map_any\" class=\"method trait-impl\"><a href=\"#method.find_map_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_map_any\" class=\"fn\">find_map_any</a>&lt;P, R&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies the given predicate to the items in the parallel iterator\nand returns <strong>any</strong> non-None result of the map operation. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_map_any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_map_first\" class=\"method trait-impl\"><a href=\"#method.find_map_first\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_map_first\" class=\"fn\">find_map_first</a>&lt;P, R&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies the given predicate to the items in the parallel iterator and\nreturns the sequentially <strong>first</strong> non-None result of the map operation. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_map_first\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_map_last\" class=\"method trait-impl\"><a href=\"#method.find_map_last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_map_last\" class=\"fn\">find_map_last</a>&lt;P, R&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Applies the given predicate to the items in the parallel iterator and\nreturns the sequentially <strong>last</strong> non-None result of the map operation. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.find_map_last\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.any\" class=\"method trait-impl\"><a href=\"#method.any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.any\" class=\"fn\">any</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Searches for <strong>some</strong> item in the parallel iterator that\nmatches the given predicate, and if so returns true.  Once\na match is found, we’ll attempt to stop process the rest\nof the items.  Proving that there’s no match, returning false,\ndoes require visiting every item. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all\" class=\"method trait-impl\"><a href=\"#method.all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.all\" class=\"fn\">all</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Tests that every item in the parallel iterator matches the given\npredicate, and if so returns true.  If a counter-example is found,\nwe’ll attempt to stop processing more items, then return false. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.while_some\" class=\"method trait-impl\"><a href=\"#method.while_some\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.while_some\" class=\"fn\">while_some</a>&lt;T&gt;(self) -&gt; WhileSome&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html\" title=\"trait maybe_rayon::concurrent::prelude::ParallelIterator\">ParallelIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator over the <code>Some</code> items of this iterator, halting\nas soon as any <code>None</code> is found. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.while_some\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.panic_fuse\" class=\"method trait-impl\"><a href=\"#method.panic_fuse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.panic_fuse\" class=\"fn\">panic_fuse</a>(self) -&gt; PanicFuse&lt;Self&gt;</h4></section></summary><div class='docblock'>Wraps an iterator with a fuse in case of panics, to halt all threads\nas soon as possible. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.panic_fuse\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect\" class=\"method trait-impl\"><a href=\"#method.collect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.collect\" class=\"fn\">collect</a>&lt;C&gt;(self) -&gt; C<div class=\"where\">where\n    C: FromParallelIterator&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a fresh collection containing all the elements produced\nby this parallel iterator. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.collect\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unzip\" class=\"method trait-impl\"><a href=\"#method.unzip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.unzip\" class=\"fn\">unzip</a>&lt;A, B, FromA, FromB&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(FromA, FromB)</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html\" title=\"trait maybe_rayon::concurrent::prelude::ParallelIterator\">ParallelIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B)</a>&gt;,\n    FromA: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ParallelExtend&lt;A&gt;,\n    FromB: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ParallelExtend&lt;B&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Unzips the items of a parallel iterator into a pair of arbitrary\n<code>ParallelExtend</code> containers. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.unzip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partition\" class=\"method trait-impl\"><a href=\"#method.partition\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.partition\" class=\"fn\">partition</a>&lt;A, B, P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ParallelExtend&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ParallelExtend&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Partitions the items of a parallel iterator into a pair of arbitrary\n<code>ParallelExtend</code> containers.  Items for which the <code>predicate</code> returns\ntrue go into the first container, and the rest go into the second. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.partition\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partition_map\" class=\"method trait-impl\"><a href=\"#method.partition_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.partition_map\" class=\"fn\">partition_map</a>&lt;A, B, P, L, R&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ParallelExtend&lt;L&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ParallelExtend&lt;R&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"https://docs.rs/either/1/either/enum.Either.html\" title=\"enum either::Either\">Either</a>&lt;L, R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Partitions and maps the items of a parallel iterator into a pair of\narbitrary <code>ParallelExtend</code> containers.  <code>Either::Left</code> items go into\nthe first container, and <code>Either::Right</code> items go into the second. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.partition_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_any\" class=\"method trait-impl\"><a href=\"#method.take_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.take_any\" class=\"fn\">take_any</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.usize.html\">usize</a>) -&gt; TakeAny&lt;Self&gt;</h4></section></summary><div class='docblock'>Creates an iterator that yields <code>n</code> elements from <em>anywhere</em> in the original iterator. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.take_any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_any\" class=\"method trait-impl\"><a href=\"#method.skip_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.skip_any\" class=\"fn\">skip_any</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.usize.html\">usize</a>) -&gt; SkipAny&lt;Self&gt;</h4></section></summary><div class='docblock'>Creates an iterator that skips <code>n</code> elements from <em>anywhere</em> in the original iterator. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.skip_any\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_any_while\" class=\"method trait-impl\"><a href=\"#method.take_any_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.take_any_while\" class=\"fn\">take_any_while</a>&lt;P&gt;(self, predicate: P) -&gt; TakeAnyWhile&lt;Self, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that takes elements from <em>anywhere</em> in the original iterator\nuntil the given <code>predicate</code> returns <code>false</code>. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.take_any_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_any_while\" class=\"method trait-impl\"><a href=\"#method.skip_any_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.skip_any_while\" class=\"fn\">skip_any_while</a>&lt;P&gt;(self, predicate: P) -&gt; SkipAnyWhile&lt;Self, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class='docblock'>Creates an iterator that skips elements from <em>anywhere</em> in the original iterator\nuntil the given <code>predicate</code> returns <code>false</code>. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.skip_any_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_vec_list\" class=\"method trait-impl\"><a href=\"#method.collect_vec_list\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.collect_vec_list\" class=\"fn\">collect_vec_list</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/collections/linked_list/struct.LinkedList.html\" title=\"struct alloc::collections::linked_list::LinkedList\">LinkedList</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#associatedtype.Item\" title=\"type maybe_rayon::concurrent::prelude::ParallelIterator::Item\">Item</a>&gt;&gt;</h4></section></summary><div class='docblock'>Collects this iterator into a linked list of vectors. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.collect_vec_list\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.opt_len\" class=\"method trait-impl\"><a href=\"#method.opt_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.opt_len\" class=\"fn\">opt_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Internal method used to define the behavior of this parallel\niterator. You should not need to call this directly. <a href=\"maybe_rayon/concurrent/prelude/trait.ParallelIterator.html#method.opt_len\">Read more</a></div></details></div></details>","ParallelIterator","maybe_rayon::concurrent::prelude::MaybeIterBridge"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()
var searchIndex = JSON.parse('{\
"algebra":{"doc":"","t":[0,0,17,17,17,5,5,5,5,3,12,12,12,12,12,11,11,11,11,11,11,11,3,12,12,12,12,11,11,0,8,10,3,12,3,12,12,12,12,12,4,13,13,11,11,5,5,5,3,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,8,10,10,10,10,11,11,11,11,11,11,10,11,8,10,11,10,10,10,0,8,10,10,0,3,12,11,0,8,10,3,12,12,12,11,3,12,12,6,6,3,12,12,12,17,11,11,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,3,12,12,12,11,3,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,0,3,12,12,12,12,11,3,12,12,11,8,10,10,10,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,0,8,10,4,13,13,4,13,13,3,12,12,12,3,12,12,12,11,11,11,3,12,0,5,5,5,5,5,5,5,5,0,4,13,13,13,13,4,13,13,13,13,4,13,13,13,5,5,5,5,5,4,13,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,12,0,3,12,12,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,3,3,12,0,0,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,3,12,0,3,12,12,3,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,0,3,12,12,12,12,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,12,12,12,12,5,5,3,12,12,12,11,11,11,11,0,8,10,0,8,10,11,11,0,8,16,10,10,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,0,3,12,12,11,0,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,8,16,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,12,12,12,12,12,12,12,12,12,11,11,11,0,3,12,12,12,12,12,12,11,5,0,3,12,12,12,12,12,12,12,11,11,11,11,0,3,12,12,12,12,11,11,11,11,11,0,3,12,12,12,11,11,11,11,11,11,11,11,11,0,3,12,12,12,12,11,11,11,0,3,12,12,12,11,11,11,11,0,3,12,12,12,3,12,12,12,3,12,12,11,11,11,11,11,0,0,3,12,12,12,12,12,12,12,11,11,11,11,11,0,4,13,13,13,3,12,12,12,0,3,12,12,8,10,10,10,0,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,12,12,12,11,0,3,12,12,12,12,12,11,0,3,12,12,12,11,3,12,12,12,11,0,3,12,12,12,3,12,12,12,11,11,11,11,3,12,12,12,12,12,12,12,3,12,12,12,3,12,12,8,10,10,10,3,12,12,12,12,12,12,12,12,3,12,12,12,3,12,12,12,12,12,3,12,12,12,3,12,12,12,3,12,12,12,3,12,12,12,8,16,16,18,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,8,10,8,10,3,12,12,12,12,12,4,13,13,13,3,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,3,12,12,12,12,3,12,12,12,12,8,10,8,10,11,11,8,16,10,10,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,3,12,12,12,12,12,12,12,12,8,16,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,3,12,12,12,12,12,12,12,3,12,12,12,12,3,12,12,12,3,12,12,12,12,3,12,12,12,3,12,12,8,0,17,5,5,5,5,3,12,12,12,12,12,3,12,12,12,12,0,8,10,3,12,12,12,12,12,4,13,13,3,12,12,12,12,12,12,12,12,12,12,12,0,3,12,0,8,10,3,12,12,12,3,12,12,6,6,3,12,12,12,3,12,12,12,12,12,12,12,12,3,12,12,12,3,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,8,10,8,10,10,10,10,11,11,11,11,11,11,10,11,8,10,11,10,10,10,8,10,10,3,12,3,12,12,12,12,12,12,12,12,8,10,8,10,10,10,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,3,12,12,4,13,13,4,13,13,8,10,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["algebra","combinatorics","MAX_XI_TAU","XI_DEGREES","TAU_DEGREES","adem_relation_coefficient","inadmissible_pairs","tau_degrees","xi_degrees","TruncatedPolynomialMonomialBasis","p","gens","gen_degrees","parts_by_max","parts","new","generators","generators_up_to_degree","gen_deg_idx_to_internal_idx","internal_idx_to_gen_deg","parts","add_gens_and_calculate_parts","PartitionIterator","remaining","parts","partition","initial","new","search","adem_algebra","AdemAlgebraT","adem_algebra","BOCKSTEIN_TABLE","__private_field","AdemBasisElement","degree","excess","bocksteins","ps","p_or_sq","PorBockstein","P","Bockstein","iter_filtered","iter_full","adem_basis_element_excess_sort_order","adem_basis_element_length_sort_order","shift_vec","AdemAlgebra","p","generic","unstable","unstable_enabled","lock","even_basis_table","basis_table","basis_element_to_index_map","multiplication_table","excess_table","sort_order","new","q","generate_basis_even","generate_basis_even_degreen","generate_basis2","generate_basis_generic","generate_basis_generic_degreen","generate_basis_element_to_index_map","basis_element_from_index","try_basis_element_to_index","basis_element_to_index","tail_of_basis_element_to_index","generate_multiplication_table_2","generate_multiplication_table_2_step","generate_multiplication_table_generic","generate_multiplication_table_generic_step","dimension_unstable","multiply_basis_elements_unstable","multiply","make_mono_admissible","make_mono_admissible_2","make_mono_admissible_generic","decompose_basis_element_2","decompose_basis_element_generic","beps_pn","generate_excess_table","algebra_trait","Algebra","prime","compute_basis","dimension","multiply_basis_elements","multiply_basis_element_by_element","multiply_element_by_basis_element","multiply_element_by_element","default_filtration_one_products","json_to_basis","json_from_basis","basis_element_to_string","element_to_string","GeneratedAlgebra","generators","generator_to_string","string_to_generator","decompose_basis_element","generating_relations","bialgebra_trait","Bialgebra","decompose","coproduct","field","Field","prime","new","milnor_algebra","MilnorAlgebraT","milnor_algebra","MilnorProfile","truncated","q_part","p_part","is_trivial","QPart","degree","q_part","PPartEntry","PPart","MilnorBasisElement","q_part","p_part","degree","ZERO_QPART","from_p","clone_into","MilnorAlgebra","profile","lock","p","generic","ppart_table","qpart_table","basis_table","basis_element_to_index_map","new","q","basis_element_from_index","try_basis_element_to_index","basis_element_to_index","compute_ppart","compute_qpart","generate_basis_generic","generate_basis_2","try_beps_pn","beps_pn","multiply_qpart","multiply","multiply_with_allocation","multiply_element_by_basis_with_allocation","Matrix2D","cols","inner","reset","with_capacity","PPartAllocation","m","diagonal","p_part","with_capacity","PPartMultiplier","p","M","r","rows","cols","diag_num","init","ans","diagonal","prime","new_from_allocation","into_allocation","next_val","update","next","decompose_basis_element_qpart","decompose_basis_element_ppart","increment_p_part","polynomial_algebra","PolynomialAlgebraMonomial","degree","poly","ext","valid","new","PolynomialAlgebraTableEntry","index_to_monomial","monomial_to_index","new","PolynomialAlgebra","prime","polynomial_monomials","exterior_monomials","min_degree","polynomial_generators_in_degree","exterior_generators_in_degree","repr_poly_generator","repr_ext_generator","basis_table","frobenius_on_generator","compute_generating_set","compute_basis_step","monomial_to_index","index_to_monomial","frobenius_monomial","multiply_monomials","multiply_polynomials","multiply_polynomial_by_monomial","multiply_monomial_by_polynomial","set_monomial_degree","max_computed_degree","steenrod_algebra","SteenrodAlgebraT","steenrod_algebra","SteenrodAlgebraBorrow","BorrowAdem","BorrowMilnor","SteenrodAlgebra","AdemAlgebra","MilnorAlgebra","MilnorProfileOption","truncated","q_part","p_part","AlgebraSpec","p","algebra","profile","prefix","from_json","to_json","InvalidAlgebraError","name","change_of_basis","adem_to_milnor_on_basis","adem_to_milnor","milnor_to_adem_on_basis","milnor_to_adem_on_basis_2","milnor_to_adem_on_basis_generic","milnor_to_adem","adem_q","adem_plist","steenrod_parser","AlgebraBasisElt","AList","PList","P","Q","AlgebraParseNode","Product","Sum","BasisElt","Scalar","ModuleParseNode","Act","Sum","ModuleBasisElt","digits","comma_separated_integer_list","comma_separated_sequence","space_separated_integer_list","space_separated_sequence","BocksteinOrSq","Bockstein","Sq","bockstein_b","sq_digits","space_separated_bockstein_or_sq_list","space_separated_bockstein_or_sq_sequence","algebra_generator","scalar","algebra_parens","algebra_factor","algebra_term","algebra_expr","module_generator","module_parens","module_factor","module_term","module_expr","parse_algebra","parse_module","ParseError","info","steenrod_evaluator","SteenrodCalculator","adem_algebra","milnor_algebra","new","compute_basis","evaluate_adem_to_string","evaluate_milnor_to_string","evaluate_adem","evaluate_milnor","evaluate_algebra_adem","evaluate_algebra_milnor","evaluate_algebra_tree","evaluate_algebra_tree_helper","evaluate_basis_element","evaluate_module","evaluate_module_tree","evaluate_module_tree_helper","evaluate_module_basis_element","bockstein_or_sq_to_adem_basis_elt","evaluate_p_or_b_list","DegreeError","UnknownBasisElementError","name","module","finite_dimensional_module","FiniteDimensionalModule","algebra","name","graded_dimension","gen_names","actions","test_equal","new","set_basis_element_name","module_gens_from_json","allocate_actions","add_generator","string_to_basis_element","set_action_vector","set_action","action","action_mut","from_json","to_json","parse_action","parse_element","take_element","check_validity","extend_actions","minimal_actions_to_json","to_minimal_json","actions_to_json","gens_to_json","finite_module","FiniteModule","FDModule","FPModule","RealProjectiveSpace","from_json","to_json","type_","is_real_projective_space","is_fp_module","is_fd_module","into_real_projective_space","into_fp_module","into_fd_module","as_real_projective_space","as_fp_module","as_fd_module","UnknownModuleTypeError","module_type","finitely_presented_module","FPMIndexTable","gen_idx_to_fp_idx","fp_idx_to_gen_idx","FinitelyPresentedModule","name","min_degree","generators","relations","map","index_table","new","add_generators","add_relations","module_gens_from_json","gen_idx_to_fp_idx","fp_idx_to_gen_idx","from_json","to_json","relations_to_json","free_module","OperationGeneratorPair","operation_degree","operation_index","generator_degree","generator_index","FreeModule","algebra","name","min_degree","gen_names","gen_deg_idx_to_internal_idx","num_gens","basis_element_to_opgen","generator_to_index","new","max_computed_degree","max_table_degree","number_of_gens_in_degree","extend_table_entries","extend_table_entry_step","add_generators","generator_offset","operation_generator_to_index","operation_generator_pair_to_idx","index_to_op_gen","element_to_json","add_generators_immediate","add_num_generators","extend_by_zero","get_degrees_with_gens","get_max_generator_degree","element_to_string_pretty","rpn","RealProjectiveSpace","algebra","min","clear_bottom","max","coef_adem","coef_milnor","RPSpec","min","clear_bottom","max","new","max_degree","from_json","to_json","zero_module","ZeroModule","zero_module","bounded_module","BoundedModule","max_degree","total_dimension","to_fd_module","module_trait","Module","Algebra","algebra","min_degree","compute_basis","max_computed_degree","dimension","act_on_basis","basis_element_to_string","is_unit","prime","borrow_output","act_on_basis_borrow","act","act_by_element","act_by_element_on_basis","basis_string_list","element_to_string","truncate_to_fd_module","check_relation","check_relations","test_relations","ModuleFailedRelationError","relation","value","truncated_module","TruncatedModule","module","truncation","new","free_unstable_module","FreeUnstableModule","algebra","name","min_degree","gen_names","gen_deg_idx_to_internal_idx","num_gens","basis_element_to_opgen","generator_to_index","new","adem_algebra","max_computed_degree","max_table_degree","number_of_gens_in_degree","extend_table_entries","extend_table_entry_step","add_generators","generator_offset","operation_generator_to_index","operation_generator_pair_to_idx","index_to_op_gen","element_to_json","add_generators_immediate","add_num_generators","extend_by_zero","get_degrees_with_gens","get_max_generator_degree","polynomial_algebra_module","PolynomialAlgebraModule","Algebra","algebra","sq_polynomial_generator_to_monomial","sq_exterior_generator_to_monomial","bockstein_polynomial_generator_to_monomial","bockstein_exterior_generator_to_monomial","action_table","bockstein_table","bottom_truncation","top_truncation","sq_polynomial_generator_to_polynomial","sq_exterior_generator_to_polynomial","bockstein_polynomial_generator_to_polynomial","bockstein_exterior_generator_to_polynomial","sq_on_basis","sq_monomial_to_polynomial","sq_polynomial_to_polynomial","bockstein_on_basis","bockstein_monomial_to_polynomial","bockstein_polynomial_to_polynomial","compute_action_table","compute_action_table_ext_case","compute_action_table_poly_case","compute_bockstein_table","kfpn","KFpn","algebra","n","polynomial_monomials_field","exterior_monomials_field","basis_table_field","action_table_field","bockstein_table_field","frobenius_table","inverse_frobenius_table","new","adem_algebra","action_on_generator_helper","bcp","BCp","algebra","polynomial_monomials_field","exterior_monomials_field","basis_table_field","action_table_field","bockstein_table_field","new","is_two_times_power_of_p","dickson2","Dickson2","algebra","n","polynomial_monomials_field","exterior_monomials_field","basis_table_field","action_table_field","quadratic_terms_field","new","adem_algebra","quadratic_terms","klfrob","hom_module","HomModule","algebra","source","target","block_structures","new","source","target","element_to_homomorphism","evaluate_basis_map_on_element","quotient_module","QuotientModule","module","subspaces","basis_list","new","quotient","quotient_basis_elements","quotient_vectors","flush","quotient_all","act_on_original_basis","reduce","old_basis_to_new","sum_module","SumModule","algebra","min_degree","modules","block_structures","new","get_module_num","offset","tensor_module","TensorModule","left","right","block_structures","new","seek_module_num","offset","act_helper","block_structure","GeneratorBasisEltPair","generator_degree","generator_index","basis_index","BlockStructure","total_dimension","basis_element_to_block_idx","block_starts","BlockStart","block_start_index","block_size","new","generator_to_block","generator_basis_elt_to_index","index_to_generator_basis_elt","add_block","homomorphism","bounded_module_homomorphism","BoundedModuleHomomorphism","lock","source","target","degree_shift","matrices","quasi_inverses","kernels","new","from_matrices","from","replace_source","replace_target","finite_module_homomorphism","FMHI","FD","FP","RP","FiniteModuleHomomorphism","source","target","map","fp_module_homomorphism","FPModuleHomomorphism","source","underlying_map","FPModuleT","gen_idx_to_fp_idx","fp_idx_to_gen_idx","generators","free_module_homomorphism","FreeModuleHomomorphism","source","target","outputs","kernel","quasi_inverse","min_degree","lock","degree_shift","new","degree_shift","min_degree","next_degree","output","extend_by_zero_safe","extend_by_zero","add_generators_from_big_vector","add_generators_from_matrix_rows","add_generators_from_rows","apply_to_generator","get_matrix","lock","set_kernel","set_quasi_inverse","check_mutex","hom_k","generic_zero_homomorphism","GenericZeroHomomorphism","source","target","degree_shift","new","hom_pullback","HomPullback","source","target","map","kernel","quasi_inverse","new","quotient_homomorphism","QuotientHomomorphism","f","s","t","new","QuotientHomomorphismSource","f","s","t","new","truncated_homomorphism","TruncatedHomomorphism","f","s","t","TruncatedHomomorphismSource","f","s","t","new","truncated_degree","new","truncated_degree","BoundedModuleHomomorphism","lock","source","target","degree_shift","matrices","quasi_inverses","kernels","FiniteModuleHomomorphism","source","target","map","FPModuleHomomorphism","source","underlying_map","FPModuleT","gen_idx_to_fp_idx","fp_idx_to_gen_idx","generators","FreeModuleHomomorphism","source","target","outputs","kernel","quasi_inverse","min_degree","lock","degree_shift","GenericZeroHomomorphism","source","target","degree_shift","HomPullback","source","target","map","kernel","quasi_inverse","QuotientHomomorphism","f","s","t","QuotientHomomorphismSource","f","s","t","TruncatedHomomorphism","f","s","t","TruncatedHomomorphismSource","f","s","t","ModuleHomomorphism","Source","Target","CUSTOM_QI","source","target","degree_shift","apply_to_basis_element","kernel","quasi_inverse","compute_kernels_and_quasi_inverses_through_degree","apply","prime","min_degree","image","calculate_quasi_inverse","kernel_and_quasi_inverse","get_matrix","apply_quasi_inverse","ZeroHomomorphism","zero_homomorphism","IdentityHomomorphism","identity_homomorphism","FDModule","algebra","name","graded_dimension","gen_names","actions","FiniteModule","FDModule","FPModule","RealProjectiveSpace","FPModule","name","min_degree","generators","relations","map","index_table","FreeModule","algebra","name","min_degree","gen_names","gen_deg_idx_to_internal_idx","num_gens","basis_element_to_opgen","generator_to_index","OperationGeneratorPair","operation_degree","operation_index","generator_degree","generator_index","RealProjectiveSpace","algebra","min","clear_bottom","max","ZeroModule","zero_module","BoundedModule","max_degree","total_dimension","to_fd_module","Module","Algebra","algebra","min_degree","compute_basis","max_computed_degree","dimension","act_on_basis","basis_element_to_string","is_unit","prime","borrow_output","act_on_basis_borrow","act","act_by_element","act_by_element_on_basis","basis_string_list","element_to_string","truncate_to_fd_module","check_relation","check_relations","test_relations","ModuleFailedRelationError","relation","value","FreeUnstableModule","algebra","name","min_degree","gen_names","gen_deg_idx_to_internal_idx","num_gens","basis_element_to_opgen","generator_to_index","PolynomialAlgebraModule","Algebra","algebra","sq_polynomial_generator_to_monomial","sq_exterior_generator_to_monomial","bockstein_polynomial_generator_to_monomial","bockstein_exterior_generator_to_monomial","action_table","bockstein_table","bottom_truncation","top_truncation","sq_polynomial_generator_to_polynomial","sq_exterior_generator_to_polynomial","bockstein_polynomial_generator_to_polynomial","bockstein_exterior_generator_to_polynomial","sq_on_basis","sq_monomial_to_polynomial","sq_polynomial_to_polynomial","bockstein_on_basis","bockstein_monomial_to_polynomial","bockstein_polynomial_to_polynomial","compute_action_table","compute_action_table_ext_case","compute_action_table_poly_case","compute_bockstein_table","KFpn","algebra","n","polynomial_monomials_field","exterior_monomials_field","basis_table_field","action_table_field","bockstein_table_field","frobenius_table","inverse_frobenius_table","BCp","algebra","polynomial_monomials_field","exterior_monomials_field","basis_table_field","action_table_field","bockstein_table_field","Dickson2","algebra","n","polynomial_monomials_field","exterior_monomials_field","basis_table_field","action_table_field","quadratic_terms_field","HomModule","algebra","source","target","block_structures","QuotientModule","module","subspaces","basis_list","SumModule","algebra","min_degree","modules","block_structures","TensorModule","left","right","block_structures","TruncatedModule","module","truncation","SteenrodModule","combinatorics","MAX_XI_TAU","adem_relation_coefficient","inadmissible_pairs","tau_degrees","xi_degrees","TruncatedPolynomialMonomialBasis","p","gens","gen_degrees","parts_by_max","parts","PartitionIterator","remaining","parts","partition","initial","adem_algebra","AdemAlgebraT","adem_algebra","AdemBasisElement","degree","excess","bocksteins","ps","p_or_sq","PorBockstein","P","Bockstein","AdemAlgebra","p","generic","unstable","unstable_enabled","lock","even_basis_table","basis_table","basis_element_to_index_map","multiplication_table","excess_table","sort_order","field","Field","prime","milnor_algebra","MilnorAlgebraT","milnor_algebra","MilnorProfile","truncated","q_part","p_part","QPart","degree","q_part","PPartEntry","PPart","MilnorBasisElement","q_part","p_part","degree","MilnorAlgebra","profile","lock","p","generic","ppart_table","qpart_table","basis_table","basis_element_to_index_map","PPartAllocation","m","diagonal","p_part","PPartMultiplier","p","M","r","rows","cols","diag_num","init","ans","diagonal","AdemAlgebra","p","generic","unstable","unstable_enabled","lock","even_basis_table","basis_table","basis_element_to_index_map","multiplication_table","excess_table","sort_order","AdemAlgebraT","adem_algebra","Algebra","prime","compute_basis","dimension","multiply_basis_elements","multiply_basis_element_by_element","multiply_element_by_basis_element","multiply_element_by_element","default_filtration_one_products","json_to_basis","json_from_basis","basis_element_to_string","element_to_string","GeneratedAlgebra","generators","generator_to_string","string_to_generator","decompose_basis_element","generating_relations","Bialgebra","decompose","coproduct","Field","prime","MilnorAlgebra","profile","lock","p","generic","ppart_table","qpart_table","basis_table","basis_element_to_index_map","MilnorAlgebraT","milnor_algebra","PolynomialAlgebra","prime","polynomial_monomials","exterior_monomials","min_degree","polynomial_generators_in_degree","exterior_generators_in_degree","repr_poly_generator","repr_ext_generator","basis_table","frobenius_on_generator","compute_generating_set","compute_basis_step","monomial_to_index","index_to_monomial","frobenius_monomial","multiply_monomials","multiply_polynomials","multiply_polynomial_by_monomial","multiply_monomial_by_polynomial","set_monomial_degree","max_computed_degree","PolynomialAlgebraMonomial","degree","poly","ext","valid","PolynomialAlgebraTableEntry","index_to_monomial","monomial_to_index","SteenrodAlgebra","AdemAlgebra","MilnorAlgebra","SteenrodAlgebraBorrow","BorrowAdem","BorrowMilnor","SteenrodAlgebraT","steenrod_algebra","dispatch_algebra","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","adem_algebra","decompose","coproduct","coproduct","decompose","coproduct","decompose","decompose","coproduct","prime","polynomial_monomials","exterior_monomials","basis_table","polynomial_generators_in_degree","exterior_generators_in_degree","repr_poly_generator","repr_ext_generator","frobenius_on_generator","compute_generating_set","prime","polynomial_monomials","exterior_monomials","polynomial_generators_in_degree","exterior_generators_in_degree","repr_poly_generator","repr_ext_generator","frobenius_on_generator","compute_generating_set","basis_table","prime","polynomial_monomials","exterior_monomials","basis_table","polynomial_generators_in_degree","exterior_generators_in_degree","repr_poly_generator","repr_ext_generator","frobenius_on_generator","compute_generating_set","steenrod_algebra","zero_module","zero_module","zero_module","zero_module","zero_module","zero_module","max_degree","max_degree","max_degree","max_degree","max_degree","max_degree","algebra","min_degree","max_computed_degree","compute_basis","dimension","basis_element_to_string","is_unit","act_on_basis","borrow_output","act_on_basis_borrow","algebra","min_degree","compute_basis","max_computed_degree","dimension","act_on_basis","act","act_by_element","basis_element_to_string","is_unit","prime","borrow_output","act_on_basis_borrow","algebra","min_degree","max_computed_degree","compute_basis","dimension","act_on_basis","basis_element_to_string","algebra","min_degree","max_computed_degree","dimension","basis_element_to_string","act_on_basis","algebra","min_degree","max_computed_degree","dimension","basis_element_to_string","act_on_basis","algebra","min_degree","max_computed_degree","compute_basis","dimension","act_on_basis","basis_element_to_string","algebra","min_degree","max_computed_degree","dimension","basis_element_to_string","act_on_basis","algebra","min_degree","max_computed_degree","compute_basis","dimension","act_on_basis","basis_element_to_string","algebra","min_degree","compute_basis","max_computed_degree","dimension","act_on_basis","basis_element_to_string","algebra","min_degree","compute_basis","max_computed_degree","dimension","act_on_basis","basis_element_to_string","algebra","min_degree","max_computed_degree","compute_basis","dimension","act_on_basis","act","basis_element_to_string","algebra","action_table","bockstein_table","sq_polynomial_generator_to_monomial","sq_exterior_generator_to_monomial","bockstein_polynomial_generator_to_monomial","bockstein_exterior_generator_to_monomial","sq_polynomial_generator_to_polynomial","sq_exterior_generator_to_polynomial","bockstein_polynomial_generator_to_polynomial","bockstein_exterior_generator_to_polynomial","algebra","action_table","bockstein_table","sq_polynomial_generator_to_monomial","sq_exterior_generator_to_monomial","bockstein_polynomial_generator_to_monomial","bockstein_exterior_generator_to_monomial","algebra","action_table","bockstein_table","sq_polynomial_generator_to_monomial","sq_exterior_generator_to_monomial","bockstein_polynomial_generator_to_monomial","bockstein_exterior_generator_to_monomial","fp_idx_to_gen_idx","gen_idx_to_fp_idx","generators","fp_idx_to_gen_idx","gen_idx_to_fp_idx","generators","source","target","degree_shift","apply_to_basis_element","quasi_inverse","kernel","compute_kernels_and_quasi_inverses_through_degree","source","target","degree_shift","apply_to_basis_element","quasi_inverse","kernel","compute_kernels_and_quasi_inverses_through_degree","source","target","degree_shift","apply_to_basis_element","quasi_inverse","kernel","compute_kernels_and_quasi_inverses_through_degree","source","target","degree_shift","apply_to_basis_element","quasi_inverse","kernel","get_matrix","compute_kernels_and_quasi_inverses_through_degree","source","target","degree_shift","apply_to_basis_element","quasi_inverse","kernel","compute_kernels_and_quasi_inverses_through_degree","source","target","degree_shift","min_degree","apply_to_basis_element","compute_kernels_and_quasi_inverses_through_degree","quasi_inverse","kernel","source","target","degree_shift","apply_to_basis_element","kernel","quasi_inverse","compute_kernels_and_quasi_inverses_through_degree","source","target","degree_shift","apply_to_basis_element","kernel","quasi_inverse","compute_kernels_and_quasi_inverses_through_degree","source","target","degree_shift","apply_to_basis_element","kernel","quasi_inverse","compute_kernels_and_quasi_inverses_through_degree","source","target","degree_shift","apply_to_basis_element","kernel","quasi_inverse","compute_kernels_and_quasi_inverses_through_degree","zero_homomorphism","zero_homomorphism","zero_homomorphism","zero_homomorphism","identity_homomorphism","identity_homomorphism","identity_homomorphism","prime","default_filtration_one_products","compute_basis","dimension","multiply_basis_elements","json_to_basis","basis_element_to_string","json_from_basis","prime","compute_basis","dimension","multiply_basis_elements","default_filtration_one_products","json_to_basis","json_from_basis","basis_element_to_string","element_to_string","prime","default_filtration_one_products","compute_basis","dimension","multiply_basis_elements","json_to_basis","json_from_basis","basis_element_to_string","prime","compute_basis","dimension","multiply_basis_elements","multiply_basis_element_by_element","multiply_element_by_basis_element","multiply_element_by_element","default_filtration_one_products","json_to_basis","json_from_basis","basis_element_to_string","element_to_string","string_to_generator","generator_to_string","generators","decompose_basis_element","generating_relations","string_to_generator","generator_to_string","generators","decompose_basis_element","generating_relations","generators","generator_to_string","string_to_generator","decompose_basis_element","generating_relations","from","from","from","from","from","from","from","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","eq","eq","eq","ne","eq","eq","ne","eq","eq","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","index_mut","hash","hash","hash","try_into","try_into","description","description","description","load","load","load","save","save","save","deserialize","deserialize","deserialize","initialize"],"q":["algebra","algebra::algebra","algebra::algebra::combinatorics","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra","algebra::algebra::adem_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra","algebra::algebra::algebra_trait","","","","","","","","","","","","","","","","","","","algebra::algebra","algebra::algebra::bialgebra_trait","","","algebra::algebra","algebra::algebra::field","","","algebra::algebra","algebra::algebra::milnor_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra","algebra::algebra::polynomial_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra","algebra::algebra::steenrod_algebra","","","","","","","","","","","","","","","","","","","","","algebra","algebra::change_of_basis","","","","","","","","algebra","algebra::steenrod_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra","algebra::steenrod_evaluator","","","","","","","","","","","","","","","","","","","","","","","algebra","algebra::module","algebra::module::finite_dimensional_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module","algebra::module::finite_module","","","","","","","","","","","","","","","","","","algebra::module","algebra::module::finitely_presented_module","","","","","","","","","","","","","","","","","","","algebra::module","algebra::module::free_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module","algebra::module::rpn","","","","","","","","","","","","","","","algebra::module","algebra::module::zero_module","","algebra::module","algebra::module::bounded_module","","","","algebra::module","algebra::module::module_trait","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module","algebra::module::truncated_module","","","","algebra::module","algebra::module::free_unstable_module","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module","algebra::module::polynomial_algebra_module","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module","algebra::module::kfpn","","","","","","","","","","","","","algebra::module","algebra::module::bcp","","","","","","","","","algebra::module","algebra::module::dickson2","","","","","","","","","","","","algebra::module","algebra::module::hom_module","","","","","","","","","","algebra::module","algebra::module::quotient_module","","","","","","","","","","","","","algebra::module","algebra::module::sum_module","","","","","","","","algebra::module","algebra::module::tensor_module","","","","","","","","algebra::module","algebra::module::block_structure","","","","","","","","","","","","","","","","algebra::module","algebra::module::homomorphism","algebra::module::homomorphism::bounded_module_homomorphism","","","","","","","","","","","","","algebra::module::homomorphism","algebra::module::homomorphism::finite_module_homomorphism","","","","","","","","algebra::module::homomorphism","algebra::module::homomorphism::fp_module_homomorphism","","","","","","","algebra::module::homomorphism","algebra::module::homomorphism::free_module_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism","algebra::module::homomorphism::generic_zero_homomorphism","","","","","algebra::module::homomorphism","algebra::module::homomorphism::hom_pullback","","","","","","","algebra::module::homomorphism","algebra::module::homomorphism::quotient_homomorphism","","","","","","","","","","algebra::module::homomorphism","algebra::module::homomorphism::truncated_homomorphism","","","","","","","","","","","","algebra::module::homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::bounded_module","","algebra::module","","","","algebra::module::module_trait","algebra::module","","","","algebra::module::module_trait","","","","","","","","","","","","","algebra::module","","","","","","","","","","","","","","","","","","","","","algebra::module::polynomial_algebra_module","","","","","","","","","","","","","","","","algebra::module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra","algebra::combinatorics","","","","","","","","","","","","","","","","algebra","algebra::adem_algebra","","","","","","","","","","","","","","","","","","","","","","","algebra","algebra::field","","algebra","algebra::milnor_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra","","","","","","","","","","","","","","","","","","","algebra::algebra::algebra_trait","","","","","","algebra","algebra::algebra::algebra_trait","algebra","","algebra::algebra::algebra_trait","algebra","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::polynomial_algebra","algebra","","","","","","","algebra::algebra::polynomial_algebra","","","","","","","","","","algebra","","","","","","","","","","","","","","","","","algebra::algebra::combinatorics","","","","","","","","","","","","","","","algebra::algebra::adem_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::field","","","","","","","","algebra::algebra::milnor_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::polynomial_algebra","","","","","","","","","","","","","","","","","algebra::algebra::steenrod_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::steenrod_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::steenrod_evaluator","","","","","","","","","","","","","","","","","","","","","","","algebra::module::finite_dimensional_module","","","","","","","","","","algebra::module::finite_module","","","","","","","","","","","","","","","","algebra::module::finitely_presented_module","","","","","","","","","","","","","","","algebra::module::free_module","","","","","","","","","","","","","","","","","algebra::module::rpn","","","","","","","","","","","","","","","algebra::module::module_trait","","","","","","","","algebra::module::truncated_module","","","","","","","","algebra::module::free_unstable_module","","","","","","","","algebra::module::kfpn","","","","","","","","algebra::module::bcp","","","","","","","","algebra::module::dickson2","","","","","","","","algebra::module::hom_module","","","","","","","","algebra::module::quotient_module","","","","","","","","algebra::module::sum_module","","","","","","","","algebra::module::tensor_module","","","","","","","","algebra::module::block_structure","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::bounded_module_homomorphism","","","","","","","","","algebra::module::homomorphism::finite_module_homomorphism","","","","","","","","","","","","","","algebra::module::homomorphism::fp_module_homomorphism","","","","","","","algebra::module::homomorphism::free_module_homomorphism","","","","","","","algebra::module::homomorphism::generic_zero_homomorphism","","","","","","","algebra::module::homomorphism::hom_pullback","","","","","","","algebra::module::homomorphism::quotient_homomorphism","","","","","","","","","","","","","","algebra::module::homomorphism::truncated_homomorphism","","","","","","","","","","","","","","algebra::algebra::adem_algebra","","","algebra::algebra::field","","algebra::algebra::milnor_algebra","","algebra::algebra::steenrod_algebra","","algebra::module::kfpn","","","","","","","","","","algebra::module::bcp","","","","","","","","","","algebra::module::dickson2","","","","","","","","","","algebra::algebra::steenrod_algebra","algebra::module::finite_dimensional_module","algebra::module::finitely_presented_module","algebra::module::rpn","algebra::module::finite_module","algebra::module::sum_module","algebra::module::tensor_module","algebra::module::finite_dimensional_module","algebra::module::truncated_module","algebra::module::quotient_module","algebra::module::sum_module","algebra::module::tensor_module","algebra::module::finite_module","algebra::module::finite_dimensional_module","","","","","","","","","","algebra::module::finite_module","","","","","","","","","","","","","algebra::module::finitely_presented_module","","","","","","","algebra::module::free_module","","","","","","algebra::module::rpn","","","","","","algebra::module::truncated_module","","","","","","","algebra::module::free_unstable_module","","","","","","algebra::module::hom_module","","","","","","","algebra::module::quotient_module","","","","","","","algebra::module::sum_module","","","","","","","algebra::module::tensor_module","","","","","","","","algebra::module::kfpn","","","","","","","","","","","algebra::module::bcp","","","","","","","algebra::module::dickson2","","","","","","","algebra::module::finite_module","","","algebra::module::finitely_presented_module","","","algebra::module::homomorphism::bounded_module_homomorphism","","","","","","","algebra::module::homomorphism::finite_module_homomorphism","","","","","","","algebra::module::homomorphism::fp_module_homomorphism","","","","","","","algebra::module::homomorphism::free_module_homomorphism","","","","","","","","algebra::module::homomorphism::generic_zero_homomorphism","","","","","","","algebra::module::homomorphism::hom_pullback","","","","","","","","algebra::module::homomorphism::quotient_homomorphism","","","","","","","","","","","","","","algebra::module::homomorphism::truncated_homomorphism","","","","","","","","","","","","","","algebra::module::homomorphism::bounded_module_homomorphism","algebra::module::homomorphism::finite_module_homomorphism","algebra::module::homomorphism::fp_module_homomorphism","algebra::module::homomorphism::generic_zero_homomorphism","algebra::module::homomorphism::bounded_module_homomorphism","algebra::module::homomorphism::finite_module_homomorphism","algebra::module::homomorphism::fp_module_homomorphism","algebra::algebra::adem_algebra","","","","","","","","algebra::algebra::field","","","","","","","","","algebra::algebra::milnor_algebra","","","","","","","","algebra::algebra::steenrod_algebra","","","","","","","","","","","","algebra::algebra::adem_algebra","","","","","algebra::algebra::milnor_algebra","","","","","algebra::algebra::steenrod_algebra","","","","","","","algebra::module::finite_module","","","algebra::module::homomorphism::finite_module_homomorphism","","algebra::algebra::combinatorics","algebra::algebra::adem_algebra","algebra::algebra::milnor_algebra","","algebra::algebra::polynomial_algebra","algebra::steenrod_parser","","","","algebra::module::finite_dimensional_module","algebra::module::free_module","algebra::module::homomorphism::bounded_module_homomorphism","algebra::algebra::milnor_algebra","","","","algebra::algebra::polynomial_algebra","algebra::algebra::adem_algebra","algebra::algebra::milnor_algebra","algebra::algebra::polynomial_algebra","","algebra::module::finite_dimensional_module","algebra::module::finite_module","","algebra::module::finitely_presented_module","algebra::module::rpn","algebra::algebra::adem_algebra","","","algebra::algebra::milnor_algebra","","algebra::algebra::polynomial_algebra","algebra::algebra::steenrod_algebra","","","algebra::steenrod_parser","","","","","algebra::steenrod_evaluator","","algebra::module::finite_module","algebra::module::free_module","algebra::module::rpn","algebra::module::module_trait","algebra::module::block_structure","","","algebra::algebra::adem_algebra","","algebra::algebra::field","algebra::algebra::milnor_algebra","","","algebra::algebra::polynomial_algebra","algebra::algebra::steenrod_algebra","","algebra::steenrod_parser","algebra::steenrod_evaluator","","algebra::module::finite_dimensional_module","algebra::module::finite_module","","algebra::module::finitely_presented_module","algebra::module::free_module","algebra::module::rpn","algebra::module::module_trait","algebra::module::truncated_module","algebra::module::free_unstable_module","algebra::module::kfpn","algebra::module::bcp","algebra::module::dickson2","algebra::module::hom_module","algebra::module::quotient_module","algebra::module::sum_module","algebra::module::tensor_module","algebra::algebra::milnor_algebra","","algebra::algebra::adem_algebra","algebra::algebra::milnor_algebra","algebra::algebra::polynomial_algebra","algebra::algebra::steenrod_algebra","","","algebra::steenrod_parser","algebra::module::module_trait","algebra::module::free_module","algebra::module::free_unstable_module","algebra::module::homomorphism::free_module_homomorphism","algebra::module::free_module","algebra::module::free_unstable_module","algebra::module::homomorphism::free_module_homomorphism","algebra::algebra::steenrod_algebra","","algebra::module::rpn","algebra::algebra::adem_algebra"],"d":["","","","If p is the nth prime, then <code>XI_DEGREES[n][i - 1]</code> is the …","If p is the nth prime, then <code>TAU_DEGREES[n][i]</code> is the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The format of the AdemBasisElement is as follows. To …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function expresses $Sq^x$ (current) in terms of the …","","","","","Reduce a Steenrod monomial at the prime 2.","","","","","","","A graded algebra over F_p, finite dimensional in each …","Returns the prime the algebra is over.","Computes the list of basis elements up to and including …","Gets the dimension of the algebra in degree <code>degree</code>.","Computes the product <code>r * s</code> of the two basis elements, and <em>…","result and s are not required to be aligned.","result and r are not required to be aligned.","result, r and s are not required to be aligned.","A filtration one element in Ext(k, k) is the same as an …","Converts a JSON object into a basis element. The way …","","Converts a basis element into a string for display.","Converts an element into a string for display.","An algebra with a specified list of generators and …","Given a degree <code>degree</code>, the function returns a list of …","This returns the name of a generator. Note that the index …","This parses a string and returns the generator described …","Given a non-generator basis element of the algebra, …","Get any relations that the algebra wants checked to …","","","This function decomposes an element of the algebra as a …","Expresses Delta(x) as sum_j (A_{ij} (x) B_{ij}). Here x …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The parts of a PPartMultiplier that involve heap …","","","","This creates a PPartAllocation with enough capacity to …","","","","","","","","","","","","","","This compute the first l > k such that (sum + l) choose l …","We have a matrix of the form | s₁  s₂  s₃ …","This cannot be an actual iterator because we want to …","","","Returns <code>true</code> if the new element is not within the bounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function will panic if you call it with input such …","This function will panic if you call it with input such …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","We have a linear enumeration of all generators among all …","","","","","degree -> internal index of first generator in degree","","","degree -> internal_gen_idx -> the offset of the generator …","","","","","","","","Given a generator <code>(gen_deg, gen_idx)</code>, find the first …","","","","","","","","","","A version of element_to_string that names the generator …","","This is $\\\\mathbb{RP}_{\\\\mathrm{min}}^{\\\\mathrm{max}}$. The …","","","","","","","","","","","","","","","","","","","","<code>max_degree</code> is the a degree such that if t > <code>max_degree</code>, …","","","","","","","","","","","","","Whether this is the unit module.","","Whether act_on_basis_borrow is available.","Returns a borrow of the value of the corresponding action …","","","","","","This truncates the module to <code>max_dim</code> and represents it as …","op1(op2(x)) - (op1*op2)(x)","Input: degree through which to check. Output: Vec of …","","","","","","A module M where we quotient out everything above degree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a module <code>module</code>, this is the quotient of <code>module</code> by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function replaces the source of the …","See <code>replace_source</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","degree shift, such that ouptut_degree = input_degree - …","","","","","","","","","A MatrixSlice will do but there is no applicaiton of this …","","","","","","","","Given f: M -> N, compute the dual f*: Hom(N, k) -> Hom(M, …","","","","","","","","Given a map <code>map</code>: A -> B and <code>source</code> = Hom(B, X), <code>target</code> = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","degree shift, such that ouptut_degree = input_degree - …","","","","","Given a map <code>map</code>: A -> B and <code>source</code> = Hom(B, X), <code>target</code> = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calling this function when …","","","","","","","Returns the image of the module homomorphism in degree …","A version of kernel_and_quasi_inverse that, in fact, doesn…","","The (sliced) dimensions of <code>matrix</code> must be equal to …","","","","","","","","","","","","","","","","","","","","","","","We have a linear enumeration of all generators among all …","","","","","degree -> internal index of first generator in degree","","","degree -> internal_gen_idx -> the offset of the generator …","","","","","","This is $\\\\mathbb{RP}_{\\\\mathrm{min}}^{\\\\mathrm{max}}$. The …","","","","","","","","<code>max_degree</code> is the a degree such that if t > <code>max_degree</code>, …","","","","","","","","","","","","Whether this is the unit module.","","Whether act_on_basis_borrow is available.","Returns a borrow of the value of the corresponding action …","","","","","","This truncates the module to <code>max_dim</code> and represents it as …","op1(op2(x)) - (op1*op2)(x)","Input: degree through which to check. Output: Vec of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a module <code>module</code>, this is the quotient of <code>module</code> by …","","","","","","","","","","","","","A module M where we quotient out everything above degree …","","","","","","","","","","","","","","","","","","","","","","","","The format of the AdemBasisElement is as follows. To …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The parts of a PPartMultiplier that involve heap …","","","","","","","","","","","","","","","","","","","","","","","","","","","","A graded algebra over F_p, finite dimensional in each …","Returns the prime the algebra is over.","Computes the list of basis elements up to and including …","Gets the dimension of the algebra in degree <code>degree</code>.","Computes the product <code>r * s</code> of the two basis elements, and <em>…","result and s are not required to be aligned.","result and r are not required to be aligned.","result, r and s are not required to be aligned.","A filtration one element in Ext(k, k) is the same as an …","Converts a JSON object into a basis element. The way …","","Converts a basis element into a string for display.","Converts an element into a string for display.","An algebra with a specified list of generators and …","Given a degree <code>degree</code>, the function returns a list of …","This returns the name of a generator. Note that the index …","This parses a string and returns the generator described …","Given a non-generator basis element of the algebra, …","Get any relations that the algebra wants checked to …","","This function decomposes an element of the algebra as a …","Expresses Delta(x) as sum_j (A_{ij} (x) B_{ij}). Here x …hether act_on_basis_borrow is availableeturns the prime the algebra is over.","","Gets the dimension of the algebra in degree <code>degree</code>.","","","Converts a JSON object into a basis element. The way …","","Converts a basis element into a string for display.","","","","","","","","","","Returns the prime the algebra is over.","Computes the list of basis elements up to and including …","Gets the dimension of the algebra in degree <code>degree</code>.","Computes the product <code>r * s</code> of the two basis elements, and <em>…","result and s are not required to be aligned.","result and r are not required to be aligned.","result, r and s are not required to be aligned.","A filtration one element in Ext(k, k) is the same as an …","Converts a JSON object into a basis element. The way …","","Converts a basis element into a string for display.","Converts an element into a string for display.","","","","","We return Adem relations $b^2 = 0$, $P^i P^j = \\\\cdots$ …","","","","","","Given a degree <code>degree</code>, the function returns a list of …","This returns the name of a generator. Note that the index …","This parses a string and returns the generator described …","Given a non-generator basis element of the algebra, …","Get any relations that the algebra wants checked to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,0,0,3,0,4,0,5,5,5,5,5,0,6,6,5,5,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,0,0,10,10,0,0,11,11,0,0,12,0,13,13,13,13,0,14,14,0,0,0,15,15,15,0,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,0,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,16,16,16,0,0,20,20,20,20,20,0,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,23,0,24,24,0,25,25,0,26,26,26,0,27,27,27,25,25,25,0,28,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,0,30,30,30,30,0,31,31,31,0,0,0,0,0,0,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,34,34,34,34,34,34,34,34,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,0,0,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,43,43,43,43,0,0,0,44,44,44,43,43,43,43,0,0,45,0,0,46,46,46,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,48,48,0,0,49,49,49,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,52,52,52,52,52,52,52,52,52,52,52,52,0,0,53,53,53,53,53,53,53,0,0,0,54,54,54,54,54,54,54,54,54,54,54,0,0,55,55,55,55,55,55,55,55,55,0,0,56,56,56,56,56,56,56,56,56,56,56,56,0,0,57,57,57,57,57,57,57,0,0,58,58,58,58,58,58,58,0,0,59,59,59,0,60,60,60,0,61,61,60,60,60,60,60,0,0,0,62,62,62,62,62,62,62,62,62,62,62,62,0,0,63,63,63,0,64,64,64,0,0,65,65,0,66,66,66,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,68,68,68,68,0,0,69,69,69,69,69,69,0,0,70,70,70,70,0,71,71,71,71,0,0,72,72,72,0,73,73,73,72,72,73,73,0,62,62,62,62,62,62,62,0,64,64,64,0,65,65,0,66,66,66,0,67,67,67,67,67,67,67,67,0,68,68,68,0,69,69,69,69,69,0,70,70,70,0,71,71,71,0,72,72,72,0,73,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,75,0,76,0,36,36,36,36,36,0,37,37,37,0,40,40,40,40,40,40,0,42,42,42,42,42,42,42,42,0,41,41,41,41,0,43,43,43,43,0,45,0,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,48,48,0,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,52,52,52,52,52,52,52,52,52,0,53,53,53,53,53,53,0,54,54,54,54,54,54,54,0,55,55,55,55,0,56,56,56,0,57,57,57,57,0,58,58,58,0,49,49,0,0,0,0,0,0,0,0,1,1,1,1,1,0,2,2,2,2,0,0,3,0,5,5,5,5,5,0,6,6,0,7,7,7,7,7,7,7,7,7,7,7,0,0,11,0,0,12,0,13,13,13,0,14,14,0,0,0,15,15,15,0,16,16,16,16,16,16,16,16,0,18,18,18,0,19,19,19,19,19,19,19,19,19,0,7,7,7,7,7,7,7,7,7,7,7,0,3,0,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,0,10,10,0,11,0,16,16,16,16,16,16,16,16,0,12,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,20,20,20,20,0,21,21,0,25,25,0,24,24,0,23,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,77,77,77,77,77,77,77,77,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,64,64,64,64,64,64,64,65,65,65,65,65,65,65,67,67,67,67,67,67,67,68,68,68,68,68,68,68,69,69,69,69,69,69,69,70,70,70,70,70,70,70,71,71,71,71,71,71,71,72,72,72,72,72,72,72,73,73,73,73,73,73,73,7,7,7,11,11,16,16,25,25,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,25,36,40,43,37,57,58,36,49,56,57,58,37,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,40,40,40,40,40,40,40,42,42,42,42,42,42,43,43,43,43,43,43,49,49,49,49,49,49,49,50,50,50,50,50,50,55,55,55,55,55,55,55,56,56,56,56,56,56,56,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,54,54,54,54,54,54,54,37,37,37,40,40,40,62,62,62,62,62,62,62,64,64,64,64,64,64,64,65,65,65,65,65,65,65,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,71,71,71,71,71,71,71,72,72,72,72,72,72,72,73,73,73,73,73,73,73,62,64,65,68,62,64,65,7,7,7,7,7,7,7,7,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,25,25,25,25,25,25,25,25,25,25,25,25,7,7,7,7,7,16,16,16,16,16,25,25,25,25,25,25,25,37,37,37,64,64,2,5,14,15,20,29,30,31,32,36,41,62,14,15,17,18,21,5,15,20,20,36,37,37,40,43,4,5,6,15,17,20,26,27,28,29,30,31,32,33,77,35,38,41,44,48,59,60,61,5,7,11,15,16,17,20,25,28,33,77,35,36,37,38,40,42,43,48,49,50,52,53,54,55,56,57,58,17,17,5,15,20,25,25,28,33,48,42,50,67,42,50,67,26,27,44,4],"f":[null,null,null,null,null,[[["u32",15],["validprime",3]],["u32",15]],[[["bool",15],["validprime",3],["i32",15]],["vec",3]],[[["validprime",3]]],[[["validprime",3]]],null,null,null,null,null,null,[[["validprime",3]]],[[["i32",15]],["usize",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15]],["vec",3]],[[["usize",15],["i32",15]]],null,null,null,null,null,[[["u32",15],["i32",15]]],[[],["bool",15]],null,null,[[],["ademalgebra",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["adembasiselement",3]],["ordering",4]],[[["adembasiselement",3]],["ordering",4]],[[["isize",15],["vec",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15],["validprime",3]]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["usize",15],["i32",15]],["adembasiselement",3]],[[["adembasiselement",3]],[["usize",15],["option",4]]],[[["adembasiselement",3]],["usize",15]],[[["u32",15],["adembasiselement",3]],["usize",15]],[[["i32",15]]],[[["usize",15],["i32",15]],["fpvector",4]],[[["i32",15]]],[[["usize",15],["i32",15]],["fpvector",4]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["bool",15],["slicemut",4]]],[[["u32",15],["adembasiselement",3],["i32",15],["bool",15],["slicemut",4]]],[[["adembasiselement",3],["i32",15],["bool",15],["slicemut",4]]],[[["u32",15],["adembasiselement",3],["i32",15],["bool",15],["slicemut",4]]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[["u32",15]]],[[["i32",15]]],null,null,[[],["validprime",3]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[],["vec",3]],[[["value",4]],["result",6]],[[["usize",15],["i32",15]],["value",4]],[[["usize",15],["i32",15]],["string",3]],[[["slice",4],["i32",15]],["string",3]],null,[[["i32",15]],[["usize",15],["vec",3]]],[[["usize",15],["i32",15]],["string",3]],[[["str",15]],[["str",15],["iresult",6]]],[[["usize",15],["i32",15]],["vec",3]],[[["i32",15]],[["vec",3],["vec",3]]],null,null,[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],null,null,null,[[["validprime",3]]],null,null,[[],["milnoralgebra",3]],null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[["ppart",6],["i32",15]]],[[]],null,null,null,null,null,null,null,null,null,[[["validprime",3]]],[[],["i32",15]],[[["usize",15],["i32",15]],["milnorbasiselement",3]],[[["milnorbasiselement",3]],[["usize",15],["option",4]]],[[["milnorbasiselement",3]],["usize",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15],["ppartentry",6]],["option",4]],[[["u32",15],["ppartentry",6]]],[[["u32",15],["milnorbasiselement",3]],["vec",3]],[[["u32",15],["slicemut",4],["milnorbasiselement",3]]],[[["u32",15],["ppartallocation",3],["slicemut",4],["milnorbasiselement",3]],["ppartallocation",3]],[[["u32",15],["slice",4],["ppartallocation",3],["i32",15],["slicemut",4],["milnorbasiselement",3]],["ppartallocation",3]],null,null,null,[[["usize",15]]],[[["usize",15]]],null,null,null,null,[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,[[],["validprime",3]],[[["u32",15],["ppartallocation",3],["ppart",6],["i32",15],["validprime",3]]],[[],["ppartallocation",3]],[[["ppartentry",6]],["ppartentry",6]],[[],["bool",15]],[[],[["u32",15],["option",4]]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[["ppart",6]],["bool",15]],null,null,null,null,null,null,[[["validprime",3]]],null,null,null,[[]],null,[[],["validprime",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]]],[[["usize",15],["i32",15]],["string",3]],[[],["oncevec",3]],[[["usize",15],["i32",15]],[["usize",15],["option",4]]],[[["i32",15]]],[[["i32",15]]],[[["polynomialalgebramonomial",3]],["usize",15]],[[["usize",15],["i32",15]],["polynomialalgebramonomial",3]],[[["fpvector",4],["fpvector",4]]],[[["polynomialalgebramonomial",3],["polynomialalgebramonomial",3]],[["u32",15],["option",4]]],[[["u32",15],["i32",15],["fpvector",4],["fpvector",4]]],[[["u32",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4],["fpvector",4]]],[[["u32",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4],["fpvector",4]]],[[["polynomialalgebramonomial",3],["i32",15]]],[[],["i32",15]],null,null,[[],["steenrodalgebraborrow",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[["value",4],["str",15]],[["steenrodalgebra",4],["result",6]]],[[["value",4]]],null,null,null,[[["u32",15],["ademalgebra",3],["usize",15],["i32",15],["milnoralgebra",3],["fpvector",4]]],[[["u32",15],["ademalgebra",3],["i32",15],["milnoralgebra",3],["fpvector",4],["fpvector",4]]],[[["u32",15],["ademalgebra",3],["usize",15],["i32",15],["milnoralgebra",3],["fpvector",4]]],[[["u32",15],["ademalgebra",3],["usize",15],["i32",15],["milnoralgebra",3],["fpvector",4]]],[[["u32",15],["ademalgebra",3],["usize",15],["i32",15],["milnoralgebra",3],["fpvector",4]]],[[["u32",15],["ademalgebra",3],["i32",15],["milnoralgebra",3],["fpvector",4],["fpvector",4]]],[[["u32",15],["ademalgebra",3],["milnoralgebra",3],["fpvector",4]]],[[["u32",15],["ademalgebra",3],["i32",15],["milnoralgebra",3],["fpvector",4],["ppart",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["copy",8],["iresult",6],["fromstr",8],["str",15]]],[[["str",15]],[["iresult",6],["vec",3],["str",15]]],[[["str",15]],[["iresult",6],["vec",3],["str",15]]],[[["str",15]],[["iresult",6],["vec",3],["str",15]]],[[["str",15]],[["iresult",6],["vec",3],["str",15]]],null,null,null,[[["str",15]],[["bocksteinorsq",4],["iresult",6],["str",15]]],[[["str",15]],[["bocksteinorsq",4],["iresult",6],["str",15]]],[[["str",15]],[["vec",3],["iresult",6],["str",15]]],[[["str",15]],[["vec",3],["iresult",6],["str",15]]],[[["str",15]],[["algebraparsenode",4],["iresult",6],["str",15]]],[[["str",15]],[["algebraparsenode",4],["iresult",6],["str",15]]],[[["str",15]],[["algebraparsenode",4],["iresult",6],["str",15]]],[[["str",15]],[["algebraparsenode",4],["iresult",6],["str",15]]],[[["str",15]],[["algebraparsenode",4],["iresult",6],["str",15]]],[[["str",15]],[["algebraparsenode",4],["iresult",6],["str",15]]],[[["str",15]],[["iresult",6],["moduleparsenode",4],["str",15]]],[[["str",15]],[["iresult",6],["moduleparsenode",4],["str",15]]],[[["str",15]],[["iresult",6],["moduleparsenode",4],["str",15]]],[[["str",15]],[["iresult",6],["moduleparsenode",4],["str",15]]],[[["str",15]],[["iresult",6],["moduleparsenode",4],["str",15]]],[[["str",15]],[["result",4],["algebraparsenode",4],["parseerror",3]]],[[["str",15]],[["moduleparsenode",4],["parseerror",3],["result",4]]],null,null,null,null,null,null,[[["validprime",3]]],[[["i32",15]]],[[["str",15]],[["string",3],["result",6]]],[[["str",15]],[["string",3],["result",6]]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["str",15]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["str",15]],["result",6]],[[["algebraparsenode",4],["ademalgebra",3],["milnoralgebra",3]],["result",6]],[[["ademalgebra",3],["i32",15],["algebraparsenode",4],["milnoralgebra",3],["option",4]],["result",6]],[[["ademalgebra",3],["algebrabasiselt",4],["i32",15],["milnoralgebra",3],["option",4]],["result",6]],[[["ademalgebra",3],["hashmap",6],["milnoralgebra",3],["str",15]],["result",6]],[[["ademalgebra",3],["hashmap",6],["milnoralgebra",3],["moduleparsenode",4]],["result",6]],[[["moduleparsenode",4],["ademalgebra",3],["i32",15],["hashmap",6],["milnoralgebra",3],["option",4]],["result",6]],[[["ademalgebra",3],["i32",15],["hashmap",6],["milnoralgebra",3],["string",3],["option",4]],["result",6]],[[["i32",15],["bocksteinorsq",4]],["adembasiselement",3]],[[["ademalgebra",3]]],null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4],["string",3]]],[[["usize",15],["arc",3],["string",3],["bivec",3]]],[[["usize",15],["string",3],["i32",15]]],[[["value",4]]],[[["arc",3],["bivec",3]],[["bivec",3],["bivec",3]]],[[["string",3],["i32",15]]],[[["str",15]],["option",4]],[[["usize",15],["fpvector",4],["i32",15]]],[[["usize",15],["u32",15],["vec",3],["i32",15]]],[[["usize",15],["i32",15]],["fpvector",4]],[[["usize",15],["i32",15]],["fpvector",4]],[[["arc",3],["steenrodalgebra",4],["value",4]],["result",6]],[[["value",4]]],[[["hashmap",6],["bool",15],["str",15]],["result",6]],[[["i32",15],["slicemut",4],["str",15]],["result",6]],[[["str",15]],[["str",15],["iresult",6]]],[[["i32",15]],[["modulefailedrelationerror",3],["result",4]]],[[["i32",15]]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[],["value",4]],null,null,null,null,null,[[["arc",3],["steenrodalgebra",4],["value",4]],["result",6]],[[["value",4]]],[[],["str",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["realprojectivespace",3]]],[[],[["fpmodule",3],["option",4]]],[[],[["fdmodule",3],["option",4]]],[[],[["realprojectivespace",3],["option",4]]],[[],[["fpmodule",3],["option",4]]],[[],[["fdmodule",3],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15],["arc",3],["string",3]]],[[["string",3],["vec",3],["i32",15]]],[[["matrix",3],["i32",15]]],[[["value",4]]],[[["usize",15],["i32",15]],["isize",15]],[[["usize",15],["i32",15]],["usize",15]],[[["arc",3],["steenrodalgebra",4],["value",4]],["result",6]],[[["value",4]]],[[],["value",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15],["arc",3],["string",3]]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["i32",15]]],[[["i32",15]]],[[["usize",15],["option",4],["vec",3],["i32",15]]],[[["usize",15],["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["usize",15]],[[["operationgeneratorpair",3]],["usize",15]],[[["usize",15],["i32",15]],["operationgeneratorpair",3]],[[["slice",4],["i32",15]],["value",4]],[[["usize",15],["option",4],["vec",3],["i32",15]]],[[["usize",15],["option",4],["vec",3],["i32",15]]],[[["i32",15]]],[[["i32",15]],[["i32",15],["vec",3]]],[[],["i32",15]],[[["u32",15],["slice",4],["i32",15]],["string",3]],null,null,null,null,null,null,[[["usize",15],["ademalgebra",3],["i32",15]],["bool",15]],[[["usize",15],["i32",15],["milnoralgebra",3]],["bool",15]],null,null,null,null,[[["arc",3],["i32",15],["bool",15],["option",4]]],[[],[["i32",15],["option",4]]],[[["arc",3],["value",4]],["result",6]],[[["value",4]]],null,null,[[["i32",15],["arc",3]]],null,null,[[],["i32",15]],[[],["usize",15]],[[],["fdmodule",3]],null,null,null,[[],["arc",3]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["bool",15]],[[],["validprime",3]],[[],["bool",15]],[[["usize",15],["i32",15]],["fpvector",4]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],[["vec",3],["string",3]]],[[["slice",4],["i32",15]],["string",3]],[[["arc",3],["i32",15]],["fdmodule",3]],[[["usize",15],["i32",15],["fpvector",4]]],[[["i32",15]],["vec",3]],[[["usize",15],["i32",15]]],null,null,null,null,null,null,null,[[["arc",3],["i32",15]]],null,null,null,null,null,null,null,null,null,null,[[["i32",15],["arc",3],["string",3]]],[[],["ademalgebra",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["i32",15]]],[[["i32",15]]],[[["usize",15],["option",4],["vec",3],["i32",15]]],[[["usize",15],["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["usize",15]],[[["operationgeneratorpair",3]],["usize",15]],[[["usize",15],["i32",15]],["operationgeneratorpair",3]],[[["fpvector",4],["i32",15]],["value",4]],[[["usize",15],["option",4],["vec",3],["i32",15]]],[[["usize",15],["option",4],["vec",3],["i32",15]]],[[["i32",15]]],[[["i32",15]],[["i32",15],["vec",3]]],[[],["i32",15]],null,null,null,[[],["arc",3]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[],["oncevec",3]],[[],["oncevec",3]],[[],["i32",15]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["polynomialalgebramonomial",3],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["slicemut",4],["polynomialalgebramonomial",3]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[["i32",15]]],[[["usize",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4],["fpvector",4]],["fpvector",4]],[[["usize",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4]],["fpvector",4]],[[["i32",15]]],null,null,null,null,null,null,null,null,null,null,null,[[["arc",3],["i32",15]]],[[],["ademalgebra",3]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],null,null,null,null,null,null,null,null,[[["arc",3]]],[[["bool",15],["i32",15]],["bool",15]],null,null,null,null,null,null,null,null,null,[[["arc",3],["i32",15]]],[[],["ademalgebra",3]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],null,null,null,null,null,null,[[["arc",3],["freemodule",3],["arc",3]]],[[],[["arc",3],["freemodule",3]]],[[],["arc",3]],[[["slice",4],["i32",15]],["freemodulehomomorphism",3]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],null,null,null,null,null,[[["arc",3]]],[[["slice",4],["i32",15]]],[[["i32",15]]],[[["fpvector",4],["vec",3],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["slicemut",4],["i32",15]]],[[["slice",4],["slicemut",4],["i32",15]]],null,null,null,null,null,null,[[["vec",3],["arc",3],["i32",15],["arc",3]]],[[["usize",15],["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["usize",15]],null,null,null,null,null,[[["arc",3],["arc",3]]],[[["usize",15],["i32",15]],["i32",15]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["bivec",3]]],[[["usize",15],["i32",15]],["blockstart",3]],[[["usize",15],["i32",15]],["usize",15]],[[["usize",15]],["generatorbasiseltpair",3]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],null,null,null,null,null,null,null,null,null,null,[[["i32",15],["arc",3],["arc",3]]],[[["arc",3],["bivec",3],["i32",15],["matrix",3],["arc",3]]],[[]],[[["arc",3],["boundedmodule",8]],[["boundedmodulehomomorphism",3],["boundedmodule",8]]],[[["boundedmodule",8],["arc",3]],[["boundedmodulehomomorphism",3],["boundedmodule",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["i32",15]],["isize",15]],[[["usize",15],["i32",15]],["usize",15]],[[],["arc",3]],null,null,null,null,null,null,null,null,null,null,[[["freemodule",3],["arc",3],["i32",15],["arc",3]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["usize",15],["i32",15]],["fpvector",4]],[[["i32",15]]],[[["mutexguard",6],["i32",15]]],[[["slice",4],["mutexguard",6],["i32",15]]],[[["mutexguard",6],["matrixslicemut",3],["i32",15]]],[[["fpvector",4],["vec",3],["i32",15],["mutexguard",6]]],[[["u32",15],["usize",15],["i32",15],["fpvector",4]]],[[["matrixslicemut",3],["i32",15]]],[[],["mutexguard",6]],[[["mutexguard",6],["subspace",3],["i32",15]]],[[["mutexguard",6],["quasiinverse",3],["i32",15]]],[[["mutexguard",6]]],[[["i32",15]],[["vec",3],["vec",3]]],null,null,null,null,null,[[["i32",15],["arc",3],["arc",3]]],null,null,null,null,null,null,null,[[["arc",3],["hommodule",3],["freemodulehomomorphism",3],["arc",3]]],null,null,null,null,null,[[["arc",3],["arc",3],["quotientmodule",3],["quotientmodule",3],["arc",3]]],null,null,null,null,[[["arc",3],["arc",3],["quotientmodule",3],["arc",3]]],null,null,null,null,null,null,null,null,null,[[["arc",3],["arc",3],["arc",3],["truncatedmodule",3],["truncatedmodule",3]]],[[],["i32",15]],[[["arc",3],["arc",3],["truncatedmodule",3],["arc",3]]],[[],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["i32",15]],["isize",15]],[[["usize",15],["i32",15]],["usize",15]],[[],["arc",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["subspace",3]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[],["validprime",3]],[[],["i32",15]],[[["i32",15]],["option",4]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]]],[[["matrixslicemut",3],["i32",15]]],[[["slice",4],["slicemut",4],["i32",15]]],null,[[["i32",15],["arc",3],["arc",3]]],null,[[["arc",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15],["arc",3]]],null,[[],["i32",15]],[[],["usize",15]],[[],["fdmodule",3]],null,null,[[],["arc",3]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["bool",15]],[[],["validprime",3]],[[],["bool",15]],[[["usize",15],["i32",15]],["fpvector",4]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],[["vec",3],["string",3]]],[[["slice",4],["i32",15]],["string",3]],[[["arc",3],["i32",15]],["fdmodule",3]],[[["usize",15],["i32",15],["fpvector",4]]],[[["i32",15]],["vec",3]],[[["usize",15],["i32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arc",3]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[],["oncevec",3]],[[],["oncevec",3]],[[],["i32",15]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["polynomialalgebramonomial",3],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["slicemut",4],["polynomialalgebramonomial",3]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[["i32",15]]],[[["usize",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4],["fpvector",4]],["fpvector",4]],[[["usize",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4]],["fpvector",4]],[[["i32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15],["validprime",3]],["u32",15]],[[["bool",15],["validprime",3],["i32",15]],["vec",3]],[[["validprime",3]]],[[["validprime",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ademalgebra",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["milnoralgebra",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ademalgebra",3]],null,[[],["validprime",3]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[],["vec",3]],[[["value",4]],["result",6]],[[["usize",15],["i32",15]],["value",4]],[[["usize",15],["i32",15]],["string",3]],[[["slice",4],["i32",15]],["string",3]],null,[[["i32",15]],[["usize",15],["vec",3]]],[[["usize",15],["i32",15]],["string",3]],[[["str",15]],[["str",15],["iresult",6]]],[[["usize",15],["i32",15]],["vec",3]],[[["i32",15]],[["vec",3],["vec",3]]],null,[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["milnoralgebra",3]],null,[[],["validprime",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]]],[[["usize",15],["i32",15]],["string",3]],[[],["oncevec",3]],[[["usize",15],["i32",15]],[["usize",15],["option",4]]],[[["i32",15]]],[[["i32",15]]],[[["polynomialalgebramonomial",3]],["usize",15]],[[["usize",15],["i32",15]],["polynomialalgebramonomial",3]],[[["fpvector",4],["fpvector",4]]],[[["polynomialalgebramonomial",3],["polynomialalgebramonomial",3]],[["u32",15],["option",4]]],[[["u32",15],["i32",15],["fpvector",4],["fpvector",4]]],[[["u32",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4],["fpvector",4]]],[[["u32",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4],["fpvector",4]]],[[["polynomialalgebramonomial",3],["i32",15]]],[[],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["steenrodalgebraborrow",4]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["ademalgebra",3]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[["usize",15],["i32",15]],["vec",3]],[[],["validprime",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["oncevec",3]],[[["i32",15]],["usize",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]]],[[["usize",15],["i32",15]],["string",3]],[[["usize",15],["i32",15]],[["usize",15],["option",4]]],[[["i32",15]]],[[],["validprime",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[["i32",15]],["usize",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]]],[[["usize",15],["i32",15]],["string",3]],[[["usize",15],["i32",15]],[["usize",15],["option",4]]],[[["i32",15]]],[[],["oncevec",3]],[[],["validprime",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["oncevec",3]],[[["i32",15]],["usize",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]]],[[["usize",15],["i32",15]],["string",3]],[[["usize",15],["i32",15]],[["usize",15],["option",4]]],[[["i32",15]]],[[],["steenrodalgebraborrow",4]],[[["arc",3],["i32",15]]],[[["arc",3],["i32",15]]],[[["arc",3],["i32",15]]],[[["arc",3],["steenrodalgebra",4],["i32",15]]],[[["arc",3],["i32",15]]],[[["arc",3],["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["string",3]],[[],["bool",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[],["bool",15]],[[["usize",15],["i32",15]],["fpvector",4]],[[],["arc",3]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["bool",15]],[[],["validprime",3]],[[],["bool",15]],[[["usize",15],["i32",15]],["fpvector",4]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["string",3]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["string",3]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["string",3]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["arc",3]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["arc",3]],[[],["i32",15]],[[["i32",15]]],[[],["i32",15]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],[[["usize",15],["i32",15]],["string",3]],[[],["arc",3]],[[],["oncevec",3]],[[],["oncevec",3]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[],["arc",3]],[[],["oncevec",3]],[[],["oncevec",3]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[],["arc",3]],[[],["oncevec",3]],[[],["oncevec",3]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["polynomialalgebramonomial",3],["usize",15],["i32",15]]],[[["usize",15],["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["isize",15]],[[],["arc",3]],[[["usize",15],["i32",15]],["usize",15]],[[["usize",15],["i32",15]],["isize",15]],[[],["arc",3]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]],["subspace",3]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]],["subspace",3]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]],["subspace",3]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]],["subspace",3]],[[["matrixslicemut",3],["i32",15]]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]],["subspace",3]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]],["subspace",3]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["subspace",3]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["subspace",3]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["subspace",3]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["subspace",3]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]]],[[["i32",15],["arc",3],["arc",3]]],[[["arc",3],["finitemodule",4],["arc",3],["i32",15]]],[[["i32",15],["arc",3],["arc",3]]],[[["i32",15],["arc",3],["arc",3]]],[[["arc",3]]],[[["arc",3],["finitemodule",4]]],[[["arc",3]]],[[],["validprime",3]],[[],["vec",3]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["value",4]],["result",6]],[[["usize",15],["i32",15]],["string",3]],[[["usize",15],["i32",15]],["value",4]],[[],["validprime",3]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[],["vec",3]],[[["value",4]],["result",6]],[[["usize",15],["i32",15]],["value",4]],[[["usize",15],["i32",15]],["string",3]],[[["slice",4],["i32",15]],["string",3]],[[],["validprime",3]],[[],["vec",3]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["value",4]],["result",6]],[[["usize",15],["i32",15]],["value",4]],[[["usize",15],["i32",15]],["string",3]],[[],["validprime",3]],[[["i32",15]]],[[["i32",15]],["usize",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["usize",15],["slice",4],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["usize",15],["i32",15],["slicemut",4]]],[[["u32",15],["slice",4],["i32",15],["slicemut",4]]],[[],["vec",3]],[[["value",4]],["result",6]],[[["usize",15],["i32",15]],["value",4]],[[["usize",15],["i32",15]],["string",3]],[[["slice",4],["i32",15]],["string",3]],[[["str",15]],[["iresult",6],["str",15]]],[[["usize",15],["i32",15]],["string",3]],[[["i32",15]],[["usize",15],["vec",3]]],[[["usize",15],["i32",15]],["vec",3]],[[["i32",15]],[["vec",3],["vec",3]]],[[["str",15]],[["iresult",6],["str",15]]],[[["usize",15],["i32",15]],["string",3]],[[["i32",15]],[["usize",15],["vec",3]]],[[["usize",15],["i32",15]],["vec",3]],[[["i32",15]],[["vec",3],["vec",3]]],[[["i32",15]],[["usize",15],["vec",3]]],[[["usize",15],["i32",15]],["string",3]],[[["str",15]],[["str",15],["iresult",6]]],[[["usize",15],["i32",15]],["vec",3]],[[["i32",15]],[["vec",3],["vec",3]]],[[["ademalgebra",3]],["steenrodalgebra",4]],[[["milnoralgebra",3]],["steenrodalgebra",4]],[[["fpmodule",3],["steenrodalgebra",4]]],[[["fdmodule",3],["steenrodalgebra",4]]],[[["steenrodalgebra",4],["realprojectivespace",3]]],[[["boundedmodulehomomorphism",3],["finitemodule",4]]],[[["fpmodulehomomorphism",3],["finitemodule",4]]],[[],["option",4]],[[],["adembasiselement",3]],[[],["qpart",3]],[[],["milnorbasiselement",3]],[[],["polynomialalgebramonomial",3]],[[],["algebrabasiselt",4]],[[],["algebraparsenode",4]],[[],["moduleparsenode",4]],[[],["bocksteinorsq",4]],[[]],[[],["operationgeneratorpair",3]],[[]],[[],["qpart",3]],[[],["milnorbasiselement",3]],[[],["matrix2d",3]],[[],["ppartallocation",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[["polynomialalgebramonomial",3]],["bool",15]],[[["polynomialalgebramonomial",3]],["bool",15]],[[],["bool",15]],[[["finitemodule",4]],["bool",15]],[[["finitemodule",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["vec",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["result",4],["ademalgebra",3]]],[[],[["result",4],["milnoralgebra",3]]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[3,"TruncatedPolynomialMonomialBasis"],[3,"PartitionIterator"],[8,"AdemAlgebraT"],[3,"BOCKSTEIN_TABLE"],[3,"AdemBasisElement"],[4,"PorBockstein"],[3,"AdemAlgebra"],[8,"Algebra"],[8,"GeneratedAlgebra"],[8,"Bialgebra"],[3,"Field"],[8,"MilnorAlgebraT"],[3,"MilnorProfile"],[3,"QPart"],[3,"MilnorBasisElement"],[3,"MilnorAlgebra"],[3,"Matrix2D"],[3,"PPartAllocation"],[3,"PPartMultiplier"],[3,"PolynomialAlgebraMonomial"],[3,"PolynomialAlgebraTableEntry"],[8,"PolynomialAlgebra"],[8,"SteenrodAlgebraT"],[4,"SteenrodAlgebraBorrow"],[4,"SteenrodAlgebra"],[3,"MilnorProfileOption"],[3,"AlgebraSpec"],[3,"InvalidAlgebraError"],[4,"AlgebraBasisElt"],[4,"AlgebraParseNode"],[4,"ModuleParseNode"],[4,"BocksteinOrSq"],[3,"ParseError"],[3,"SteenrodCalculator"],[3,"UnknownBasisElementError"],[3,"FiniteDimensionalModule"],[4,"FiniteModule"],[3,"UnknownModuleTypeError"],[3,"FPMIndexTable"],[3,"FinitelyPresentedModule"],[3,"OperationGeneratorPair"],[3,"FreeModule"],[3,"RealProjectiveSpace"],[3,"RPSpec"],[8,"ZeroModule"],[8,"BoundedModule"],[8,"Module"],[3,"ModuleFailedRelationError"],[3,"TruncatedModule"],[3,"FreeUnstableModule"],[8,"PolynomialAlgebraModule"],[3,"KFpn"],[3,"BCp"],[3,"Dickson2"],[3,"HomModule"],[3,"QuotientModule"],[3,"SumModule"],[3,"TensorModule"],[3,"GeneratorBasisEltPair"],[3,"BlockStructure"],[3,"BlockStart"],[3,"BoundedModuleHomomorphism"],[4,"FMHI"],[3,"FiniteModuleHomomorphism"],[3,"FPModuleHomomorphism"],[8,"FPModuleT"],[3,"FreeModuleHomomorphism"],[3,"GenericZeroHomomorphism"],[3,"HomPullback"],[3,"QuotientHomomorphism"],[3,"QuotientHomomorphismSource"],[3,"TruncatedHomomorphism"],[3,"TruncatedHomomorphismSource"],[8,"ModuleHomomorphism"],[8,"ZeroHomomorphism"],[8,"IdentityHomomorphism"],[3,"DegreeError"]]},\
"bivec":{"doc":"","t":[3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BiVec","data","min_degree","new","from_vec","into_vec","with_capacity","min_degree","max_degree","len","is_empty","push","get","last","iter","iter_mut","iter_enum","into_iter_enum","extend_with","reserve","split_borrow_mut","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","default","eq","ne","fmt","index","index_mut","serialize","deserialize","load","save"],"q":["bivec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A BiVec is like a Vec, except we allow indices to be …","","","","","","","","This returns the largest degree in the bivector. This is …","This returns the “length” of the bivector, defined to …","","","","","","","","","Extends the bivec such that <code>max_degree()</code> is at least <code>max</code>. …","","Mutably borrows i and j. Panic if i != j.","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[["i32",15]]],[[["vec",3],["i32",15]]],[[["bivec",3]],["vec",3]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["bool",15]],[[]],[[["i32",15]],["option",4]],[[],["option",4]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bivec",3]],[[]],[[["bivec",3]],["bool",15]],[[["bivec",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["i32",15]]],[[["i32",15]]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]]],"p":[[3,"BiVec"]]},\
"chart":{"doc":"","t":[17,17,17,17,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["STYLES","GRID_WIDTH","MARGIN","PATTERNS","Graph","out","max_x","max_y","num_nodes","new","get_coords","node","structline","structline_matrix","legend","from","into","borrow","borrow_mut","try_from","try_into","type_id","drop"],"q":["chart","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Returns r, x, y","","","","Print the legend for node patterns","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,[[["i32",15]],["result",6]],[[["usize",15],["i32",15]]],[[["usize",15],["i32",15]],["result",6]],[[["option",4],["str",15]],["result",6]],[[["vec",3],["vec",3],["option",4],["str",15]],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"Graph"]]},\
"error":{"doc":"","t":[6,3,12,12,11,3,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Result","Error","error","backtrace","inner","GenericError","0","new","from_string","from","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","fmt","fmt","fmt","fmt"],"q":["error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,0,2,2,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,2,1,2],"f":[null,null,null,null,[[],["stderror",8]],null,null,[[["string",3]]],[[["into",8],["string",3]],["result",6]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["error",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[3,"Error"],[3,"GenericError"]]},\
"ext":{"doc":"","t":[0,0,3,12,12,12,11,11,11,3,12,12,12,12,12,0,6,3,12,12,12,12,12,12,11,11,11,3,12,12,12,12,12,12,0,6,6,3,12,12,12,12,12,12,11,11,11,11,3,12,12,12,12,12,12,12,11,3,12,12,12,12,12,3,12,12,12,3,12,12,12,12,12,12,4,13,13,8,11,8,16,16,16,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,8,16,16,16,11,10,10,10,10,10,10,10,10,10,11,11,11,11,8,16,16,10,10,8,10,3,12,12,0,3,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,0,3,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,0,17,6,5,5,5,5,5,5,5,5,0,3,12,12,12,12,5,5,5,5,5,3,12,17,17,5,5,8,10,5,0,6,6,17,3,12,12,11,11,11,5,5,5,5,17,5,5,5,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["chain_complex","finite_chain_complex","FiniteChainComplex","modules","zero_module","differentials","max_degree","pop","ccdz","FiniteAugmentedChainComplex","modules","zero_module","differentials","target_cc","chain_maps","hom_complex","SHM","HomChainComplex","lock","source_cc","target_cc","modules","zero_module","differentials","new","source_cc","target_cc","HomChainMap","source_cc","target_cc","lock","source","target","quasi_inverses","tensor_product_chain_complex","STM","TensorSquareCC","TensorChainComplex","lock","left_cc","right_cc","modules","zero_module","differentials","new","left_cc","right_cc","swap","TensorChainMap","left_cc","right_cc","source_s","lock","source","target","quasi_inverses","calculate_quasi_inverse","FiniteAugmentedChainComplex","modules","zero_module","differentials","target_cc","chain_maps","FiniteChainComplex","modules","zero_module","differentials","TensorChainComplex","lock","left_cc","right_cc","modules","zero_module","differentials","ChainComplexGrading","Homological","Cohomological","FreeChainComplex","graded_dimension_string","ChainComplex","Algebra","Module","Homomorphism","prime","algebra","min_degree","zero_module","module","differential","compute_through_bidegree","has_computed_bidegree","set_homology_basis","homology_basis","max_homology_degree","compute_homology_through_bidegree","homology_dimension","homology_gen_to_cocyle","compute_homology","CochainComplex","Algebra","Module","Homomorphism","prime","algebra","min_degree","zero_module","module","differential","compute_through_bidegree","set_cohomology_basis","cohomology_basis","max_cohomology_degree","compute_cohomology_through_bidegree","cohomology_dimension","homology_gen_to_cocyle","compute_cohomology","AugmentedChainComplex","TargetComplex","ChainMap","target","chain_map","BoundedChainComplex","max_s","ChainMap","s_shift","chain_maps","resolution","Resolution","lock","complex","modules","zero_module","chain_maps","differentials","kernels","new","extended_degree","extend_through_degree","step_resolution","cocycle_string","complex","number_of_gens_in_bidegree","prime","resolve_through_bidegree","resolve_through_bidegree_with_callback","resolution_homomorphism","ResolutionHomomorphism","name","source","target","maps","homological_degree_shift","internal_degree_shift","new","get_map_ensure_length","get_map","into_chain_maps","extend","extend_step","extend_step_helper","from_module_homomorphism","act","yoneda","PENALTY_UNIT","Yoneda","rate_operation","rate_adem_operation","operation_drop","split_mut_borrow","yoneda_representative_element","yoneda_representative","yoneda_representative_with_strategy","compute_kernel_image","utils","Config","module_paths","module_file_name","algebra_name","max_degree","get_config","construct","construct_from_json","load_module_from_file","construct_s_2","ModuleFileNotFoundError","name","RED_ANSI_CODE","WHITE_ANSI_CODE","ascii_num","print_resolution_color","HashMapTuple","get_tuple","iter_stems","secondary","Resolution","FMH","TWO","MilnorClass","elements","degree","from_module_row","iter","iter_mut","compute_delta","compute_c","compute_a_dd","a_sigma_y","AY_CACHE","a_y","a_y_cached","a_y_inner","CCC","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","algebra","min_degree","zero_module","module","differential","compute_through_bidegree","has_computed_bidegree","set_homology_basis","homology_basis","max_homology_degree","algebra","min_degree","has_computed_bidegree","zero_module","module","differential","compute_through_bidegree","set_homology_basis","homology_basis","max_homology_degree","algebra","min_degree","zero_module","has_computed_bidegree","module","differential","compute_through_bidegree","set_homology_basis","homology_basis","max_homology_degree","algebra","module","zero_module","min_degree","has_computed_bidegree","set_homology_basis","homology_basis","homology_dimension","max_homology_degree","differential","compute_through_bidegree","target","chain_map","target","chain_map","target","chain_map","max_s","max_s","from","fmt","fmt","description","source","target","degree_shift","apply_to_basis_element","kernel","quasi_inverse","compute_kernels_and_quasi_inverses_through_degree","apply_quasi_inverse","source","target","degree_shift","apply_to_basis_element","kernel","quasi_inverse","compute_kernels_and_quasi_inverses_through_degree","apply_quasi_inverse","load","save"],"q":["ext","ext::chain_complex","ext::chain_complex::finite_chain_complex","","","","","","","","","","","","","ext::chain_complex","ext::chain_complex::hom_complex","","","","","","","","","","","","","","","","","","ext::chain_complex","ext::chain_complex::tensor_product_chain_complex","","","","","","","","","","","","","","","","","","","","","","ext::chain_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext","ext::resolution","","","","","","","","","","","","","","","","","","ext","ext::resolution_homomorphism","","","","","","","","","","","","","","","","ext","ext::yoneda","","","","","","","","","","ext","ext::utils","","","","","","","","","","","","","","","","","","","ext","ext::secondary","","","","","","","","","","","","","","","","","ext","ext::chain_complex::finite_chain_complex","","","","","","","","","","","","","","ext::chain_complex::hom_complex","","","","","","","","","","","","","","ext::chain_complex::tensor_product_chain_complex","","","","","","","","","","","","","","ext::chain_complex","","","","","","","","","","","","","","ext::resolution","","","","","","","ext::resolution_homomorphism","","","","","","","ext::utils","","","","","","","","","","","","","","","ext::secondary","","","","","","","ext::chain_complex::finite_chain_complex","","","","","","","","","","","","","","","","","","","","ext::chain_complex::tensor_product_chain_complex","","","","","","","","","","ext::resolution","","","","","","","","","","","ext::chain_complex::finite_chain_complex","","ext::chain_complex::tensor_product_chain_complex","","ext::resolution","","ext::chain_complex::finite_chain_complex","","","ext::utils","","","ext::chain_complex::hom_complex","","","","","","","","ext::chain_complex::tensor_product_chain_complex","","","","","","","","ext::resolution",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function sends a (x) b to b (x) a. This makes sense …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A chain complex is defined to start in degree 0. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An augmented chain complex is a map of chain complexes C …","","","","","A bounded chain complex is a chain complex C for which …","","<code>chain_maps</code> is required to be non-empty","","","","Resolution contains the data of the actual resolution, …","","","","","","","For each <em>internal</em> degree, store the kernel of the most …","","","This function prepares the Resolution object to perform …","Call our resolution $X$, and the chain complex to resolve …","","","","","","","","","","","","","","","","","","","Extend the resolution homomorphism such that it is …","","","","","","","","","","","","","This function produces a quasi-isomorphic quotient of <code>cc</code> …","","This function does the following computation:","","","","","","","","","","","A function that constructs the resolution of S_2 over the …","","","","","","","","","Iterate through all pairs (s, f, t) such that f = t - s, …","","","","","An element in the Milnor algebra","","","","","","A non-concurrent version for computing delta. In practice …","Computes $C(g_i) = A(c_i^j, dd g_j)$.","Computes $A(a, ddg)$","Compute the Y terms of $A(a, σ(b)σ(c))$","","Computes $A(a, Y_{k, l})$ using a thread_local cache. …","Compute $A(Sq(R), Y_{k, l})$ where $a = Sq(R)$. This …","Actually computes $A(a, Y_{k, l})$ and returns the result.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This currently crashes if <code>s</code> is greater than the s degree …","","","","","","","","","","","","","","At the moment, this is off by a sign. However, we only …","","","","","","","","At the moment, this is off by a sign. However, we only …","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,0,2,2,2,2,2,0,0,0,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,0,2,2,2,2,2,0,1,1,1,0,5,5,5,5,5,5,0,7,7,0,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,0,12,0,13,13,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,0,0,0,0,0,0,17,0,0,0,0,0,18,0,0,0,0,0,0,19,19,19,19,19,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,19,19,19,19,19,19,19,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,14,14,14,14,14,14,14,14,14,14,14,2,2,5,5,14,14,1,2,1,17,17,17,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,14,14],"f":[null,null,null,null,null,null,[[],["i32",15]],[[]],[[["arc",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arc",3],["arc",3],["finitechaincomplex",3]]],[[],["arc",3]],[[],[["arc",3],["finitechaincomplex",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arc",3],["arc",3]]],[[],["arc",3]],[[],["arc",3]],[[["u32",15],["fpvector",4],["i32",15],["fpvector",4]]],null,null,null,null,null,null,null,null,[[["i32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15],["i32",15]],["string",3]],null,null,null,null,[[],["validprime",3]],[[],["arc",3]],[[],["i32",15]],[[],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["usize",15],["i32",15],["vec",3]]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]],["usize",15]],[[["u32",15],["fpvector",4],["usize",15],["i32",15]]],[[["u32",15],["i32",15]]],null,null,null,null,[[],["validprime",3]],[[],["arc",3]],[[],["i32",15]],[[],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15],["i32",15]]],[[["u32",15],["usize",15],["i32",15],["vec",3]]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15]],["i32",15]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]],["usize",15]],[[["u32",15],["fpvector",4],["usize",15],["i32",15]]],[[["u32",15],["i32",15]]],null,null,null,[[],["arc",3]],[[["u32",15]],["arc",3]],null,[[],["u32",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[["arc",3]]],[[]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["usize",15],["i32",15]],["string",3]],[[],["arc",3]],[[["u32",15],["i32",15]],["usize",15]],[[],["validprime",3]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],null,null,null,null,null,null,null,null,[[["u32",15],["weak",3],["string",3],["i32",15],["weak",3]]],[[["u32",15]],["freemodulehomomorphism",3]],[[["u32",15]],["freemodulehomomorphism",3]],[[],[["freemodulehomomorphism",3],["vec",3]]],[[["u32",15],["i32",15]]],[[["u32",15],["option",4],["i32",15],["matrix",3]]],[[["u32",15],["option",4],["i32",15],["matrix",3]],["matrix",3]],[[["arc",3],["resolution",3],["string",3],["finitemodulehomomorphism",3],["arc",3]]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],null,null,null,[[["usize",15],["arc",3],["i32",15]],["i32",15]],[[["usize",15],["ademalgebra",3],["i32",15]],["i32",15]],[[["usize",15],["ademalgebra",3],["i32",15]],["i32",15]],[[["usize",15],["vec",3]]],[[["u32",15],["usize",15],["i32",15],["arc",3]],["yoneda",6]],[[["freemodulehomomorphism",3],["arc",3],["chainmap",3]],["yoneda",6]],[[["freemodulehomomorphism",3],["arc",3],["chainmap",3]],["yoneda",6]],[[["arc",3],["qm",3],["option",4],["subspace",3],["i32",15],["option",4],["option",4]]],null,null,null,null,null,null,[[],["config",3]],[[["config",3]],[["resolution",3],["result",6]]],[[["value",4],["str",15]],[["resolution",3],["result",6]]],[[["config",3]],[["value",4],["result",6]]],[[["option",4],["path",3],["asref",8],["str",15]],[["ccc",6],["resolution",3]]],null,null,null,null,[[["usize",15]],["char",15]],[[["u32",15],["hashmap",3],["i32",15]]],null,[[],["option",4]],[[["u32",15],["i32",15]]],null,null,null,null,null,null,null,[[["usize",15],["i32",15],["freemodule",3],["fpvector",4]]],[[]],[[]],[[["u32",15],["resolution_",3],["i32",15]],[["freemodulehomomorphism",3],["vec",3]]],[[["u32",15],["usize",15],["fpvector",4],["i32",15],["resolution_",3]]],[[["u32",15],["usize",15],["fpvector",4],["milnorclass",3],["i32",15],["resolution_",3]]],[[["algebra",3],["milnorclass",3],["milnorelt",3],["slicemut",4]]],null,[[["algebra",3],["usize",15],["fpvector",4],["milnorclass",3]]],[[["algebra",3],["usize",15],["fpvector",4],["milnorelt",3]]],[[["algebra",3],["usize",15],["milnorelt",3]],["fpvector",4]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["arc",3]],[[],["i32",15]],[[],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["usize",15],["i32",15],["vec",3]]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15]],["i32",15]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["i32",15]],["bool",15]],[[],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15],["i32",15]]],[[["u32",15],["usize",15],["i32",15],["vec",3]]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15]],["i32",15]],[[],["arc",3]],[[],["i32",15]],[[],["arc",3]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],[[["u32",15],["i32",15]]],[[["u32",15],["usize",15],["i32",15],["vec",3]]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15]],["i32",15]],[[],["arc",3]],[[["u32",15]],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["usize",15],["i32",15],["vec",3]]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["usize",15]],[[["u32",15]],["i32",15]],[[["u32",15]],["arc",3]],[[["u32",15],["i32",15]]],[[],["arc",3]],[[["u32",15]],["arc",3]],[[],["arc",3]],[[["u32",15]],["arc",3]],[[],["arc",3]],[[["u32",15]],["arc",3]],[[],["u32",15]],[[],["u32",15]],[[["finiteaugmentedchaincomplex",3]],["finitechaincomplex",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["str",15]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["subspace",3]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]]],[[["i32",15],["slice",4],["slicemut",4]]],[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[["u32",15],["usize",15],["i32",15],["slicemut",4]]],[[["i32",15]],["subspace",3]],[[["i32",15]],["quasiinverse",3]],[[["i32",15]]],[[["i32",15],["slice",4],["slicemut",4]]],[[],["result",6]],[[],["result",6]]],"p":[[3,"FiniteChainComplex"],[3,"FiniteAugmentedChainComplex"],[3,"HomChainComplex"],[3,"HomChainMap"],[3,"TensorChainComplex"],[3,"TensorChainMap"],[4,"ChainComplexGrading"],[8,"FreeChainComplex"],[8,"ChainComplex"],[8,"CochainComplex"],[8,"AugmentedChainComplex"],[8,"BoundedChainComplex"],[3,"ChainMap"],[3,"Resolution"],[3,"ResolutionHomomorphism"],[3,"Config"],[3,"ModuleFileNotFoundError"],[8,"HashMapTuple"],[3,"MilnorClass"]]},\
"fp":{"doc":"","t":[0,0,5,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,11,11,11,11,3,12,12,12,11,11,11,11,11,11,11,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,0,3,12,12,11,11,0,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,3,12,12,12,3,12,12,12,12,3,12,12,12,12,3,12,12,3,12,12,12,3,12,0,17,17,17,17,3,12,11,11,11,5,5,5,5,5,5,5,8,10,10,10,10,10,10,10,11,11,3,12,12,11,11,11,17,17,17,17,17,7,0,4,13,13,13,13,4,13,13,13,13,4,13,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,6,6,6,6,11,11,11,0,0,5,5,5,5,5,5,5,5,5,6,17,17,17,17,17,5,17,5,17,5,3,12,12,7,7,5,5,3,12,12,3,12,12,12,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,11,11,11,11,3,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,3,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,3,12,12,12,12,12,12,12,12,11,11,3,12,12,12,12,12,12,11,0,0,6,5,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["matrix","matrix_inner","split_borrow","Matrix","p","columns","vectors","pivot_vec","new","prime","rows","columns","initialize_pivots","pivots","pivots_mut","replace_pivots","take_pivots","set_pivots","from_rows","from_vec","to_vec","augmented_from_vec","add_identity","set_to_zero","assign","into_vec","as_slice_mut","slice_mut","iter","iter_mut","swap_rows","row_op","row_reduce","row_reduce_into_pivots","row_reduce_offset_into_pivots","find_pivots_permutation","row_reduce_permutation_into_pivots","find_first_row_in_block","find_first_row_in_block_with_pivots","compute_quasi_inverse","compute_quasi_inverses","get_image","extend_to_surjection","extend_image_to_desired_image","extend_image","apply","trim","AugmentedMatrix3","end","start","inner","new","segment","row_segment","into_matrix","AugmentedMatrix2","end","start","inner","new","segment","row_segment","into_matrix","compute_quasi_inverse","compute_kernel","compute_quasi_inverses","MatrixSliceMut","p","vectors","col_start","col_end","columns","rows","row_slice","iter","iter_mut","row","row_mut","row_op","add_identity","row_reduce_into_pivots","compute_kernel","quasi_inverse","QuasiInverse","image","preimage","prime","apply","subquotient","Subquotient","gens","quotient","dimension","new","new_full","reduce","set_to_zero","zeros","gens","quotient","dimension","ambient_dimension","prime","is_empty","clear_gens","add_gen","reduce_matrix","subquotient","subspace","Subspace","matrix","new","empty_space","entire_space","add_vector","add_vectors","add_basis_elements","reduce","shift_reduce","row_reduce","contains","dimension","ambient_dimension","basis","set_to_zero","set_to_entire","AugmentedMatrix2","end","start","inner","AugmentedMatrix3","end","start","inner","Matrix","p","columns","vectors","pivot_vec","MatrixSliceMut","p","vectors","col_start","col_end","QuasiInverse","image","preimage","Subquotient","gens","quotient","dimension","Subspace","matrix","prime","NUM_PRIMES","MAX_PRIME","NOT_A_PRIME","MAX_MULTINOMIAL_LEN","ValidPrime","p","new","try_new","value","is_valid_prime","inverse","minus_one_to_the_n","direct_binomial","integer_power","power_mod","logp","Binomial","multinomial2","binomial2","binomial4","binomial4_rec","multinomial_odd","binomial_odd","binomial_odd_is_zero","multinomial","binomial","BitflagIterator","remaining","flag","new","new_fixed_length","set_bit_iterator","PRIMES","PRIME_TO_INDEX_MAP","INVERSE_TABLE","BINOMIAL4_TABLE_SIZE","BINOMIAL4_TABLE","BINOMIAL_TABLE","vector","FpVector","_2","_3","_5","_7","Slice","_2","_3","_5","_7","SliceMut","_2","_3","_5","_7","FpVectorNonZeroIterator","_2","_3","_5","_7","new","from_slice","padded_dimension","prime","dimension","scale","set_to_zero","entry","set_entry","assign","add","slice","as_slice","slice_mut","as_slice_mut","is_zero","iter","iter_nonzero","extend_dimension","set_scratch_vector_size","add_basis_element","copy_from_slice","trim_start","add_truncate","sign_rule","add_carry","limbs","limbs_mut","prime","dimension","entry","iter","iter_nonzero","is_zero","slice","to_owned","prime","scale","set_to_zero","add","assign","set_entry","as_slice","slice_mut","add_basis_element","copy","add_tensor","next","vector_2","FpVector","Slice","SliceMut","FpVectorNonZeroIterator","new","from_slice","padded_dimension","vector_inner","limb","add","reduce","is_reduced","pack","unpack","number","range","sign_rule","truncate","Limb","BYTES_PER_LIMB","BITS_PER_LIMB","LIMBS_PER_SIMD","MAX_DIMENSION","BIT_LENGTHS","bit_length","BITMASKS","bitmask","ENTRIES_PER_LIMB","entries_per_limb","LimbBitIndexPair","limb","bit_index","LIMB_BIT_INDEX_TABLE","LIMB_BIT_INDEX_ONCE_TABLE","initialize_limb_bit_index_table","limb_bit_index_pair","FpVectorP","dimension","limbs","SliceP","limbs","start","end","SliceMutP","limbs","start","end","new_","dimension","prime","slice","slice_mut","as_slice","as_slice_mut","add_basis_element","entry","set_entry","iter","iter_nonzero","set_to_zero","scale","add","assign","is_zero","reduce_limbs","limbs","limbs_mut","extend_dimension","set_scratch_vector_size","copy_from_slice","trim_start","sign_rule","add_truncate","add_carry_limb","add_carry","slice_mut","as_slice","copy","slice","to_owned","prime","dimension","entry","iter","iter_nonzero","is_zero","offset","limb_range","min_limb_mask","max_limb_mask","limb_masks","prime","add_basis_element","set_entry","reduce_limbs","scale","set_to_zero","add","add_tensor","assign","add_shift_none","add_shift_left","add_shift_right","AddShiftNoneData","min_source_limb","min_target_limb","number_of_limbs","new","mask_first_limb","mask_middle_limb","mask_last_limb","AddShiftLeftData","offset_shift","tail_shift","zero_bits","min_source_limb","min_target_limb","number_of_source_limbs","number_of_target_limbs","min_mask","max_mask","new","mask_first_limb","mask_middle_limb_a","mask_middle_limb_b","mask_last_limb_a","mask_last_limb_b","AddShiftRightData","offset_shift","tail_shift","zero_bits","min_source_limb","min_target_limb","number_of_source_limbs","number_of_target_limbs","min_mask","max_mask","new","mask_first_limb_a","mask_first_limb_b","mask_middle_limb_a","mask_middle_limb_b","mask_last_limb_a","mask_last_limb_b","FpVectorIterator","limbs","bit_length","bit_mask","entries_per_limb_m_1","limb_index","entries_left","cur_limb","counter","new","skip_n","FpVectorNonZeroIteratorP","limbs","limb_index","cur_limb_entries_left","cur_limb","idx","dim","new","simd","x86_64","SimdLimb","load","store","xor","const_for","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","len","next","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","add_assign","add_assign","add_assign","mul_assign","index","index_mut","hash","hash","load","load","load","load","load","save","save","save","save","save","serialize","serialize","serialize","deserialize","deserialize","deserialize","new","from_slice","padded_dimension"],"q":["fp","fp::matrix","fp::matrix::matrix_inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix","fp::matrix::quasi_inverse","","","","","fp::matrix","fp::matrix::subquotient","","","","","","","","","","","","","","","","","","","fp::matrix","fp::matrix::subspace","","","","","","","","","","","","","","","","","fp::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","fp","fp::prime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp","fp::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp","fp::vector_2","","","","","","","fp","fp::vector_inner","fp::vector_inner::limb","","","","","","","","","fp::vector_inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp","fp::simd","fp::simd::x86_64","","","","fp","fp::matrix::matrix_inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::quasi_inverse","","","","","","","","","fp::matrix::subquotient","","","","","","","","","","fp::matrix::subspace","","","","","","","","","","fp::prime","","","","","","","","","","","","","","","","","","fp::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::vector_inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::prime","fp::vector","fp::vector_inner","","fp::matrix::matrix_inner","","","fp::matrix::quasi_inverse","fp::matrix::subquotient","fp::matrix::subspace","fp::prime","fp::vector","","fp::vector_inner","","","fp::matrix::matrix_inner","fp::matrix::quasi_inverse","","fp::matrix::subspace","","fp::prime","","fp::vector","","fp::vector_inner","","fp::matrix::matrix_inner","","","fp::matrix::subspace","fp::prime","fp::matrix::matrix_inner","","","fp::matrix::subspace","fp::matrix::matrix_inner","fp::matrix::quasi_inverse","fp::matrix::subspace","fp::prime","fp::vector","","","fp::vector_inner","","","fp::matrix::matrix_inner","fp::matrix::subquotient","fp::matrix::subspace","fp::prime","fp::vector","","fp","","fp::matrix::matrix_inner","fp::vector","fp","fp::matrix::matrix_inner","","","fp::vector","fp::vector_inner","fp::matrix::matrix_inner","fp::matrix::subspace","fp::matrix::quasi_inverse","fp::vector","fp","fp::matrix::matrix_inner","fp::matrix::subspace","fp::matrix::quasi_inverse","fp::vector","fp","fp::prime","fp::vector","fp","fp::prime","fp::vector","fp","fp::vector_inner","",""],"d":["","","Mutably borrows x[i] and x[j]. Caller needs to ensure i …","A matrix! In particular, a matrix with values in F_p. The …","","","","","Produces a new matrix over F_p with the specified number …","","Gets the number of rows in the matrix.","Gets the number of columns in the matrix.","","","","","","","Produces a matrix from a list of rows.","Produces a Matrix from an <code>&[Vec<u32>]</code> object. If the …","","Produces a padded augmented matrix from an <code>&[Vec<u32>]</code> …","","","","","","","","","","target and source must be distinct and less that …","Perform row reduction to reduce it to reduced row echelon …","","","This is very similar to row_reduce, except we only need …","","","","Computes the quasi-inverse of a matrix given a rref of […","This function computes quasi-inverses for matrices A, B …","","Given a matrix M in rref, add rows to make the matrix …","Given a matrix in rref, say [A|B|C], where B lies between …","Extends the image of a matrix to either the whole …","Applies a matrix to a vector.","","This models an augmented matrix.","","","","","","","","This models an augmented matrix.","","","","","","","","","","","","","","","","","","","","","","","target and source must be distinct and less that …","","","Computes the kernel from an augmented matrix in rref. To …","","Given a matrix M, a quasi-inverse Q is a map from the …","","","","Apply the quasi-inverse to an input vector and add a …","","","","","","Create a new subquotient of an ambient space of dimension …","Create a new subquotient of an ambient space of dimension …","Given a vector <code>elt</code>, project <code>elt</code> to the complement and …","","","","","","","","","","","","Given a chain of subspaces <code>subspace</code> < <code>space</code> < k^…","","A subspace of a vector space.","","","","","This adds a vector to the subspace. This function assumes …","","","Projects a vector to a complement of the subspace. The …","A version of <code>reduce</code> that doesn’t require the vectors to …","","","","","Returns a basis of the subspace.","Sets the subspace to be the zero subspace.","Sets the subspace to be the entire subspace.","This models an augmented matrix.","","","","This models an augmented matrix.","","","","A matrix! In particular, a matrix with values in F_p. The …","","","","","","","","","","Given a matrix M, a quasi-inverse Q is a map from the …","","","","","","","A subspace of a vector space.","","","","","","","","","","","Get the underlying prime. This is the same function as …","","","","This uses a lookup table for n choose k when n and k are …","Computes b^e.","Compute b^e mod p.","","A number satisfying the Binomial trait supports computing …","mod 2 multinomial coefficient","mod 2 binomial coefficient n choose k","Binomial coefficients mod 4. We pre-compute the …","Compute binomial coefficients mod 4 using the recursion …","Computes the multinomial coefficient mod p using Lucas’ …","Compute odd binomial coefficients mod p, where p is odd. …","Checks whether n choose k is zero mod p. Since we don’t …","Multinomial coefficient of the list l","Binomial coefficient n choose k.","","","","","","","","","","","","","This module is provides wrappers around the contents of […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This module replaces <code>vector</code> when <code>odd-primes</code> is disabled. …","","","","","","","","","","","Contbuted by Robert Burklund","","Given an interator of u32’s, pack all of them into a …","Given a limb, return the first <code>dim</code> entries. It is assumed …","","","","Returns: either Some(sum) if no carries happen in the …","","","","","","","","","TODO: Would it be simpler to just compute this at “…","","","","","","This table tells us which limb and which bitfield of that …","","","","An <code>FpVectorP</code> is a vector over $\\\\mathbb{F}_p$ for a fixed …","","","A SliceP is a slice of an FpVectorP. This immutably …","","","","A <code>SliceMutP</code> is a mutable slice of an <code>FpVectorP</code>. This …","","","","","","","","","","","","","","","","","","","","","","","","This function ensures the dimension of the vector is at …","This clears the vector and sets the dimension to dim. …","This replaces the contents of the vector with the …","Permanently remove the first <code>n</code> elements in the vector. <code>n</code> …","","","","","","","Generates a version of itself with a shorter lifetime","","Converts a slice to an owned FpVectorP. This assumes the …","","","","TODO: implement prime 2 version","","","","","","","","","","","","","","","<code>coeff</code> need not be reduced mod p. Adds v otimes w to self.","TODO: improve efficiency","Adds <code>c</code> * <code>other</code> to <code>self</code>. <code>other</code> must have the same length, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterator over non-zero entries of an FpVector. This is …i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,2,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,5,5,5,5,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,3,3,3,0,2,2,2,0,1,1,1,1,0,4,4,4,4,0,5,5,0,6,6,6,0,7,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,0,0,0,0,0,0,0,0,11,11,11,11,0,12,12,12,12,0,13,13,13,13,0,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,14,0,0,0,0,0,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,0,0,0,0,0,17,17,0,18,18,18,0,19,19,19,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,18,19,17,23,10,14,23,24,1,2,3,5,6,7,8,11,12,16,17,18,1,5,5,7,7,8,8,11,11,17,17,1,2,3,7,8,1,2,3,7,1,5,7,8,11,12,13,17,18,19,1,6,7,8,11,12,15,25,1,11,15,1,1,1,11,17,1,7,5,11,15,1,7,5,11,15,8,11,15,8,11,15,17,17,17],"f":[null,null,[[["usize",15]]],null,null,null,null,null,[[["usize",15],["validprime",3]],["matrix",3]],[[],["validprime",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["vec",3],["isize",15]],[["vec",3],["isize",15]]],[[],[["vec",3],["isize",15]]],[[["vec",3],["isize",15]]],[[["usize",15],["vec",3],["fpvector",4],["validprime",3]]],[[["validprime",3]],["matrix",3]],[[],[["vec",3],["vec",3]]],[[["validprime",3]]],[[["usize",15]]],[[]],[[["matrix",3]]],[[],[["vec",3],["fpvector",4]]],[[],["matrixslicemut",3]],[[["usize",15]],["matrixslicemut",3]],[[],[["iter",3],["fpvector",4]]],[[],[["itermut",3],["fpvector",4]]],[[["usize",15]]],[[["usize",15],["u32",15]]],[[]],[[["vec",3]]],[[["vec",3],["usize",15]]],[[["iterator",8]],[["usize",15],["vec",3]]],[[["vec",3]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["quasiinverse",3]],[[["usize",15]]],[[["usize",15]],["subspace",3]],[[["usize",15]],[["usize",15],["vec",3]]],[[["usize",15],["subspace",3]],[["usize",15],["vec",3]]],[[["usize",15],["option",4],["subspace",3]],[["usize",15],["vec",3]]],[[["slicemut",4],["u32",15],["slice",4]]],[[["usize",15]]],null,null,null,null,[[["usize",15],["validprime",3]]],[[["usize",15]],["matrixslicemut",3]],[[["usize",15]],["slicemut",4]],[[],["matrix",3]],null,null,null,null,[[["usize",15],["validprime",3]]],[[["usize",15]],["matrixslicemut",3]],[[["usize",15]],["slicemut",4]],[[],["matrix",3]],[[],["quasiinverse",3]],[[],["subspace",3]],[[["usize",15]]],null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["matrixslicemut",3]],[[]],[[]],[[["usize",15]],["slice",4]],[[["usize",15]],["slicemut",4]],[[["usize",15],["u32",15]]],[[["usize",15]]],[[["vec",3]]],[[["usize",15]],["subspace",3]],null,null,null,null,[[],["validprime",3]],[[["slicemut",4],["u32",15],["slice",4]]],null,null,null,null,null,[[["usize",15],["validprime",3]]],[[["usize",15],["validprime",3]]],[[["slicemut",4]],[["u32",15],["vec",3]]],[[]],[[],["subspace",3]],[[]],[[["slice",4]]],[[],["usize",15]],[[],["usize",15]],[[],["validprime",3]],[[],["bool",15]],[[]],[[["slice",4]]],[[["matrix",3]],[["vec",3],["vec",3]]],[[["usize",15],["option",4],["subspace",3]],[["usize",15],["vec",3]]],null,null,null,[[["usize",15],["validprime",3]]],[[["usize",15],["validprime",3]]],[[["usize",15],["validprime",3]]],[[["slice",4]]],[[]],[[]],[[["slicemut",4]]],[[["slicemut",4]]],[[]],[[["slice",4]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15]]],[[["u32",15]],["option",4]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[["u32",15],["validprime",3]],["u32",15]],[[["u32",15],["i32",15]],["u32",15]],[[["usize",15],["validprime",3]],["u32",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],null,[[]],[[]],[[]],[[]],[[["validprime",3]]],[[["validprime",3]]],[[["validprime",3]],["bool",15]],[[["validprime",3]]],[[["validprime",3]]],null,null,null,[[["u64",15]]],[[["usize",15],["u64",15]]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["validprime",3]],["fpvector",4]],[[["validprime",3]]],[[["usize",15],["validprime",3]],["usize",15]],[[],["validprime",3]],[[],["usize",15]],[[["u32",15]]],[[]],[[["usize",15]],["u32",15]],[[["usize",15],["u32",15]]],[[]],[[["u32",15]]],[[["usize",15]],["slice",4]],[[],["slice",4]],[[["usize",15]],["slicemut",4]],[[],["slicemut",4]],[[],["bool",15]],[[],["fpvectoriterator",3]],[[],["fpvectornonzeroiterator",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["u32",15]]],[[]],[[["usize",15]]],[[["u32",15]],["option",4]],[[],["bool",15]],[[["u32",15]],["bool",15]],[[]],[[]],[[],["validprime",3]],[[],["usize",15]],[[["usize",15]],["u32",15]],[[],["fpvectoriterator",3]],[[],["fpvectornonzeroiterator",4]],[[],["bool",15]],[[["usize",15]],["slice",4]],[[],["fpvector",4]],[[],["validprime",3]],[[["u32",15]]],[[]],[[["u32",15],["slice",4]]],[[["slice",4]]],[[["usize",15],["u32",15]]],[[],["slice",4]],[[["usize",15]],["slicemut",4]],[[["usize",15],["u32",15]]],[[],["slicemut",4]],[[["usize",15],["u32",15],["slice",4]]],[[],["option",4]],null,null,null,null,null,[[["usize",15],["validprime",3]],["fpvector",6]],[[["validprime",3]]],[[["usize",15],["validprime",3]],["usize",15]],null,null,[[["u32",15],["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["bool",15]],[[["iterator",8]],["u64",15]],[[["usize",15],["u64",15]]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["u64",15]],["u32",15]],[[["u64",15]],[["option",4],["u64",15]]],null,null,null,null,null,null,[[["validprime",3]],["usize",15]],null,[[["validprime",3]],["u64",15]],null,[[["validprime",3]],["usize",15]],null,null,null,null,null,[[["validprime",3]]],[[["usize",15],["validprime",3]],["limbbitindexpair",3]],null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[],["usize",15]],[[],["validprime",3]],[[["usize",15]],["slicep",3]],[[["usize",15]],["slicemutp",3]],[[],["slicep",3]],[[],["slicemutp",3]],[[["usize",15],["u32",15]]],[[["usize",15]],["u32",15]],[[["usize",15],["u32",15]]],[[],["fpvectoriterator",3]],[[],["fpvectornonzeroiteratorp",3]],[[]],[[["u32",15]]],[[["u32",15],["fpvectorp",3]]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["bool",15]],[[["u32",15]],["option",4]],[[["usize",15],["u32",15],["u64",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["usize",15]],["slicemutp",3]],[[],["slicep",3]],[[],["slicemutp",3]],[[["usize",15]],["slicep",3]],[[],["fpvectorp",3]],[[],["validprime",3]],[[],["usize",15]],[[["usize",15]],["u32",15]],[[],["fpvectoriterator",3]],[[],["fpvectornonzeroiteratorp",3]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["validprime",3]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[]],[[["u32",15]]],[[]],[[["u32",15],["slicep",3]]],[[["usize",15],["u32",15],["slicep",3]]],[[["slicep",3]]],[[["u32",15],["slicep",3]]],[[["u32",15],["slicep",3]]],[[["u32",15],["slicep",3]]],null,null,null,null,[[["slicep",3]]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],null,null,null,null,null,null,null,null,null,null,[[["slicep",3]]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],null,null,null,null,null,null,null,null,null,null,[[["slicep",3]]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],[[["usize",15],["slicep",3]],["u64",15]],null,null,null,null,null,null,null,null,null,[[["slicep",3]]],[[["usize",15]]],null,null,null,null,null,null,null,[[["slicep",3]]],null,null,null,[[],["u64",15]],[[["u64",15]]],[[["u64",15]],["u64",15]],null,[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["fpvectorp",3]]],[[["fpvectorp",3]]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["matrix",3]],[[],["augmentedmatrix3",3]],[[],["augmentedmatrix2",3]],[[],["quasiinverse",3]],[[],["subquotient",3]],[[],["subspace",3]],[[],["validprime",3]],[[],["fpvector",4]],[[],["slice",4]],[[],["limbbitindexpair",3]],[[],["fpvectorp",3]],[[],["slicep",3]],[[],["bool",15]],[[["quasiinverse",3]],["bool",15]],[[["quasiinverse",3]],["bool",15]],[[["subspace",3]],["bool",15]],[[["subspace",3]],["bool",15]],[[["validprime",3]],["bool",15]],[[["validprime",3]],["bool",15]],[[["fpvector",4]],["bool",15]],[[["fpvector",4]],["bool",15]],[[["fpvectorp",3]],["bool",15]],[[["fpvectorp",3]],["bool",15]],[[]],[[],["matrix",3]],[[],["matrix",3]],[[],["matrix",3]],[[]],[[]],[[],["matrix",3]],[[],["matrix",3]],[[],["matrix",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["matrix",3]]],[[["fpvector",4]]],[[["fpvector",6]]],[[["u32",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["validprime",3]],["result",6]],[[["validprime",3]],["result",6]],[[["validprime",3]],["result",6]],[[["validprime",3]],["result",6]],[[["validprime",3]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["validprime",3]],["fpvector",6]],[[["validprime",3]]],[[["usize",15],["validprime",3]],["usize",15]]],"p":[[3,"Matrix"],[3,"AugmentedMatrix3"],[3,"AugmentedMatrix2"],[3,"MatrixSliceMut"],[3,"QuasiInverse"],[3,"Subquotient"],[3,"Subspace"],[3,"ValidPrime"],[8,"Binomial"],[3,"BitflagIterator"],[4,"FpVector"],[4,"Slice"],[4,"SliceMut"],[4,"FpVectorNonZeroIterator"],[6,"FpVector"],[3,"LimbBitIndexPair"],[3,"FpVectorP"],[3,"SliceP"],[3,"SliceMutP"],[3,"AddShiftNoneData"],[3,"AddShiftLeftData"],[3,"AddShiftRightData"],[3,"FpVectorIterator"],[3,"FpVectorNonZeroIteratorP"],[6,"Slice"]]},\
"once":{"doc":"","t":[17,17,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["USIZE_LEN","MAX_OUTER_LENGTH","OnceVec","len","lock","data","into_vec","from_vec","new","with_capacity","reserve","len","is_empty","get","last","inner_index","get_inner","push","iter","OnceBiVec","data","min_degree","new","from_vec","from_bivec","with_capacity","min_degree","max_degree","len","is_empty","push","get","last","iter","iter_enum","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_iter","clone","clone","default","eq","eq","ne","fmt","fmt","index","index","index","index_mut","index_mut","index_mut","load","load","save","save"],"q":["once","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The maximum length of a OnceVec is 2^{MAX_OUTER_LENGTH} - …","A OnceVec is a push-only vector which is (hopefully) …","","","","","Creates a OnceVec from a Vec.","","Since OnceVec never reallocates, with_capacity is the …","Since OnceVec never reallocates, reserve is a noop. …","All data up to length self.len() are guaranteed to be …","","","","","","","","","","","","","","","","This returns the largest degree in the bivector. This is …","This returns the “length” of the bivector, defined to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,2,1,1,2,2,1,2,1,1,2,1,1,2,1,2,1,2],"f":[null,null,null,null,null,null,[[],["vec",3]],[[["vec",3]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["bool",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[]],null,null,null,[[["i32",15]]],[[["vec",3],["i32",15]]],[[["bivec",3]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["bool",15]],[[]],[[["i32",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["oncebivec",3]],[[]],[[["oncevec",3]],["bool",15]],[[["oncebivec",3]],["bool",15]],[[["oncebivec",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["u32",15]]],[[["i32",15]]],[[["usize",15]]],[[["u32",15]]],[[["i32",15]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]]],"p":[[3,"OnceVec"],[3,"OnceBiVec"]]},\
"query":{"doc":"","t":[5,5,5,5],"n":["query_optional","query","query_with_default","query_yes_no"],"q":["query","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[["str",15]],[["option",4],["display",8]]],[[["str",15]],["display",8]],[[["str",15]],["display",8]],[[["str",15]],["bool",15]]],"p":[]},\
"saveload":{"doc":"This crate provides a simple interface for saving and …","t":[0,8,10,8,16,10],"n":["default_impl","Save","save","Load","AuxData","load"],"q":["saveload","","","","",""],"d":["","","Example","","The type of the auxiliary data needed for loading.","The auxiliary data is a borrow. This is useful for <code>Vec<T></code> …"],"i":[0,0,1,0,2,2],"f":[null,null,[[],["result",6]],null,null,[[],["result",6]]],"p":[[8,"Save"],[8,"Load"]]},\
"thread_token":{"doc":"","t":[3,12,12,12,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["TokenBucket","max_threads","running_threads","condvar","new","take_token","recv_or_release","recv2_or_release","release_token","Token","bucket","release","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","drop"],"q":["thread_token","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>TokenBucket</code> is a bucket containing a fixed number of “…","","","","Constructs a new <code>TokenBucket</code> with a fixed number of …","Attempts to take a token from the bucket. This will block …","This function attempts to read a message from <code>receiver</code> …","This function attempts to read a message from <code>receiver</code> …","","A <code>Token</code> is what <code>TokenBucket::take_token</code> returns. The …","","This function does not do anything. It simply takes …","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,0,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2],"f":[null,null,null,null,[[["usize",15]]],[[],["token",3]],[[["option",4],["token",3]],["token",3]],[[["option",4],["token",3]],["token",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"TokenBucket"],[3,"Token"]]}\
}');
initSearch(searchIndex);
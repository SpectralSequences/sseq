var searchIndex = JSON.parse('{\
"algebra":{"doc":"Types and traits for working with various algebras and …","t":[13,3,13,8,8,4,8,13,13,3,8,13,3,13,8,8,3,3,4,4,8,0,10,0,10,12,12,10,10,12,12,0,10,10,10,10,10,12,10,14,12,12,12,10,10,0,10,10,10,12,12,12,12,12,0,10,0,5,12,12,12,10,12,12,0,12,10,10,12,10,10,12,12,12,10,10,12,10,0,0,12,12,11,12,12,12,12,3,8,3,13,13,4,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,3,8,3,13,13,4,11,10,11,5,5,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,12,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,8,10,10,10,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,8,10,10,17,3,17,3,17,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,5,11,11,12,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,11,5,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,17,12,3,3,8,3,6,3,6,3,6,3,3,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,12,11,11,11,11,12,11,12,12,12,5,12,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,16,6,3,8,17,10,5,5,11,11,12,11,11,11,10,10,10,11,11,11,11,11,10,12,10,11,11,10,14,11,11,12,11,14,12,8,3,3,10,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,12,10,10,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,13,13,3,4,13,13,13,13,4,4,8,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,17,3,3,5,12,12,5,12,12,12,12,12,12,12,5,5,3,12,12,3,8,3,3,6,3,6,3,3,12,12,12,12,12,12,12,12,12,12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,16,3,3,3,3,3,8,3,3,3,3,3,8,10,12,10,12,12,12,12,12,10,12,0,12,12,12,10,12,0,0,0,12,12,12,12,12,12,12,12,12,0,0,12,12,12,12,10,12,10,12,12,12,0,12,12,12,12,12,12,0,12,12,12,0,12,12,0,12,12,0,12,12,0,10,3,3,3,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,11,11,11,11,12,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,12,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,18,3,3,3,3,8,8,3,3,16,16,8,11,11,10,11,11,10,12,12,12,12,12,0,0,0,11,11,0,10,11,12,12,12,11,12,12,12,12,12,11,12,12,11,11,12,12,12,0,12,12,10,12,12,12,12,12,10,12,12,12,12,10,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,12,11,12,11,11,11,11,12,11,12,11,11,11,11,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,12,11,11,11,12,11,12,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,12,11,12,11,12,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,16,8,3,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,12,11,11,11,11,11,11,12,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,11,11,11,3,3,11,11,12,11,11,11,11,11,12,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,6,5,0,5,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,8,10,16,3,8,10,12,10,10,10,10,12,10,10,12,12,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,13,4,4,13,13,4,6,6,13,13,13,13,13,13,13,5,5,5,5,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12],"n":["Adem","AdemAlgebra","AdemAlgebra","AdemAlgebraT","Algebra","AlgebraType","Bialgebra","BorrowAdem","BorrowMilnor","Field","GeneratedAlgebra","Milnor","MilnorAlgebra","MilnorAlgebra","MilnorAlgebraT","PolynomialAlgebra","PolynomialAlgebraMonomial","PolynomialAlgebraTableEntry","SteenrodAlgebra","SteenrodAlgebraBorrow","SteenrodAlgebraT","adem_algebra","adem_algebra","algebra","basis_element_from_string","basis_element_to_index_map","basis_element_to_index_map","basis_element_to_string","basis_table","basis_table","basis_table","combinatorics","compute_basis","compute_generating_set","coproduct","decompose","decompose_basis_element","degree","dimension","dispatch_algebra","even_basis_table","excess_table","ext","exterior_generators_in_degree","exterior_monomials","field","frobenius_on_generator","generating_relations","generators","generic","generic","index_to_monomial","lock","lock","milnor_algebra","milnor_algebra","module","module_gens_from_json","monomial_to_index","multiplication_table","multiplication_table","multiply_basis_elements","p","p","pair_algebra","poly","polynomial_generators_in_degree","polynomial_monomials","ppart_table","prime","prime","prime","profile","qpart_table","repr_ext_generator","repr_poly_generator","sort_order","steenrod_algebra","steenrod_evaluator","steenrod_parser","unstable_enabled","valid","zero_module","0","0","0","0","AdemAlgebra","AdemAlgebraT","AdemBasisElement","Bockstein","P","PorBockstein","adem_algebra","basis_element_to_index_map","basis_table","bocksteins","degree","even_basis_table","excess","excess_table","generic","lock","multiplication_table","p","p_or_sq","ps","sort_order","unstable_enabled","0","0","adem_algebra","algebra_trait","bialgebra_trait","combinatorics","field","milnor_algebra","pair_algebra","polynomial_algebra","steenrod_algebra","AdemAlgebra","AdemAlgebraT","AdemBasisElement","Bockstein","P","PorBockstein","a_multiply","adem_algebra","adem_algebra","adem_basis_element_excess_sort_order","adem_basis_element_length_sort_order","basis_element_from_index","basis_element_from_string","basis_element_to_index","basis_element_to_index_map","basis_element_to_string","basis_table","beps_pn","bocksteins","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_basis","coproduct","decompose","decompose_basis_element","decompose_basis_element_2","decompose_basis_element_generic","default_filtration_one_products","degree","deref","deref","deref","deref_mut","deref_mut","deref_mut","dimension","dimension_unstable","drop","drop","drop","element_from_bytes","element_is_zero","element_to_bytes","eq","equivalent","even_basis_table","excess","excess_table","finalize_element","fmt","fmt","fmt","fmt","from","from","from","generate_basis2","generate_basis_element_to_index_map","generate_basis_even","generate_basis_even_degreen","generate_basis_generic","generate_basis_generic_degreen","generate_excess_table","generate_multiplication_table_2","generate_multiplication_table_2_step","generate_multiplication_table_generic","generate_multiplication_table_generic_step","generating_relations","generator_to_string","generators","generic","generic","get_hash","hash","init","init","init","into","into","into","iter_filtered","lock","magic","make_mono_admissible","make_mono_admissible_2","make_mono_admissible_generic","multiplication_table","multiply_basis_elements","multiply_basis_elements_unstable","multiply_unstable","new","new_pair_element","p","p_or_sq","p_tilde","prefix","prime","ps","q","shift_vec","sigma_multiply_basis","sort_order","tail_of_basis_element_to_index","to_owned","to_string","to_string","try_basis_element_to_index","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unstable_enabled","0","0","Algebra","GeneratedAlgebra","basis_element_from_string","basis_element_to_string","compute_basis","decompose_basis_element","default_filtration_one_products","default_filtration_one_products","dimension","element_to_string","element_to_string","generating_relations","generator_to_string","generator_to_string","generators","magic","magic","multiply_basis_element_by_element","multiply_basis_element_by_element","multiply_basis_elements","multiply_element_by_basis_element","multiply_element_by_basis_element","multiply_element_by_element","multiply_element_by_element","prefix","prefix","prime","Bialgebra","coproduct","decompose","MAX_XI_TAU","PartitionIterator","TAU_DEGREES","TruncatedPolynomialMonomialBasis","XI_DEGREES","add_gens_and_calculate_parts","adem_relation_coefficient","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","gen_deg_idx_to_internal_idx","gen_degrees","generators","generators_up_to_degree","gens","inadmissible_pairs","init","init","initial","internal_idx_to_gen_deg","into","into","into_iter","multiunzip","new","new","next","p","partition","parts","parts","parts","parts_by_max","remaining","search","tau_degrees","try_from","try_from","try_into","try_into","type_id","type_id","xi_degrees","Field","basis_element_from_string","basis_element_to_string","borrow","borrow_mut","compute_basis","coproduct","decompose","default_filtration_one_products","deref","deref_mut","dimension","drop","element_to_string","fmt","from","init","into","multiply_basis_elements","new","prime","prime","to_string","try_from","try_into","type_id","ALLOCATION","M","Matrix2D","MilnorAlgebra","MilnorAlgebraT","MilnorBasisElement","MilnorHashMap","MilnorProfile","PPart","PPartAllocation","PPartEntry","PPartMultiplier","QPart","a_multiply","ans","basis_element_from_index","basis_element_from_string","basis_element_to_index","basis_element_to_index_map","basis_element_to_string","basis_table","beps_pn","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_into","cols","cols","compute_basis","compute_degree","compute_ppart","compute_qpart","coproduct","decompose","decompose_basis_element","decompose_basis_element_ppart","decompose_basis_element_qpart","default","default","default","default","default","default_filtration_one_products","degree","degree","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","diag_num","diagonal","diagonal","dimension","drop","drop","drop","drop","drop","drop","drop","element_from_bytes","element_is_zero","element_to_bytes","eq","eq","equivalent","equivalent","finalize_element","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_p","generate_basis_2","generate_basis_generic","generating_relations","generator_to_string","generators","generic","generic","get_hash","get_p_part","hash","increment_p_part","index","index_mut","init","init","init","init","init","init","init","init","inner","into","into","into","into","into","into","into","into_allocation","into_iter","is_an","is_trivial","is_valid","lock","m","magic","milnor_algebra","milnor_algebra","multiplication_table","multiply","multiply_basis_by_element","multiply_basis_by_element_with_allocation","multiply_basis_element_by_element","multiply_basis_elements","multiply_element_by_element","multiply_qpart","multiply_with_allocation","ne","new","new_from_allocation","new_pair_element","new_with_profile","next","next_val","p","p","p_part","p_part","p_part","p_tilde","ppart_table","ppart_table","prefix","prime","prime","profile","profile","q","q_part","q_part","q_part","q_part_default","qpart_table","r","reset","rows","serialize","sigma_multiply_basis","to_owned","to_owned","to_string","to_string","to_string","truncated","try_basis_element_to_index","try_beps_pn","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","with_capacity","with_capacity","with_local","AY_CACHE","Element","HashMap","MilnorPairElement","PairAlgebra","TWO","a_multiply","a_y_cached","a_y_inner","borrow","borrow_mut","degree","deref","deref_mut","drop","element_from_bytes","element_is_zero","element_to_bytes","finalize_element","finalize_element","from","init","into","new_pair_element","ones","p_tilde","sigma_multiply","sigma_multiply","sigma_multiply_basis","sub","try_from","try_into","twos","type_id","unsub","ys","PolynomialAlgebra","PolynomialAlgebraMonomial","PolynomialAlgebraTableEntry","basis_table","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compute_basis_step","compute_basis_step","compute_generating_set","default","degree","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","ext","exterior_generators_in_degree","exterior_monomials","fmt","fmt","frobenius_monomial","frobenius_monomial","frobenius_on_generator","from","from","get_hash","hash","index_to_monomial","index_to_monomial","index_to_monomial","init","init","into","into","max_computed_degree","max_computed_degree","min_degree","min_degree","monomial_to_index","monomial_to_index","monomial_to_index","multiply_monomial_by_polynomial","multiply_monomial_by_polynomial","multiply_monomials","multiply_monomials","multiply_polynomial_by_monomial","multiply_polynomial_by_monomial","multiply_polynomials","multiply_polynomials","ne","new","new","poly","polynomial_generators_in_degree","polynomial_monomials","prime","repr_ext_generator","repr_poly_generator","set_monomial_degree","set_monomial_degree","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","valid","Adem","AdemAlgebra","AlgebraSpec","AlgebraType","BorrowAdem","BorrowMilnor","Milnor","MilnorAlgebra","SteenrodAlgebra","SteenrodAlgebraBorrow","SteenrodAlgebraT","a_multiply","algebra","basis_element_from_string","basis_element_to_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_basis","coproduct","decompose","decompose_basis_element","default_filtration_one_products","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","dimension","dispatch_steenrod","drop","drop","drop","drop","element_from_bytes","element_is_zero","element_to_bytes","element_to_string","eq","equivalent","finalize_element","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_json","from_str","generating_relations","generator_to_string","generators","init","init","init","init","into","into","into","into","magic","multiply_basis_element_by_element","multiply_basis_elements","multiply_element_by_basis_element","multiply_element_by_element","new_pair_element","p","p_tilde","prefix","prime","profile","sigma_multiply","sigma_multiply_basis","steenrod_algebra","steenrod_algebra","to_json","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","MAX_XI_TAU","PartitionIterator","TruncatedPolynomialMonomialBasis","adem_relation_coefficient","gen_degrees","gens","inadmissible_pairs","initial","p","partition","parts","parts","parts_by_max","remaining","tau_degrees","xi_degrees","Field","prime","M","MilnorAlgebra","MilnorAlgebraT","MilnorBasisElement","MilnorProfile","PPart","PPartAllocation","PPartEntry","PPartMultiplier","QPart","ans","basis_element_to_index_map","basis_table","cols","degree","degree","diag_num","diagonal","diagonal","generic","init","lock","m","milnor_algebra","multiplication_table","p","p","p_part","p_part","p_part","ppart_table","profile","q_part","q_part","q_part","qpart_table","r","rows","truncated","Algebra","FDModule","FPModule","FreeModule","GeneratorData","HomModule","Module","ModuleFailedRelationError","OperationGeneratorPair","QuotientModule","RealProjectiveSpace","TensorModule","ZeroModule","act_on_basis","actions","algebra","algebra","algebra","algebra","algebra","basis_element_to_opgen","basis_element_to_string","basis_list","block_structure","block_structures","block_structures","clear_bottom","dimension","end","finite_dimensional_module","finitely_presented_module","free_module","gen_deg","gen_deg_idx_to_internal_idx","gen_names","gen_names","generator_degree","generator_index","generator_to_index","generators","graded_dimension","hom_module","homomorphism","index_table","left","map","max","max_computed_degree","min","min_degree","min_degree","min_degree","module","module_trait","name","name","name","num_gens","operation_degree","operation_index","quotient_module","relation","relations","right","rpn","source","start","steenrod_module","subspaces","target","tensor_module","truncation","value","zero_module","zero_module","BlockStart","BlockStructure","GeneratorBasisEltPair","add_block","basis_element_to_block_idx","basis_index","block_size","block_start_index","block_starts","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","generator_basis_elt_to_index","generator_degree","generator_index","generator_to_block","index_to_generator_basis_elt","init","init","init","into","into","into","new","total_dimension","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","FiniteDimensionalModule","act_on_basis","action","action_mut","actions","actions_to_json","add_generator","algebra","algebra","allocate_actions","basis_element_to_string","borrow","borrow_mut","check_validity","clone","clone_into","compute_basis","deref","deref_mut","dimension","drop","eq","equivalent","extend_actions","fmt","from","from","from_json","gen_names","graded_dimension","init","into","max_computed_degree","max_degree","min_degree","name","new","parse_action","set_action","set_basis_element_name","string_to_basis_element","test_equal","to_json","to_owned","to_string","try_from","try_into","type_id","zero_module","FPMIndexTable","FinitelyPresentedModule","act_on_basis","add_generators","add_relations","algebra","basis_element_to_string","borrow","borrow","borrow_mut","borrow_mut","compute_basis","deref","deref","deref_mut","deref_mut","dimension","drop","drop","eq","equivalent","fmt","fp_idx_to_gen_idx","fp_idx_to_gen_idx","from","from","from_json","gen_idx_to_fp_idx","gen_idx_to_fp_idx","generators","generators","index_table","init","init","into","into","map","max_computed_degree","max_generator_degree","min_degree","min_degree","name","new","relations","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","FreeModule","GeneratorData","OffsetIterator","OperationGeneratorPair","act","act_on_basis","add_generators","algebra","algebra","basis_element_to_opgen","basis_element_to_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_basis","degree","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dimension","drop","drop","drop","drop","element_to_string_pretty","end","extend_by_zero","fmt","fmt","from","from","from","from","gen_deg","gen_deg","gen_deg_idx_to_internal_idx","gen_names","gen_names","generator_degree","generator_index","generator_offset","generator_to_index","generator_to_internal_index","get_degrees_with_gens","get_max_generator_degree","index_to_op_gen","init","init","init","init","internal_generator_offset","into","into","into","into","into_iter","iter_gen_offsets","iter_gens","iter_slices","max_computed_degree","min_degree","min_degree","module","name","new","next","num_gens","number_of_gens_in_degree","offset","operation_degree","operation_generator_pair_to_idx","operation_generator_to_index","operation_index","slice_vector","start","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zero_module","HomModule","act_on_basis","algebra","algebra","basis_element_to_string","block_structures","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","element_to_homomorphism","evaluate_basis_map_on_element","fmt","from","init","into","max_computed_degree","min_degree","new","source","source","target","target","to_string","try_from","try_into","type_id","CUSTOM_QI","FreeModuleHomomorphism","FullModuleHomomorphism","GenericZeroHomomorphism","HomPullback","IdentityHomomorphism","ModuleHomomorphism","QuotientHomomorphism","QuotientHomomorphismSource","Source","Target","ZeroHomomorphism","apply","apply_quasi_inverse","apply_to_basis_element","auxiliary_data","compute_auxiliary_data_through_degree","degree_shift","degree_shift","degree_shift","degree_shift","f","f","free_module_homomorphism","full_module_homomorphism","generic_zero_homomorphism","get_matrix","get_partial_matrix","hom_pullback","identity_homomorphism","image","images","images","images","kernel","kernels","kernels","kernels","map","matrices","min_degree","min_degree","outputs","prime","quasi_inverse","quasi_inverses","quasi_inverses","quasi_inverses","quotient_homomorphism","s","s","source","source","source","source","source","t","target","target","target","target","target","zero_homomorphism","FreeModuleHomomorphism","add_generators_from_big_vector","add_generators_from_matrix_rows","add_generators_from_rows","add_generators_from_rows_ooo","apply_to_basis_element","apply_to_generator","borrow","borrow_mut","compute_auxiliary_data_through_degree","degree_shift","degree_shift","degree_shift","deref","deref_mut","differential_density","drop","extend_by_zero","from","hom_k","image","images","init","into","kernel","kernels","min_degree","min_degree","new","next_degree","ooo_outputs","output","outputs","quasi_inverse","quasi_inverses","set_image","set_kernel","set_quasi_inverse","source","source","target","target","try_from","try_into","type_id","zero_homomorphism","FullModuleHomomorphism","apply_to_basis_element","borrow","borrow_mut","clone","clone_into","compute_auxiliary_data_through_degree","degree_shift","degree_shift","deref","deref_mut","drop","from","from","from_matrices","identity_homomorphism","image","images","init","into","kernel","kernels","matrices","new","quasi_inverse","quasi_inverses","replace_source","replace_target","source","source","target","target","to_owned","try_from","try_into","type_id","zero_homomorphism","GenericZeroHomomorphism","apply_to_basis_element","borrow","borrow_mut","degree_shift","degree_shift","deref","deref_mut","drop","from","init","into","new","source","source","target","target","try_from","try_into","type_id","zero_homomorphism","HomPullback","apply_to_basis_element","borrow","borrow_mut","compute_auxiliary_data_through_degree","degree_shift","deref","deref_mut","drop","from","image","images","init","into","kernel","kernels","map","min_degree","new","quasi_inverse","quasi_inverses","source","source","target","target","try_from","try_into","type_id","QuotientHomomorphism","QuotientHomomorphismSource","apply_to_basis_element","apply_to_basis_element","borrow","borrow","borrow_mut","borrow_mut","degree_shift","degree_shift","deref","deref","deref_mut","deref_mut","drop","drop","f","f","from","from","init","init","into","into","new","new","s","s","source","source","t","target","target","try_from","try_from","try_into","try_into","type_id","type_id","Algebra","Module","ModuleFailedRelationError","act","act","act_by_element","act_by_element","act_by_element_on_basis","act_by_element_on_basis","act_on_basis","algebra","basis_element_to_string","borrow","borrow_mut","compute_basis","compute_basis","deref","deref_mut","dimension","drop","element_to_string","element_to_string","fmt","fmt","from","init","into","is_unit","is_unit","max_computed_degree","max_degree","max_degree","max_generator_degree","max_generator_degree","min_degree","prime","prime","relation","to_string","total_dimension","total_dimension","try_from","try_into","type_id","value","QuotientModule","act_on_basis","act_on_original_basis","algebra","basis_element_to_string","basis_list","borrow","borrow_mut","deref","deref_mut","dimension","drop","flush","fmt","from","init","into","max_computed_degree","max_degree","min_degree","module","new","old_basis_to_new","quotient","quotient_all","quotient_basis_elements","quotient_vectors","reduce","subspaces","to_string","truncation","try_from","try_into","type_id","zero_module","RPSpec","RealProjectiveSpace","act_on_basis","algebra","algebra","basis_element_to_string","borrow","borrow","borrow_mut","borrow_mut","clear_bottom","clear_bottom","coef_adem","coef_milnor","deref","deref","deref_mut","deref_mut","deserialize","dimension","drop","drop","eq","equivalent","fmt","fmt","from","from","from_json","init","init","into","into","max","max","max_computed_degree","max_degree","min","min","min_degree","new","to_json","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","SteenrodModule","from_json","json","from_json","TensorModule","act","act_helper","act_on_basis","algebra","basis_element_to_string","block_structures","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","fmt","from","init","into","left","max_computed_degree","max_degree","min_degree","new","offset","right","seek_module_num","to_string","try_from","try_into","type_id","zero_module","ZeroModule","zero_module","Element","MilnorPairElement","PairAlgebra","a_multiply","degree","element_from_bytes","element_is_zero","element_to_bytes","new_pair_element","ones","p_tilde","sigma_multiply_basis","twos","ys","SteenrodEvaluator","adem","adem_q","adem_to_milnor","adem_to_milnor_on_basis","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","evaluate_algebra_adem","evaluate_algebra_milnor","evaluate_algebra_node","evaluate_basis_element","evaluate_module_adem","evaluate_p_or_b_list","from","init","into","milnor","milnor_to_adem","milnor_to_adem_on_basis","milnor_to_adem_on_basis_2","milnor_to_adem_on_basis_generic","new","prime","try_from","try_into","type_id","AList","AlgebraBasisElt","AlgebraNode","BasisElt","Bockstein","BocksteinOrSq","IResult","ModuleNode","P","PList","Product","Q","Scalar","Sq","Sum","algebra_expr","algebra_factor","algebra_generator","algebra_term","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","brackets","clone","clone","clone","clone_into","clone_into","clone_into","convert_error","deref","deref","deref","deref_mut","deref_mut","deref_mut","digits","drop","drop","drop","fmt","fmt","fmt","fold_separated","from","from","from","init","init","init","into","into","into","module_expr","module_generator","module_term","p_or_sq","parse_algebra","parse_module","scalar","space","to_adem_basis_elt","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","0","0","0","0","1","1","0"],"q":["algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::SteenrodAlgebra","","algebra::SteenrodAlgebraBorrow","","algebra::adem_algebra","","","","","","","","","","","","","","","","","","","","","","algebra::adem_algebra::PorBockstein","","algebra::algebra","","","","","","","","","algebra::algebra::adem_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::adem_algebra::PorBockstein","","algebra::algebra::algebra_trait","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::bialgebra_trait","","","algebra::algebra::combinatorics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::field","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::milnor_algebraalgebra::algebra::pair_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::polynomial_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::steenrod_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::steenrod_algebra::SteenrodAlgebra","","algebra::algebra::steenrod_algebra::SteenrodAlgebraBorrow","","algebra::combinatorics","","","","","","","","","","","","","","","","algebra::field","","algebra::milnor_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::block_structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::finite_dimensional_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::finitely_presented_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::free_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::hom_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::free_module_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::full_module_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::generic_zero_homomorphism","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::hom_pullback","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::quotient_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::module_trait","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::quotient_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::rpn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::steenrod_module","","","algebra::module::steenrod_module::json","algebra::module::tensor_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::zero_module","","algebra::pair_algebra","","","","","","","","","","","","","","algebra::steenrod_evaluator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::steenrod_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::steenrod_parser::AlgebraBasisElt","","","","algebra::steenrod_parser::AlgebraNode","","","","","","algebra::steenrod_parser::BocksteinOrSq"],"d":["","An <code>Algebra</code> implementing the Steenrod algebra, using the …","","An algebra that can be viewed as an Adem algebra.","A graded algebra over $\\\\mathbb{F}_p$.","","An <code>Algebra</code> equipped with a coproduct operation that makes …","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","An <code>Algebra</code> equipped with a distinguished presentation.","","","","","","","","","","","The Steenrod algebra using the Adem basis.","","Traits describing algebras, and implementations thereof …","Converts a string to a basis element. This must be a …","degree -&gt; AdemBasisElement -&gt; index","","Converts a basis element into a string for display.","","degree -&gt; index -&gt; AdemBasisElement","","","Computes basis elements up to and including <code>degree</code>.","","Computes a coproduct $\\\\Delta(x)$, expressed as","Decomposes an element of the algebra into a product of …","Decomposes an element into generators.","","Returns the dimension of the algebra in degree <code>degree</code>.","","","","","","","Finite fields over a prime.","","Returns relations that the algebra wants checked to ensure …","Return generators in <code>degree</code>.","","","","","","","","","","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","","Computes the product <code>r * s</code> of two basis elements, and adds …","","","This implements the notion of a split pair algebra in the …","","","","","Returns the prime the algebra is over.","","","","","","","","","","This module includes code for parsing an expression in the …","","","","","","","","An <code>Algebra</code> implementing the Steenrod algebra, using the …","An algebra that can be viewed as an Adem algebra.","An Adem basis element for the Steenrod algebra.","","","A Steenrod power $P^i$, or a Bockstein $\\\\beta^\\\\varepsilon$.","","degree -&gt; AdemBasisElement -&gt; index","degree -&gt; index -&gt; AdemBasisElement","A bitset of which $\\\\beta$ Bocksteins are in the element’…","The degree of the element.","","The excess (i.e., distance from this element being …","","","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","","Whether to denote the generators as powers $P^i$ or …","A list of which Steenrod powers are in the element’s …","","","","","The Steenrod algebra using the Adem basis.","","","","Finite fields over a prime.","","This implements the notion of a split pair algebra in the …","","","An <code>Algebra</code> implementing the Steenrod algebra, using the …","An algebra that can be viewed as an Adem algebra.","An Adem basis element for the Steenrod algebra.","","","A Steenrod power $P^i$, or a Bockstein $\\\\beta^\\\\varepsilon$.","","","","","","","","","degree -&gt; AdemBasisElement -&gt; index","","degree -&gt; index -&gt; AdemBasisElement","","A bitset of which $\\\\beta$ Bocksteins are in the element’…","","","","","","","","","","","","","","","","The degree of the element.","","","","","","","","","","","","","","","","","","The excess (i.e., distance from this element being …","","","","","","","","","","","","","","","","","","","","This function expresses $Sq^x$ (current) in terms of the …","We return Adem relations $b^2 = 0$, $P^i P^j = \\\\cdots$ for …","","","","","","","","","","","","","Returns an iterator over the element’s decomposition.","","","","Reduce a Steenrod monomial at the prime 2.","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","","","","Constructs a new <code>AdemAlgebra</code>.","","","Whether to denote the generators as powers $P^i$ or …","","","","A list of which Steenrod powers are in the element’s …","","Shifts a <code>Vec</code>’s elements back by <code>offset</code>.","","","","","","","","","","","","","","","","","","","","A graded algebra over $\\\\mathbb{F}_p$.","An <code>Algebra</code> equipped with a distinguished presentation.","Converts a string to a basis element. This must be a …","Converts a basis element into a string for display.","Computes basis elements up to and including <code>degree</code>.","Decomposes an element into generators.","Returns a list of filtration-one elements in $Ext(k, k)$.","Returns a list of filtration-one elements in $Ext(k, k)$.","Returns the dimension of the algebra in degree <code>degree</code>.","Converts a general element into a string for display.","Converts a general element into a string for display.","Returns relations that the algebra wants checked to ensure …","Returns the name of a generator.","Returns the name of a generator.","Return generators in <code>degree</code>.","A magic constant used to identify the algebra in save …","A magic constant used to identify the algebra in save …","Computes the product <code>r * s</code> of a basis element <code>r</code> and a …","Computes the product <code>r * s</code> of a basis element <code>r</code> and a …","Computes the product <code>r * s</code> of two basis elements, and adds …","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of two general elements, and …","Computes the product <code>r * s</code> of two general elements, and …","A name for the algebra to use in serialization operations. …","A name for the algebra to use in serialization operations. …","Returns the prime the algebra is over.","An <code>Algebra</code> equipped with a coproduct operation that makes …","Computes a coproduct $\\\\Delta(x)$, expressed as","Decomposes an element of the algebra into a product of …","","","If p is the nth prime, then <code>TAU_DEGREES[n][i]</code> is the …","","If p is the nth prime, then <code>XI_DEGREES[n][i - 1]</code> is the …","","","","","","","","","","","","","","","","index ==&gt; degree","","","degree =&gt; (first_index, number_of_gens)","","","","","","","","","","","","","","","","","","degree =&gt; max_part =&gt; list of partitions with maximum part …","","","","","","","","","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","","","","","","","","","","","","","","","","","","","Returns a new <code>Field</code> over the given prime <code>p</code>.","","","","","","","","","","","","","A version of <code>HashMap&lt;MilnorBasisElement, T&gt;</code> that is more …","","","The parts of a PPartMultiplier that involve heap …","","","","","","","","","","","","Return the degree and index of $Q_1^e P(x)$.","","","","","","","","","","","","","","","","","","","","","","","Update the degree component to the correct degree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assert that <code>elt</code> is in the image of the differential. Drop …","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the new element is not within the bounds","","","","","","","","","","","","","","","","","","","","","Whether the profile is that of A(n). This is relevant …","","Checks whether the profile function is valid","","","","","","","","","","","","","","","","","","","","","This compute the first l &gt; k such that (sum + l) choose l …","","","The profile function for the Q part.","","","","Gives a list of PPart’s in degree <code>t</code>.","","","","","","","","A bitmask indicating which of the Q_k we want to include …","","","","","","","","","","","","","","","If <code>true</code>, unspecified p_part entries will be 0. Otherwise …","","","","","","","","","","","","","","","","","","","","","","","","We have a matrix of the form | s₁  s₂  s₃ …","","This creates a PPartAllocation with enough capacity to …","","","An element in the cohomological degree zero part of the …","","","A lift of an algebra to a split pair algebra. See module …","","Compute $A(r, s)$ and write the result to <code>result</code>.","Compute $A(Sq(R), Y_{k, l})$ where $a = Sq(R)$. This …","Actually computes $A(a, Y_{k, l})$ and returns the result.","","","","","","","","","","Assert that <code>elt</code> is in the image of the differential. Drop …","Assert that <code>elt</code> is in the image of the differential. Drop …","","","","Create a new zero element in the given degree.","","The element p is classified by a filtration on element in …","Same as <code>PairAlgebra::sigma_multiply_basis</code> but with …","Same as <code>PairAlgebra::sigma_multiply_basis</code> but with …","Given $r, s \\\\in \\\\pi_0(A)$, compute $\\\\sigma(r) \\\\sigma(s)$ …index ==&gt; degree","degree =&gt; (first_index, number_of_gens)","","","","","","","degree =&gt; max_part =&gt; list of partitions with maximum part …","","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","","","","","","","","The parts of a PPartMultiplier that involve heap …","","","","","","","","","","","","","","","","","","","","","The profile function for the Q part.","","","","","A bitmask indicating which of the Q_k we want to include …","","","","","","If <code>true</code>, unspecified p_part entries will be 0. Otherwise …","","","","A free module.","","","A bounded below module over an algebra. To accommodate for …","","","A quotient of a module truncated below a fix degree.","This is $\\\\mathbb{RP}_{\\\\mathrm{min}}^{\\\\mathrm{max}}$. The …","","","","","The algebra the module is over.","","","","","","The name of a basis element. This is useful for debugging …","For each degree <code>d</code>, <code>basis_list[d]</code> is a list of basis …","","","","","The dimension of a module at the given degree","","","","","","degree -&gt; internal index of first generator in degree","","","","","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","","","","","","","","","The maximum <code>t</code> for which the module is fully defined at <code>t</code>. …","","The minimum degree of the module, which is required to be …","","","The underlying module","","","","","","","","","","","","","","","","The subspaces that we quotient out by","","","Everything above this degree is quotiented out.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function will panic if you call it with input such …","This function will panic if you call it with input such …","","","","","","","","","","","","","","","","","","","","","","This should really by try_from but orphan rules prohibit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A free module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A version of element_to_string that names the generator as …","","","","","","","","","","","degree -&gt; internal index of first generator in degree","","","","","Given a generator <code>(gen_deg, gen_idx)</code>, find the first index …","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","","","","","","","","","Given a generator <code>(gen_deg, gen_idx)</code>, find the first index …","","","","","","Iterate the degrees and offsets of each generator up to …","Iterate the degrees and indices of each generator up to …","Given an element in a degree, iterate through the slices …","","","","","","","","","","","","","","","Given a vector that represents an element in degree <code>degree</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A ModuleHomomorphism that simply records the matrix of the …","","Given a map <code>map</code>: A -&gt; B and <code>source</code> = Hom(B, X), <code>target</code> = …","","Each <code>ModuleHomomorphism</code> may come with auxiliary data, …","","","","","","","Attempt to apply quasi inverse to the input. Returns …","Calling this function when …","Compute the auxiliary data associated to the homomorphism …","","","degree shift, such that ouptut_degree = input_degree - …","","","","","","","","Write the matrix of the homomorphism at input degree <code>degree</code>…","Get the values of the homomorphism on the specified inputs …","","","","","","","","","","","","The matrices of the module homomorphism. Unspecified …","","","","","","","","","","","","","","","","","","","","","","","","","","A MatrixSlice will do but there is no applicaiton of this …","","Add the image of a bidegree out of order. See …","","","","","","","","degree shift, such that ouptut_degree = input_degree - …","","","","","","","Given f: M -&gt; N, compute the dual f*: Hom(N, k) -&gt; Hom(M, …","","","","","","","","","","","List of outputs that have been added out of order","","","","","","","","","","","","","","","","A ModuleHomomorphism that simply records the matrix of the …","","","","","","","","","","","","","","","","","","","","","","The matrices of the module homomorphism. Unspecified …","","","","This function replaces the source of the …","See <code>replace_source</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a map <code>map</code>: A -&gt; B and <code>source</code> = Hom(B, X), <code>target</code> = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A bounded below module over an algebra. To accommodate for …","","The length of <code>input</code> need not be equal to the dimension of …","The length of <code>input</code> need not be equal to the dimension of …","","","","","","The algebra the module is over.","The name of a basis element. This is useful for debugging …","","","Compute internal data of the module so that we can query …","Compute internal data of the module so that we can query …","","","The dimension of a module at the given degree","","Gives the name of an element. The default implementation …","Gives the name of an element. The default implementation …","","","","","","Whether this is the unit module.","Whether this is the unit module.","The maximum <code>t</code> for which the module is fully defined at <code>t</code>. …","<code>max_degree</code> is the a degree such that if t &gt; <code>max_degree</code>, …","<code>max_degree</code> is the a degree such that if t &gt; <code>max_degree</code>, …","Maximum degree of a generator under the Steenrod action. …","Maximum degree of a generator under the Steenrod action. …","The minimum degree of the module, which is required to be …","The prime the module is over, which should be equal to the …","The prime the module is over, which should be equal to the …","","","","","","","","","A quotient of a module truncated below a fix degree.","","","","","For each degree <code>d</code>, <code>basis_list[d]</code> is a list of basis …","","","","","","","","","","","","","","","The underlying module","","","","","","Arguments","","The subspaces that we quotient out by","","Everything above this degree is quotiented out.","","","","","","This is $\\\\mathbb{RP}_{\\\\mathrm{min}}^{\\\\mathrm{max}}$. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An element in the cohomological degree zero part of the …","","A lift of an algebra to a split pair algebra. See module …","Compute $A(r, s)$ and write the result to <code>result</code>.","","","","","Create a new zero element in the given degree.","","The element p is classified by a filtration on element in …","Given $r, s \\\\in \\\\pi_0(A)$, compute $\\\\sigma(r) \\\\sigma(s)$ …","","","","","Express $Q_{qi}$ in the adem basis.","","Translate from the adem basis to the milnor basis, adding …","","","","","","","","","","","","Returns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Surround with brackets","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pad both ends with whitespace","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,2,0,0,0,0,3,3,0,0,1,0,2,0,0,0,0,0,0,0,0,4,0,5,6,7,5,8,6,7,0,5,8,9,9,10,11,5,0,6,6,11,8,8,0,8,10,10,6,7,12,6,7,0,13,0,0,12,6,7,5,6,7,0,11,8,8,7,5,8,14,7,7,8,8,6,15,0,0,6,11,16,17,18,19,20,0,0,0,21,21,0,4,6,6,22,22,6,22,6,6,6,6,6,22,22,6,6,23,24,0,0,0,0,0,0,0,0,0,0,0,0,21,21,0,6,4,6,0,0,6,6,6,6,6,6,6,22,6,22,21,6,22,21,22,22,6,6,6,6,6,6,6,22,6,22,21,6,22,21,6,6,6,22,21,6,6,6,22,22,6,22,6,6,6,22,22,21,6,22,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,22,22,6,22,21,6,22,21,22,6,6,6,6,6,6,6,6,6,6,6,6,22,6,6,6,22,6,0,6,6,6,22,6,22,6,6,22,21,6,22,21,6,22,21,6,23,24,0,0,5,5,5,10,5,5,5,5,5,10,10,10,10,5,5,5,5,5,5,5,5,5,5,5,5,0,9,9,0,0,0,0,0,25,0,25,26,25,26,25,26,25,26,25,26,25,26,25,25,25,25,25,0,25,26,26,25,25,26,26,26,25,26,26,25,26,25,25,26,25,26,26,0,25,26,25,26,25,26,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,27,0,0,0,0,0,0,0,0,0,0,0,7,27,7,7,7,7,7,7,7,7,27,28,29,30,31,32,7,27,28,29,30,31,32,29,30,29,30,30,27,31,7,30,7,7,7,7,7,7,7,28,29,30,31,32,7,29,30,7,27,28,29,30,31,32,7,27,28,29,30,31,32,28,27,27,32,7,7,27,28,29,30,31,32,7,7,7,28,30,28,30,7,7,28,30,30,31,31,7,27,28,29,30,31,32,30,7,7,7,7,7,7,7,30,28,30,7,31,31,7,27,28,29,30,31,32,27,31,7,27,28,29,30,31,32,27,27,28,28,28,7,32,7,13,7,7,7,7,7,7,7,7,7,7,28,7,27,7,7,27,27,7,27,28,30,32,7,7,7,7,7,27,7,7,7,28,29,30,0,7,27,31,27,28,7,29,30,7,30,31,28,7,7,7,27,28,29,30,31,32,7,27,28,29,30,31,32,7,27,28,29,30,31,32,27,31,32,32,0,33,0,0,0,0,33,0,0,34,34,34,34,34,34,33,33,33,33,33,34,34,34,33,34,33,33,33,33,0,34,34,34,34,0,34,0,0,0,8,11,12,11,12,11,11,8,8,8,12,11,11,12,11,12,11,12,11,11,11,8,8,11,11,8,8,8,11,12,11,11,8,8,12,11,12,11,12,8,8,8,8,8,8,12,8,8,8,8,8,8,8,8,11,11,12,11,8,8,8,8,8,8,8,11,11,11,12,11,12,11,12,11,1,2,0,0,3,3,1,2,0,0,0,2,35,2,2,3,2,1,35,3,2,1,35,1,1,2,2,2,2,2,3,2,1,35,3,2,1,35,35,2,0,3,2,1,35,2,2,2,2,1,1,2,2,1,1,35,3,2,2,2,1,35,2,1,2,2,2,3,2,1,35,3,2,1,35,2,2,2,2,2,2,35,2,2,2,35,2,2,15,2,2,1,2,1,3,2,1,1,35,3,2,1,35,3,2,1,35,17,18,19,20,0,0,0,0,25,25,0,26,25,26,25,26,25,26,0,0,0,14,27,0,0,0,0,0,0,0,0,0,27,7,7,27,29,30,27,27,32,7,27,7,32,13,7,7,27,28,30,32,7,7,28,29,30,7,27,27,28,36,0,0,0,0,0,0,0,0,0,0,0,0,36,37,36,37,38,39,40,38,36,41,0,40,42,39,36,43,0,0,0,43,38,37,38,44,44,38,45,37,0,0,45,42,45,39,36,39,36,45,38,41,0,37,45,38,38,44,44,0,46,45,42,0,40,43,0,41,40,0,41,46,0,47,0,0,0,48,48,49,50,50,48,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,48,49,49,48,48,49,48,50,49,48,50,48,48,49,48,50,49,48,50,49,48,50,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,45,45,45,45,45,51,45,51,45,45,51,45,51,45,45,51,45,45,45,45,45,51,51,45,45,45,51,45,45,45,51,45,51,45,45,45,45,45,45,45,45,45,45,51,45,51,45,51,45,45,0,0,0,0,38,38,38,38,38,38,38,38,43,52,44,38,43,52,44,44,44,38,52,38,43,52,44,38,43,52,44,38,38,43,52,44,38,43,38,38,44,38,43,52,44,43,52,38,38,38,44,44,38,38,38,38,38,38,38,43,52,44,38,38,43,52,44,52,38,38,38,38,38,38,52,38,38,52,38,38,52,44,38,38,44,38,43,44,38,38,43,52,44,38,43,52,44,38,43,52,44,38,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,53,0,0,0,0,0,0,0,0,53,53,0,53,53,53,53,53,53,54,55,56,57,58,0,0,0,53,53,0,59,53,54,55,60,53,54,55,60,60,55,53,54,54,53,53,54,55,60,0,57,58,53,54,55,56,60,57,53,54,55,56,60,61,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,57,58,57,58,57,58,57,58,36,0,0,36,36,36,36,36,36,36,36,36,46,46,36,36,46,46,36,46,36,36,46,46,46,46,46,36,36,36,36,36,36,36,36,36,36,46,46,36,36,46,46,46,46,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,39,39,39,39,39,62,39,62,39,62,0,0,39,62,39,62,62,39,39,62,39,39,39,62,39,62,39,39,62,39,62,39,62,39,39,39,62,39,39,39,39,39,62,39,62,39,62,39,0,0,0,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,47,33,0,0,33,34,33,33,33,33,34,33,33,34,34,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,64,0,0,65,66,0,0,0,64,64,65,64,65,66,65,0,0,0,0,64,65,66,64,65,66,0,64,65,66,64,65,66,0,64,65,66,64,65,66,0,64,65,66,64,65,66,0,64,65,66,64,65,66,64,65,66,0,0,0,0,0,0,0,0,66,64,65,66,64,65,66,64,65,66,64,65,66,67,68,69,70,71,72,73,74,71,72,75],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ademalgebra",3]],null,[[["str",15]],["option",4]],null,null,[[["i32",15],["usize",15]],["string",3]],[[],["oncevec",3]],null,null,null,[[["i32",15]]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],null,[[["i32",15]],["usize",15]],null,null,null,null,[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[["i32",15],["usize",15]],["option",4,[["usize",15]]]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15]],["vec",3,[["usize",15]]]],null,null,null,null,null,null,[[],["milnoralgebra",3]],null,[[["value",4]]],null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],null,null,null,null,[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[],["validprime",3]],[[],["validprime",3]],null,null,null,[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]]],null,[[],["steenrodalgebraborrow",4]],null,null,null,null,[[["arc",3,[["steenrodalgebra",4]]],["i32",15]]],null,null,null,null,null,null,null,null,null,null,[[],["ademalgebra",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],[[],["ademalgebra",3]],[[],["ademalgebra",3]],[[["adembasiselement",3],["adembasiselement",3]],["ordering",4]],[[["adembasiselement",3],["adembasiselement",3]],["ordering",4]],[[["i32",15],["usize",15]],["adembasiselement",3]],[[["str",15]],["option",4]],[[["adembasiselement",3]],["usize",15]],null,[[["i32",15],["usize",15]],["string",3]],null,[[["u32",15],["u32",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["adembasiselement",3]],[[]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[],["vec",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["i32",15],["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["result",6]],[[],["bool",15]],[[],["result",6]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15],["usize",15]],["fpvector",4]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15],["usize",15]],["fpvector",4]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["usize",15]]]],[[],["bool",15]],null,[[],["u64",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],null,[[],["u32",15]],[[["slicemut",4],["u32",15],["adembasiselement",3],["i32",15],["bool",15]]],[[["slicemut",4],["adembasiselement",3],["i32",15],["i32",15],["i32",15],["bool",15],["bool",15]]],[[["slicemut",4],["u32",15],["adembasiselement",3],["i32",15],["i32",15],["i32",15],["bool",15],["bool",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15],["bool",15]]],[[["validprime",3],["bool",15],["bool",15],["bool",15]]],[[["i32",15]]],null,null,[[],["usize",15]],[[],["str",15]],[[],["validprime",3]],null,[[],["i32",15]],[[["vec",3],["isize",15]]],[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],null,[[["adembasiselement",3],["u32",15],["u32",15]],["usize",15]],[[]],[[],["string",3]],[[],["string",3]],[[["adembasiselement",3]],["option",4,[["usize",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[["str",15]],["option",4]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[["i32",15]],["usize",15]],[[["i32",15],["slice",4]],["string",3]],[[["i32",15],["slice",4]],["string",3]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["usize",15]]]],[[],["u32",15]],[[],["u32",15]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[],["str",15]],[[],["str",15]],[[],["validprime",3]],null,[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],null,null,null,null,null,[[["i32",15],["usize",15]]],[[["validprime",3],["u32",15],["u32",15],["u32",15],["u32",15],["u32",15]],["u32",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["i32",15],["usize",15]],["usize",15]],null,[[["i32",15]],["usize",15]],[[["i32",15]],["usize",15]],null,[[["validprime",3],["bool",15],["i32",15]],["vec",3]],[[],["usize",15]],[[],["usize",15]],null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[["validprime",3]]],[[["i32",15],["u32",15]]],[[],["option",4]],null,null,[[["i32",15]],["vec",3]],null,null,null,null,[[],["bool",15]],[[["validprime",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["validprime",3]]],null,[[["str",15]],["option",4]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15],["slice",4]],["string",3]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["validprime",3]]],[[],["validprime",3]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],null,[[["i32",15],["usize",15]],["milnorbasiselement",3]],[[["str",15]],["option",4]],[[["milnorbasiselement",3]],["usize",15]],null,[[["i32",15],["usize",15]],["string",3]],null,[[["u32",15],["ppartentry",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["qpart",3]],[[],["milnorbasiselement",3]],[[]],[[]],[[]],null,null,[[["i32",15]]],[[["validprime",3]]],[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[]],[[],["qpart",3]],[[],["milnorbasiselement",3]],[[],["matrix2d",3]],[[],["ppartallocation",3]],[[],["vec",3]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],null,null,null,[[["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["result",6]],[[],["bool",15]],[[],["result",6]],[[["milnorprofile",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ppart",6],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["usize",15]]]],[[],["bool",15]],null,[[],["u64",15]],[[["usize",15]],["ppartentry",6]],[[]],[[["ppart",6]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ppartallocation",3]],[[]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["u32",15]],[[],["milnoralgebra",3]],[[],["milnoralgebra",3]],null,[[["slicemut",4],["u32",15],["milnorbasiselement",3],["milnorbasiselement",3]]],[[["slicemut",4],["u32",15],["milnorbasiselement",3],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["milnorbasiselement",3],["i32",15],["slice",4],["ppartallocation",3]],["ppartallocation",3]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["milnorbasiselement",3],["u32",15]],["vec",3]],[[["slicemut",4],["u32",15],["milnorbasiselement",3],["milnorbasiselement",3],["ppartallocation",3]],["ppartallocation",3]],[[["milnorprofile",3]],["bool",15]],[[["validprime",3]]],[[["validprime",3],["ppart",6],["ppart",6],["ppartallocation",3],["u32",15],["i32",15]]],[[["i32",15]]],[[["validprime",3],["milnorprofile",3]]],[[],["option",4,[["u32",15]]]],[[["ppartentry",6],["ppartentry",6],["ppartentry",6]],["ppartentry",6]],null,null,null,null,null,[[],["usize",15]],[[["i32",15]]],null,[[],["str",15]],[[],["validprime",3]],[[],["validprime",3]],[[],["milnorprofile",3]],null,[[],["i32",15]],null,null,null,[[],["u32",15]],null,null,[[["usize",15],["usize",15]]],null,[[],["result",4]],[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[["milnorbasiselement",3]],["option",4,[["usize",15]]]],[[["u32",15],["ppartentry",6]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[]],null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],[[["milnoralgebra",3],["milnorelt",3],["usize",15],["usize",15]]],[[["milnoralgebra",3],["milnorelt",3],["usize",15],["usize",15]],["fpvector",4]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["result",6]],[[],["bool",15]],[[],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[["i32",15]]],null,[[],["usize",15]],[[["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],null,[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],null,null,null,null,null,[[],["oncevec",3]],[[]],[[]],[[]],[[]],[[],["polynomialalgebramonomial",3]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["polynomialalgebratableentry",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["polynomialalgebramonomial",3]],["bool",15]],[[],["bool",15]],null,[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["fpvector",4],["fpvector",4]]],[[["fpvector",4],["fpvector",4]]],[[["i32",15],["usize",15]],["option",4,[["usize",15]]]],[[]],[[]],[[],["u64",15]],[[]],[[["i32",15],["usize",15]],["polynomialalgebramonomial",3]],[[["i32",15],["usize",15]],["polynomialalgebramonomial",3]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["polynomialalgebramonomial",3]],["usize",15]],[[["polynomialalgebramonomial",3]],["usize",15]],null,[[["fpvector",4],["u32",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4]]],[[["fpvector",4],["u32",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4]]],[[["polynomialalgebramonomial",3],["polynomialalgebramonomial",3]],["option",4,[["u32",15]]]],[[["polynomialalgebramonomial",3],["polynomialalgebramonomial",3]],["option",4,[["u32",15]]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4],["polynomialalgebramonomial",3]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4],["polynomialalgebramonomial",3]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4],["i32",15],["fpvector",4]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4],["i32",15],["fpvector",4]]],[[["polynomialalgebramonomial",3]],["bool",15]],[[["validprime",3]]],[[]],null,[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["validprime",3]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15]]],[[["polynomialalgebramonomial",3],["i32",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],null,[[["str",15]],["option",4]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["algebratype",4]],[[]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["i32",15]],["usize",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["result",6]],[[],["bool",15]],[[],["result",6]],[[["i32",15],["slice",4]],["string",3]],[[["algebratype",4]],["bool",15]],[[],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["ademalgebra",3]],["steenrodalgebra",4]],[[["milnoralgebra",3]],["steenrodalgebra",4]],[[]],[[]],[[["value",4],["algebratype",4]],["result",6,[["steenrodalgebra",4]]]],[[["str",15]],["result",4]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["usize",15]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["i32",15]]],null,[[],["usize",15]],[[],["str",15]],[[],["validprime",3]],null,[[["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["steenrodalgebraborrow",4]],[[],["steenrodalgebraborrow",4]],[[["value",4]]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["validprime",3],["u32",15],["u32",15],["u32",15],["u32",15],["u32",15]],["u32",15]],null,null,[[["validprime",3],["bool",15],["i32",15]],["vec",3]],null,null,null,null,null,null,null,[[["validprime",3]]],[[["validprime",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["milnoralgebra",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],null,[[],["arc",3]],null,null,null,null,null,[[["i32",15],["usize",15]],["string",3]],null,null,null,null,null,[[["i32",15]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["i32",15]],null,[[],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arc",3],["i32",15]]],null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["slice",4]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["i32",15],["usize",15],["usize",15]],["usize",15]],null,null,[[["i32",15],["usize",15]],["blockstart",3]],[[["usize",15]],["generatorbasiseltpair",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["bivec",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],null,[[],["value",4]],[[["i32",15],["string",3]]],[[],["arc",3]],null,[[["arc",3],["bivec",3]],["bivec",3,[["bivec",3,[["vec",3,[["vec",3,[["fpvector",4]]]]]]]]]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[["i32",15],["i32",15]],["result",4,[["modulefailedrelationerror",3]]]],[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[["i32",15],["i32",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["arc",3],["value",4]],["result",6]],null,null,[[],["usize",15]],[[]],[[],["i32",15]],[[],["option",4,[["i32",15]]]],[[],["i32",15]],null,[[["arc",3],["string",3],["bivec",3,[["usize",15]]]]],[[["str",15],["bool",15]],["result",6]],[[["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["string",3]]],[[["str",15]],["option",4]],[[],["result",4,[["string",3]]]],[[["value",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["vec",3,[["string",3]]]]],[[["i32",15],["vec",3,[["fpvector",4]]]]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["i32",15],["usize",15]],["usize",15]],null,[[]],[[]],[[["arc",3],["value",4]],["result",6]],[[["i32",15],["usize",15]],["isize",15]],null,[[],["arc",3,[["freemodule",3]]]],null,null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[],["i32",15]],[[],["option",4,[["i32",15]]]],[[],["i32",15]],null,null,[[["arc",3],["string",3],["i32",15]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["option",4,[["vec",3,[["string",3]]]]]]],[[],["arc",3]],null,null,[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["operationgeneratorpair",3]],[[]],[[["i32",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15],["i32",15],["slice",4]],["string",3]],null,[[["i32",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,[[],["oncebivec",3]],null,null,null,[[["i32",15],["i32",15],["usize",15]],["usize",15]],null,[[["i32",15],["usize",15]],["usize",15]],[[["i32",15]],["vec",3,[["i32",15]]]],[[],["i32",15]],[[["i32",15],["usize",15]],["operationgeneratorpair",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["i32",15],["usize",15]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15],["slice",4]]],[[],["i32",15]],[[],["i32",15]],null,null,null,[[["arc",3],["string",3],["i32",15]]],[[],["option",4]],null,[[["i32",15]],["usize",15]],null,null,[[["operationgeneratorpair",3]],["usize",15]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["usize",15]],null,[[["i32",15],["i32",15],["usize",15],["slice",4]],["slice",4]],null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],null,[[["i32",15],["usize",15]],["string",3]],null,[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15],["slice",4]],["freemodulehomomorphism",3]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[["arc",3,[["freemodule",3]]],["arc",3]]],[[],["arc",3,[["freemodule",3]]]],null,[[],["arc",3]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4]]],[[["slicemut",4],["i32",15],["slice",4]],["bool",15]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],null,null,null,null,null,null,null,null,[[["matrixslicemut",3],["i32",15]]],[[["i32",15]],["matrix",3]],null,[[["arc",3]]],[[["i32",15]],["option",4,[["subspace",3]]]],null,null,null,[[["i32",15]],["option",4,[["subspace",3]]]],null,null,null,null,null,[[],["i32",15]],null,null,[[],["validprime",3]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,null,null,null,null,null,[[],["arc",3]],null,null,null,null,null,[[],["arc",3]],null,null,null,null,[[["arc",3],["arc",3],["i32",15]]],null,[[["i32",15],["slice",4]]],[[["i32",15],["matrixslicemut",3]]],[[["i32",15],["vec",3,[["fpvector",4]]]]],[[["i32",15],["vec",3,[["fpvector",4]]]],["range",3,[["i32",15]]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],null,[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["f32",15]],[[["usize",15]]],[[["i32",15]]],[[]],[[["i32",15]],["vec",3,[["vec",3,[["u32",15]]]]]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["usize",15]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["i32",15]],null,[[["arc",3,[["freemodule",3]]],["arc",3],["i32",15]]],[[],["i32",15]],[[],["vec",3,[["i32",15]]]],[[["i32",15],["usize",15]],["fpvector",4]],null,[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,[[["i32",15],["option",4,[["subspace",3]]]]],[[["i32",15],["option",4,[["subspace",3]]]]],[[["i32",15],["option",4,[["quasiinverse",3]]]]],[[],["arc",3]],null,[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3,[["freemodule",3]]],["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[],["i32",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["arc",3],["arc",3],["i32",15],["bivec",3,[["matrix",3]]]]],[[["arc",3]]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["usize",15]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,null,[[["arc",3],["arc",3],["i32",15]]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,[[["arc",3,[["module",8]]]],["fullmodulehomomorphism",3,[["module",8]]]],[[["arc",3,[["module",8]]]],["fullmodulehomomorphism",3,[["module",8]]]],[[],["arc",3]],null,[[],["arc",3]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[],["i32",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["arc",3],["arc",3],["i32",15]]],[[],["arc",3]],null,[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[["i32",15]]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["usize",15]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,null,[[],["i32",15]],[[["arc",3,[["hommodule",3]]],["arc",3,[["hommodule",3]]],["arc",3,[["freemodulehomomorphism",3,[["freemodule",3]]]]]]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,[[],["arc",3]],null,[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["arc",3],["arc",3,[["quotientmodule",3]]],["arc",3,[["quotientmodule",3]]]]],[[["arc",3],["arc",3,[["quotientmodule",3]]]]],null,null,[[],["arc",3]],[[],["arc",3]],null,[[],["arc",3]],[[],["arc",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15],["slice",4]],["string",3]],[[["i32",15],["slice",4]],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["i32",15]],[[],["option",4,[["i32",15]]]],[[],["option",4,[["i32",15]]]],[[],["option",4,[["i32",15]]]],[[],["option",4,[["i32",15]]]],[[],["i32",15]],[[],["validprime",3]],[[],["validprime",3]],null,[[],["string",3]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["option",4,[["i32",15]]]],[[],["i32",15]],null,[[["arc",3],["i32",15]]],[[["i32",15],["slicemut",4],["slice",4]]],[[["i32",15],["slice",4]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15],["slicemut",4]]],null,[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],null,[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],null,null,[[["ademalgebra",3],["i32",15],["usize",15],["i32",15]],["bool",15]],[[["milnoralgebra",3],["i32",15],["usize",15],["i32",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["arc",3],["value",4]],["result",6]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,[[],["i32",15]],[[],["option",4,[["i32",15]]]],null,null,[[],["i32",15]],[[["arc",3],["i32",15],["option",4,[["i32",15]]],["bool",15]]],[[["value",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,[[["arc",3,[["steenrodalgebra",4]]],["value",4]],["result",6,[["steenrodmodule",6]]]],null,[[["arc",3,[["steenrodalgebra",4]]],["value",4]],["result",6,[["steenrodmodule",6]]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],null,[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],null,[[],["i32",15]],[[],["option",4,[["i32",15]]]],[[],["i32",15]],[[["arc",3],["arc",3]]],[[["i32",15],["i32",15]],["usize",15]],null,[[["i32",15],["usize",15]],["i32",15]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,[[["arc",3],["i32",15]]],null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],null,[[["i32",15]],["result",6]],[[],["bool",15]],[[],["result",6]],[[["i32",15]]],null,[[],["usize",15]],[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],null,null,null,null,[[["fpvector",4],["u32",15],["u32",15]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4]]],[[["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["option",4,[["i32",15]]],["algebranode",4]],["result",6]],[[["option",4,[["i32",15]]],["algebrabasiselt",4]],["result",6]],[[["str",15]],["result",6,[["btreemap",3,[["string",3]]]]]],[[]],[[]],[[],["usize",15]],[[]],null,[[["fpvector",4],["u32",15],["i32",15],["fpvector",4]]],[[["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[["validprime",3]]],[[],["validprime",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["iresultbase",6,[["str",15],["algebranode",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresultbase",6,[["str",15],["algebranode",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresultbase",6,[["str",15],["algebrabasiselt",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresultbase",6,[["str",15],["algebranode",4],["verboseerror",3,[["str",15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parser",8,[["str",15],["parseerror",8,[["str",15]]]]]]],[[],["algebrabasiselt",4]],[[],["algebranode",4]],[[],["bocksteinorsq",4]],[[]],[[]],[[]],[[["str",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["str",15]],["iresultbase",6,[["str",15],["",26,[["fromstr",8],["copy",8]]],["verboseerror",3,[["str",15]]]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["str",15]],["iresultbase",6,[["str",15],["vec",3],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresultbase",6,[["str",15],["string",3],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresultbase",6,[["str",15],["vec",3],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresultbase",6,[["str",15],["str",15],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["result",6,[["algebranode",4]]]],[[["str",15]],["result",6,[["vec",3]]]],[[["str",15]],["iresultbase",6,[["str",15],["i32",15],["verboseerror",3,[["str",15]]]]]],[[["parser",8,[["str",15],["parseerror",8,[["str",15]]]]]]],[[["i32",15]],["adembasiselement",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"AlgebraType"],[4,"SteenrodAlgebra"],[4,"SteenrodAlgebraBorrow"],[8,"AdemAlgebraT"],[8,"Algebra"],[3,"AdemAlgebra"],[3,"MilnorAlgebra"],[8,"PolynomialAlgebra"],[8,"Bialgebra"],[8,"GeneratedAlgebra"],[3,"PolynomialAlgebraMonomial"],[3,"PolynomialAlgebraTableEntry"],[8,"MilnorAlgebraT"],[3,"Field"],[8,"SteenrodAlgebraT"],[6,"SteenrodModule"],[13,"AdemAlgebra"],[13,"MilnorAlgebra"],[13,"BorrowAdem"],[13,"BorrowMilnor"],[4,"PorBockstein"],[3,"AdemBasisElement"],[13,"P"],[13,"Bockstein"],[3,"TruncatedPolynomialMonomialBasis"],[3,"PartitionIterator"],[3,"PPartMultiplier"],[3,"MilnorProfile"],[3,"QPart"],[3,"MilnorBasisElement"],[3,"Matrix2D"],[3,"PPartAllocation"],[8,"PairAlgebra"],[3,"MilnorPairElement"],[3,"AlgebraSpec"],[8,"Module"],[3,"FiniteDimensionalModule"],[3,"FreeModule"],[3,"RealProjectiveSpace"],[3,"HomModule"],[3,"QuotientModule"],[3,"TensorModule"],[3,"GeneratorData"],[3,"OperationGeneratorPair"],[3,"FinitelyPresentedModule"],[3,"ModuleFailedRelationError"],[8,"ZeroModule"],[3,"BlockStructure"],[3,"GeneratorBasisEltPair"],[3,"BlockStart"],[3,"FPMIndexTable"],[3,"OffsetIterator"],[8,"ModuleHomomorphism"],[3,"FreeModuleHomomorphism"],[3,"FullModuleHomomorphism"],[3,"GenericZeroHomomorphism"],[3,"QuotientHomomorphism"],[3,"QuotientHomomorphismSource"],[8,"IdentityHomomorphism"],[3,"HomPullback"],[8,"ZeroHomomorphism"],[3,"RPSpec"],[3,"SteenrodEvaluator"],[4,"AlgebraBasisElt"],[4,"AlgebraNode"],[4,"BocksteinOrSq"],[13,"AList"],[13,"PList"],[13,"P"],[13,"Q"],[13,"Product"],[13,"Sum"],[13,"BasisElt"],[13,"Scalar"],[13,"Sq"]]},\
"algebra_dim":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"bivec":{"doc":"","t":[3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BiVec","borrow","borrow_mut","clone","clone_into","data","default","deserialize","eq","extend","extend_negative","extend_with","fmt","from","from_vec","get","index","index_mut","into","into_iter_enum","into_vec","is_empty","iter","iter_enum","iter_mut","iter_mut_enum","last","len","max_degree","min_degree","min_degree","ne","new","push","range","reserve","serialize","split_borrow_mut","to_owned","try_from","try_into","type_id","with_capacity"],"q":["bivec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A BiVec is like a Vec, except we allow indices to be …","","","","","","","","","","If <code>min_degree &lt; self.min_degree</code>, set <code>self.min_degree</code> to …","Extends the bivec such that <code>max_degree()</code> is at least <code>max</code>. …","","","","","","","","","","","","","","","","This returns the “length” of the bivector, defined to …","This returns the largest degree in the bivector. This is …","","","","","","","","","Mutably borrows i and j. Panic if i != j.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],["bivec",3]],[[]],null,[[]],[[],["result",4]],[[["bivec",3]],["bool",15]],[[]],[[["i32",15]]],[[["i32",15]]],[[["formatter",3]],["result",6]],[[]],[[["i32",15],["vec",3]]],[[["i32",15]],["option",4]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[["bivec",3]],["vec",3]],[[],["bool",15]],[[],["iter",3]],[[]],[[],["itermut",3]],[[]],[[],["option",4]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,[[["bivec",3]],["bool",15]],[[["i32",15]]],[[]],[[],["range",3,[["i32",15]]]],[[["usize",15]]],[[],["result",4]],[[["i32",15],["i32",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["i32",15],["i32",15]]]],"p":[[3,"BiVec"]]},\
"bruner":{"doc":"This script converts between our basis and Bruner’s …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"chart":{"doc":"","t":[13,8,13,18,16,18,18,13,18,4,17,13,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,12,12,12,12,11,11,10,11,11,12,12,12,12,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11],"n":["Above","Backend","Below","EXT","Error","GRID_WIDTH","HEADER","Left","MARGIN","Orientation","PATTERNS","Right","STYLES","SvgBackend","TikzBackend","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","drop","from","from","from","get_coords","get_coords","header","header","header","init","into","into","into","legend","line","line","line","max_x","max_x","max_y","max_y","new","new","node","node","node","num_nodes","num_nodes","out","out","structline","structline","structline","structline_matrix","text","text","text","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["chart","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","If the backend writes to a file, this is the extension …","","","","","","","","","","","","","","","","","","","","","","","Returns r, x, y","Returns r, x, y","","","","","","","","Print the legend for node patterns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,1,2,2,3,4,1,3,0,0,1,3,0,0,1,3,4,1,3,4,3,4,1,3,4,3,4,2,3,4,2,1,3,4,3,2,3,4,3,4,3,4,3,4,2,3,4,3,4,3,4,2,3,4,2,2,3,4,1,3,4,1,3,4,1,3,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["i32",15],["usize",15]]],[[["i32",15],["i32",15],["usize",15]]],[[["i32",15],["i32",15]],["result",4]],[[["i32",15],["i32",15]],["result",4]],[[["i32",15],["i32",15]],["result",4]],[[["i32",15],["i32",15]],["result",4]],[[]],[[]],[[]],[[],["result",6]],[[["i32",15],["i32",15],["i32",15],["i32",15],["str",15]],["result",4]],[[["i32",15],["i32",15],["i32",15],["i32",15],["str",15]],["result",4]],[[["i32",15],["i32",15],["i32",15],["i32",15],["str",15]],["result",4]],null,null,null,null,[[]],[[]],[[["i32",15],["i32",15],["usize",15]],["result",4]],[[["i32",15],["i32",15],["usize",15]],["result",4]],[[["i32",15],["i32",15],["usize",15]],["result",4]],null,null,null,null,[[["option",4,[["str",15]]]],["result",4]],[[["option",4,[["str",15]]]],["result",4]],[[["option",4,[["str",15]]]],["result",4]],[[["vec",3,[["vec",3,[["u32",15]]]]],["option",4,[["str",15]]]],["result",4]],[[["i32",15],["i32",15],["orientation",4]],["result",4]],[[["i32",15],["i32",15],["orientation",4]],["result",4]],[[["i32",15],["i32",15],["orientation",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Orientation"],[8,"Backend"],[3,"SvgBackend"],[3,"TikzBackend"]]},\
"define_module":{"doc":"","t":[5,5,5,5],"n":["gens_to_json","get_gens","interactive_module_define_fdmodule","interactive_module_define_fpmodule"],"q":["define_module","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[["bivec",3]],["value",4]],[[],["result",6,[["bivec",3,[["vec",3,[["string",3]]]]]]]],[[["value",4],["validprime",3]],["result",6]],[[["value",4],["validprime",3]],["result",6]]],"p":[]},\
"differentials":{"doc":"This prints all the differentials in the resolution.","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"ext":{"doc":"<code>ext-rs</code> is a collection of libraries for doing homological …","t":[6,0,0,0,0,0,0,0,0,16,16,8,8,8,4,3,16,8,13,3,3,8,13,16,16,16,16,3,16,10,10,11,11,11,11,11,11,11,12,12,0,10,12,12,11,10,11,11,11,11,11,10,10,11,11,11,11,11,11,10,10,12,11,11,11,11,11,0,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,12,10,10,10,10,12,11,12,11,10,11,11,11,12,12,11,11,10,10,10,12,11,11,11,11,11,11,11,11,11,10,10,12,3,3,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,13,13,18,17,4,3,3,3,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,12,11,11,12,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,17,3,3,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,12,11,12,11,11,12,11,12,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,12,12,12,12,11,11,11,13,13,13,3,3,13,13,13,13,13,3,4,13,13,13,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,11,5,12,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,16,6,18,3,3,8,3,16,16,16,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,12,12,11,11,11,10,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,12,12,11,11,11,11,11,10,11,12,11,11,11,10,11,10,11,11,11,11,11,10,11,10,11,10,11,12,10,11,12,10,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,12,12,3,13,4,13,6,17,3,13,12,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,5,12,11,5,5,5,5,5,0,11,11,11,11,11,11,11,11,11,11,5,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,17,6,5,5,5,5,5,5,5,5,5],"n":["CCC","chain_complex","nassau","resolution","resolution_homomorphism","save","secondary","utils","yoneda","Algebra","Algebra","AugmentedChainComplex","BoundedChainComplex","ChainComplex","ChainComplexGrading","ChainMap","ChainMap","CochainComplex","Cohomological","FiniteAugmentedChainComplex","FiniteChainComplex","FreeChainComplex","Homological","Homomorphism","Homomorphism","Module","Module","StemIterator","TargetComplex","algebra","algebra","apply_quasi_inverse","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cc","cc","chain_homotopy","chain_map","chain_maps","chain_maps","cocycle_string","cohomology_basis","cohomology_dimension","compute_cohomology","compute_cohomology_through_bidegree","compute_homology","compute_homology_through_bidegree","compute_through_bidegree","compute_through_bidegree","deref","deref","deref","deref_mut","deref_mut","deref_mut","differential","differential","differentials","drop","drop","drop","euler_characteristic","filtration_one_product","finite_chain_complex","from","from","from","graded_dimension_string","has_computed_bidegree","homology_basis","homology_dimension","homology_gen_to_cocyle","homology_gen_to_cocyle","init","init","init","into","into","into","into_iter","iter_stem","max_cohomology_degree","max_homology_degree","max_s","max_s","min_degree","min_degree","module","module","modules","multiunzip","n","next","next_homological_degree","number_of_gens_in_bidegree","prime","prime","s","s_shift","save_dir","save_file","set_cohomology_basis","set_homology_basis","target","target_cc","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero_module","zero_module","zero_module","FiniteAugmentedChainComplex","FiniteChainComplex","algebra","algebra","augment","borrow","borrow","borrow_mut","borrow_mut","cc","ccdz","chain_map","chain_maps","compute_through_bidegree","compute_through_bidegree","deref","deref","deref_mut","deref_mut","differential","differential","differentials","drop","drop","from","from","from","has_computed_bidegree","has_computed_bidegree","homology_basis","homology_basis","init","init","into","into","map","map","max_homology_degree","max_homology_degree","max_s","max_s","min_degree","min_degree","module","module","modules","new","next_homological_degree","next_homological_degree","pop","set_homology_basis","set_homology_basis","target","target_cc","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","zero_module","zero_module","End","Fix","INFINITY","MAX_NEW_GENS","Magic","MilnorSubalgebra","Resolution","SenderData","Signature","SignatureIterator","SubalgebraIterator","algebra","apply_quasi_inverse","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_map","chain_maps","clone","clone_into","compute_through_bidegree","compute_through_stem","current","current","degree","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","differential","differentials","drop","drop","drop","drop","drop","drop","extend_through_degree","fmt","from","from","from","from","from","from","from_bytes","has_computed_bidegree","has_signature","homology_basis","homology_dimension","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","into_iter","iter_signatures","lock","max_degree","max_homology_degree","min_degree","module","modules","name","name","new","new","new","new","new_with_save","next","next","next_homological_degree","optimal_for","prime","profile","s","save_dir","save_dir","send","sender","set_homology_basis","set_name","signature_degree","signature_from_bytes","signature_mask","signature_matrix","signature_to_bytes","step0","step1","step_resolution","step_resolution_with_subalgebra","subalgebra","t","target","target","to_bytes","to_owned","to_string","top_degree","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write_qi","zero_algebra","zero_module","zero_module","zero_signature","MAX_NEW_GENS","Resolution","SenderData","algebra","apply_quasi_inverse","borrow","borrow","borrow_mut","borrow_mut","chain_map","chain_maps","complex","compute_through_bidegree","compute_through_bidegree_with_callback","compute_through_stem","compute_through_stem_with_callback","deref","deref","deref_mut","deref_mut","differential","differentials","drop","drop","extend_through_degree","from","from","get_kernel","has_computed_bidegree","homology_basis","homology_dimension","init","init","into","into","kernels","load_quasi_inverse","lock","max_homology_degree","min_degree","module","modules","name","name","new","new","new_with_save","next_homological_degree","s","save_dir","save_dir","send","sender","set_homology_basis","set_name","should_save","step_resolution","t","target","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","zero_module","ResolutionHomomorphism","act","algebra","borrow","borrow_mut","deref","deref_mut","drop","extend","extend_all","extend_profile","extend_step","extend_through_stem","from","from_class","from_module_homomorphism","get_map","get_map_ensure_length","init","into","maps","name","name","new","next_homological_degree","save_dir","save_dir","shift_s","shift_t","source","target","try_from","try_into","type_id","AugmentationQi","ChainHomotopy","ChainMap","ChecksumReader","ChecksumWriter","Differential","Kernel","NassauDifferential","NassauQi","ResQi","SaveFile","SaveKind","SecondaryComposite","SecondaryHomotopy","SecondaryIntermediate","adler","adler","algebra","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_dir","create_file","delete_file","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","equivalent","exists","flush","fmt","from","from","from","from","get_save_path","idx","init","init","init","init","into","into","into","into","kind","magic","name","nassau_data","new","new","open_file","open_file","open_files","path","read","read_exact","reader","resolution_data","s","secondary_data","t","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate_header","write","write_all","write_header","writer","Algebra","CompositeData","HIT_GENERATOR","SecondaryComposite","SecondaryHomotopy","SecondaryLift","SecondaryResolution","Source","Target","Underlying","act","act","add_composite","add_composite","algebra","algebra","algebra","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","composite","composite","composite","composite","composites","compute_composites","compute_homotopies","compute_homotopy_step","compute_intermediate","compute_intermediate","compute_intermediates","compute_partial","degree","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","e3_page","extend_all","finalize","from","from","from","from_bytes","get_intermediate","hit_generator","homotopies","homotopies","homotopies","homotopies","homotopy","init","init","init","initialize_homotopies","intermediates","intermediates","intermediates","into","into","into","max_s","max_s","max_t","max_t","new","new","new","prime","save_dir","save_dir","shift_s","shift_s","shift_t","shift_t","shift_t","source","source","source","target","target","target","target","to_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","underlying","underlying","underlying","0","Config","IfNoSave","LoadQuasiInverseOption","No","QueryModuleResolution","STATIC_MODULES_PATH","Timer","Yes","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","construct","construct_nassau","construct_standard","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","fmt","from","from","from","get_unit","init","init","into","into","iter_s_t","load_module_json","module","ne","parse_module_name","print_element","query_module","query_module_only","secondary_job","timer","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","unicode_num","0","Timer","borrow","borrow_mut","deref","deref_mut","drop","end","from","init","into","start","try_from","try_into","type_id","PENALTY_UNIT","Yoneda","compute_kernel_image","operation_drop","rate_adem_operation","rate_milnor_operation","rate_operation","split_mut_borrow","yoneda_representative","yoneda_representative_element","yoneda_representative_with_strategy"],"q":["ext","","","","","","","","","ext::chain_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::chain_complex::finite_chain_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::nassau","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::resolution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::resolution_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::save","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::secondary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::utils::timer","","","","","","","","","","","","","","","ext::yoneda","","","","","","","","","",""],"d":["","","This module implements Nassau’s algorithm. The main …","This module exports the <code>Resolution</code> object, which is a …","This module defines <code>ResolutionHomomorphism</code>, which is a …","","","A module containing various utility functions related to …","","","","An augmented chain complex is a map of chain complexes C …","A bounded chain complex is a chain complex C for which C_s …","A chain complex is defined to start in degree 0. The …","","<code>chain_maps</code> is required to be non-empty","","","","","","","","","","","","An iterator returned by <code>ChainComplex::iter_stem</code>","","","","Apply the quasi-inverse of the (s, t)th differential to …","","","","","","","","","","","","","","","","","","","","Ensure all bidegrees less than or equal to (s, t) have …","","","","","","","","This returns the differential starting from the sth module.","","","","","","","Computes the filtration one product. This returns None if …","","","","","","If the complex has been computed at bidegree (s, t). This …","","","","","","","","","","","","Iterate through all defined bidegrees in increasing order …","","","","","","","","","","","","","The first s such that <code>self.module(s)</code> is not defined.","","","","","","A directory used to save information about the chain …","Get the save file of a bidegree","","","","","","","","","","","","","","","","","","","","","","","","","","","","This currently crashes if <code>s</code> is greater than the s degree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This should be used when you want an entry of the profile …","","Some magic constants used in the save file","A Milnor subalgebra to be used in Nassau’s algorithm. …","A resolution of <code>S_2</code> using Nassau’s algorithm. This aims …","See <code>resolution::SenderData</code>. This differs by not having the …","","See <code>MilnorSubalgebra::iter_signatures</code>.","An iterator that iterates through a sequence of …","","","","","","","","","","","","","","","","","","","","This function resolves up till a fixed stem instead of a …","","","","","","","","","","","","","","","","","","","","","","","","This function prepares the Resolution object to perform …","","","","","","","","","","Computes the signature of an element","","","","","","","","","","","","","","","","","Iterate through all signatures of this algebra that …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Give a list of basis elements in degree <code>degree</code> that has …","Get the matrix of a free module homomorphism when …","","Step resolution for s = 0","Step resolution for s = 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The algebra with trivial profile, corresponding to the …","","","","This is the maximum number of new generators we expect in …","A minimal resolution of a chain complex. The functions …","In <code>Resolution::compute_through_stem</code> and …","","","","","","","","","","","","This function resolves up till a fixed stem instead of a …","","","","","","","","","","This function prepares the Resolution object to perform …","","","Gets the kernel of the differential starting at $(s, t)$. …","","","","","","","","For each <em>internal</em> degree, store the kernel of the most …","Whether we should keep the quasi-inverses of the …","","","","","","","","","Whether this bidegree was newly calculated or have already …","","","","","","","The sender object used to send the <code>SenderData</code>. We put this …","","","Whether we should save newly computed data to the disk. …","Call our resolution $X$, and the chain complex to resolve …","","","","","","","","","","","A chain complex homomorphims from a <code>FreeChainComplex</code>. This …","Given a chain map $f: C \\\\to C’$ between free chain …","","","","","","","Extend the resolution homomorphism such that it is defined …","Extend the resolution homomorphism as far as possible, as …","Extends the resolution homomorphism up to a given range. …","Extend the <code>ResolutionHomomorphism</code> to be defined on …","Extend the resolution homomorphism such that it is defined …","","","Construct a chain map that lifts a given module …","Returns the chain map on the <code>s</code>th source module.","","","","","","","","","","","","","","","","","","The quasi-inverse of the augmentation map","A chain homotopy","A chain map","","In addition to checking the checksum, we also keep track …","The differential and augmentation map in a resolution","The kernel of a resolution differential","The differential with Nassau’s algorithm. This does not …","The quasi-inverse data in Nassau’s algorithm","The quasi-inverse of the resolution differential","","","Secondary composite","A secondary homotopy","Intermediate data used by secondary code","","","","","","","","","","","","","","","Arguments","","","","","","","","","","","","","","","","","","","","","","","","","This panics if there is no save dir","","","","","","","","","","","","","","","","Open the file pointed to by <code>path</code> as a <code>Box&lt;dyn Read&gt;</code>. If …","","A DashSet&gt; of files that are currently opened and being …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the composite can hit generators. This is true for …","A homotopy of a map A -&gt; M of pair modules. We assume this …","","When lifting a thing to its secondary version, often what …","","","","","","Compute the image of an element in the source under the …","","Add composites up to and including the specified degree","","","","","","","","","","","","","The component of the map on the R_B portion. gen_deg -&gt; …","gen_deg -&gt; gen_idx -&gt; composite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gen_deg -&gt; gen_idx -&gt; homotopy","s -&gt; t -&gt; idx -&gt; homotopy","","","","","","","","","","","","Exclusive max s","","Exclusive max t","","","","","","","","","","","","output_t = input_t - shift_t","","","","","","","","","","","","","","","","","","","","","","A config object is an object that specifies how a Steenrod …","Load quasi-inverses if there is no save file (so that …","Options for whether to load a quasi-inverse in a …","Never load quasi-inverses","The type returned by <code>query_module</code>. The value of this type …","","If the <code>logging</code> feature is enabled, this can be used to …","Always load quasi-inverses","The basis for the Steenrod algebra","","","","","","","This constructs a resolution resolving a module according …","See <code>construct</code>","See <code>construct</code>","","","","","","","","","","","","","Given a resolution, return a resolution of the unit, …","","","","","Given a function <code>f(s, t)</code>, compute it for every <code>s</code> in …","Given the name of a module file (without the <code>.json</code> …","The json specification of the module","","Given a module specification string, load a json …","Prints an element in the bidegree <code>(n, s)</code> to stdout. For …","Query the user for a module and a bidegree, and return a …","Query the user for a module and its save directory. See …","The value of the SECONDARY_JOB environment variable. This …","","","","","","","","","","","","Given an <code>n: usize</code>, return a UTF-8 character that best …","","If the <code>logging</code> feature is enabled, this can be used to …","","","","","","","","","","","","","","","","This function does the following computation:","","","","","","This function produces a quasi-isomorphic quotient of <code>cc</code> …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,3,0,4,0,0,0,4,1,2,1,2,0,3,1,2,1,4,5,6,4,5,6,7,5,0,3,7,6,8,2,2,2,2,1,1,1,2,4,5,6,4,5,6,1,2,9,4,5,6,10,8,0,4,5,6,8,1,1,1,1,2,4,5,6,4,5,6,5,1,2,1,10,5,1,2,1,2,9,5,5,5,1,8,1,2,5,6,1,1,2,1,3,7,4,5,6,4,5,6,4,5,6,1,2,9,0,0,9,7,9,9,7,9,7,7,9,7,7,9,7,9,7,9,7,9,7,9,9,7,9,9,7,9,7,9,7,9,7,9,7,9,7,9,7,9,7,9,7,9,7,9,9,9,7,9,9,7,7,7,9,7,9,7,9,7,9,7,9,11,11,12,0,0,0,0,0,11,0,0,13,13,14,15,16,11,13,12,14,15,16,11,13,12,13,13,12,12,13,13,15,16,16,14,15,16,11,13,12,14,15,16,11,13,12,13,13,14,15,16,11,13,12,13,12,14,15,16,11,13,12,12,13,12,13,13,14,15,16,11,13,12,14,15,16,11,13,12,15,16,12,13,13,13,13,13,13,13,13,15,16,13,12,13,15,16,13,12,13,12,14,13,13,14,14,13,13,16,12,12,12,12,13,13,13,13,16,14,13,13,12,12,12,12,14,15,16,11,13,12,14,15,16,11,13,12,14,15,16,11,13,12,13,12,13,13,12,0,0,0,17,17,18,17,18,17,17,17,17,17,17,17,17,18,17,18,17,17,17,18,17,17,18,17,17,17,17,17,18,17,18,17,17,17,17,17,17,17,17,17,17,17,18,17,17,18,17,17,18,18,17,17,17,17,18,17,18,17,18,17,18,17,17,17,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,0,0,20,20,20,20,20,0,0,20,20,20,21,22,23,21,22,23,20,21,22,23,20,20,20,20,23,23,21,22,23,20,21,22,23,20,21,21,22,22,23,20,20,20,23,21,20,21,22,23,20,23,23,21,22,23,20,21,22,23,20,23,20,20,20,21,22,0,23,0,21,22,22,22,20,23,20,23,20,21,22,23,20,21,22,23,20,21,22,23,20,23,21,21,23,21,24,0,24,0,0,0,0,24,24,24,25,26,25,26,24,25,27,25,26,27,25,26,27,24,26,27,25,26,24,24,24,24,27,24,24,25,25,26,27,25,26,27,25,26,27,27,24,25,25,26,27,25,24,26,24,27,26,27,27,25,26,27,24,24,27,27,25,26,27,24,27,24,27,25,26,27,24,24,27,24,27,24,27,26,24,27,26,24,27,25,26,25,25,26,27,25,26,27,25,26,27,24,27,27,28,0,29,0,29,0,0,0,29,30,29,30,29,30,30,30,0,0,0,29,30,29,30,29,30,30,30,30,29,29,30,0,29,30,29,30,0,0,30,30,0,0,0,0,0,0,30,29,30,30,30,30,29,30,29,30,0,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arc",3]],[[],["arc",3]],[[["u32",15],["i32",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["u32",15]],["arc",3]],null,null,[[["u32",15],["i32",15],["usize",15]],["string",3]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["usize",15]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["isize",15]],[[["i32",15],["usize",15],["u32",15],["i32",15]],["option",4,[["vec",3,[["vec",3,[["u32",15]]]]]]]],null,[[]],[[]],[[]],[[],["string",3]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["usize",15]],[[["fpvector",4],["u32",15],["u32",15],["i32",15],["usize",15]]],[[["fpvector",4],["u32",15],["u32",15],["i32",15],["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["stemiterator",3]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[],["u32",15]],null,[[],["i32",15]],[[],["i32",15]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],null,[[]],null,[[],["option",4]],[[],["u32",15]],[[["u32",15],["i32",15]],["usize",15]],[[],["validprime",3]],[[],["validprime",3]],null,null,[[],["option",4,[["path",3]]]],[[["savekind",4],["u32",15],["i32",15]],["savefile",3]],[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["arc",3]],[[],["arc",3]],null,null,null,[[],["arc",3]],[[],["arc",3]],[[["arc",3,[["chaincomplex",8]]],["vec",3,[["arc",3,[["modulehomomorphism",8]]]]]],["finiteaugmentedchaincomplex",3,[["modulehomomorphism",8],["chaincomplex",8]]]],[[]],[[]],[[]],[[]],null,[[["arc",3]]],[[["u32",15]],["arc",3]],null,[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],null,[[["usize",15]]],[[["usize",15]]],[[["finiteaugmentedchaincomplex",3]],["finitechaincomplex",3]],[[]],[[]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["vec",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["finitechaincomplex",3,[["module",8],["fullmodulehomomorphism",3,[["module",8]]]]]],[[],["finiteaugmentedchaincomplex",3,[["module",8],["fullmodulehomomorphism",3,[["module",8]]],["fullmodulehomomorphism",3,[["module",8]]]]]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[],["u32",15]],[[],["u32",15]],[[],["i32",15]],[[],["i32",15]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],null,[[["vec",3,[["arc",3]]],["vec",3,[["arc",3]]]]],[[],["u32",15]],[[],["u32",15]],[[]],[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["arc",3]],[[],["arc",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["arc",3]],[[["u32",15],["i32",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["arc",3]],null,[[],["milnorsubalgebra",3]],[[]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["arc",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[["u32",15],["i32",15]],["bool",15]],[[],["bool",15]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],null,null,[[["u32",15]],["i32",15]],[[],["i32",15]],[[["u32",15]],["arc",3]],null,[[],["str",15]],null,[[]],[[["milnorsubalgebra",3],["i32",15]]],[[["arc",3]]],[[["vec",3,[["u8",15]]]]],[[["arc",3],["option",4,[["pathbuf",3]]]],["result",6]],[[],["option",4]],[[],["option",4]],[[],["u32",15]],[[["u32",15],["i32",15]],["milnorsubalgebra",3]],[[],["validprime",3]],null,null,[[],["option",4,[["path",3]]]],null,[[["u32",15],["i32",15],["sender",3]]],null,[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[["string",3]]],null,[[],["result",6,[["vec",3,[["ppartentry",6]]]]]],[[["milnoralgebra",3],["freemodule",3],["i32",15]]],[[["freemodulehomomorphism",3],["i32",15]],["matrix",3]],[[],["result",6]],[[["i32",15]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15],["milnorsubalgebra",3]]],null,null,[[],["arc",3]],null,[[],["result",6]],[[]],[[],["string",3]],[[],["i32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["option",4],["fpvector",4],["matrix",3],["augmentedmatrix",3]],["result",6]],[[]],[[],["arc",3]],null,[[],["vec",3,[["ppartentry",6]]]],null,null,null,[[],["arc",3]],[[["u32",15],["i32",15]],["bool",15]],[[]],[[]],[[]],[[]],[[["u32",15]],["arc",3]],null,null,[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["arc",3]],null,[[["usize",15]]],[[["usize",15]]],[[["u32",15]]],[[]],[[]],[[["u32",15],["i32",15]],["subspace",3]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,null,[[["u32",15]],["i32",15]],[[],["i32",15]],[[["u32",15]],["arc",3]],null,[[],["str",15]],null,[[["arc",3]]],null,[[["arc",3],["option",4,[["pathbuf",3]]]],["result",6]],[[],["u32",15]],null,[[],["option",4,[["path",3]]]],null,[[["u32",15],["i32",15],["bool",15],["sender",3]]],null,[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[["string",3]]],null,[[["u32",15],["i32",15]]],null,[[],["arc",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["arc",3]],null,null,[[["slicemut",4],["u32",15],["u32",15],["i32",15],["usize",15]]],[[],["arc",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15],["i32",15]]],[[]],[[["u32",15]]],[[["u32",15],["i32",15],["option",4,[["matrix",3]]]],["range",3,[["i32",15]]]],[[["u32",15],["i32",15]]],[[]],[[["string",3],["arc",3],["arc",3],["u32",15],["i32",15]]],[[["string",3],["arc",3],["arc",3]]],[[["u32",15]],["arc",3,[["freemodulehomomorphism",3]]]],[[["u32",15]],["freemodulehomomorphism",3]],[[],["usize",15]],[[]],null,[[],["str",15]],null,[[["string",3],["arc",3],["arc",3],["u32",15],["i32",15]]],[[],["i32",15]],[[],["option",4,[["path",3]]]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["savekind",4]],[[]],[[["path",3]],["result",6]],[[["pathbuf",3],["bool",15]]],[[["pathbuf",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["savekind",4]],["bool",15]],[[],["bool",15]],[[["pathbuf",3]],["bool",15]],[[],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["pathbuf",3]],["pathbuf",3]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],null,[[],["u32",15]],[[],["str",15]],[[]],[[["pathbuf",3]]],[[]],[[["pathbuf",3]],["option",4,[["box",3,[["read",8]]]]]],[[["pathbuf",3]],["option",4,[["box",3,[["read",8]]]]]],[[],["mutex",3]],null,[[],["result",6,[["usize",15]]]],[[],["result",6]],null,[[]],null,[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],[[],["result",6,[["usize",15]]]],[[],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["bool",15]]],[[["u32",15],["i32",15],["usize",15],["freemodulehomomorphism",3],["freemodulehomomorphism",3]]],[[["u32",15],["i32",15],["compositedata",6],["option",4,[["path",3]]]]],[[],["arc",3]],[[],["arc",3]],[[],["arc",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["compositedata",6]],[[["i32",15],["usize",15]],["secondarycomposite",3]],[[["u32",15]],["compositedata",6]],null,null,[[]],[[]],[[["u32",15],["i32",15]],["range",3,[["i32",15]]]],[[["u32",15],["i32",15],["usize",15]],["fpvector",4]],[[["u32",15],["i32",15],["usize",15]],["fpvector",4]],[[]],[[["u32",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["sseq",3,[["adams",3]]]],[[]],[[]],[[]],[[]],[[]],[[["arc",3,[["freemodule",3]]],["i32",15],["bool",15]],["result",6]],[[["u32",15],["i32",15],["usize",15]],["fpvector",4]],null,[[],["oncebivec",3]],[[],["oncebivec",3]],null,null,[[["u32",15]],["secondaryhomotopy",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["dashmap",3]],[[],["dashmap",3]],null,[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[["arc",3,[["freemodule",3]]],["i32",15],["bool",15]]],[[["arc",3,[["freemodule",3]]],["arc",3,[["freemodule",3]]],["i32",15],["bool",15]]],[[["arc",3]]],[[],["validprime",3]],[[],["option",4,[["path",3]]]],[[],["option",4,[["path",3]]]],[[],["u32",15]],[[],["u32",15]],[[],["i32",15]],[[],["i32",15]],null,[[],["arc",3]],[[],["arc",3]],null,[[],["arc",3]],[[],["arc",3]],null,null,[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["arc",3]],[[],["arc",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["config",3]],[[]],[[["option",4,[["pathbuf",3]]]],["result",6,[["querymoduleresolution",6]]]],[[["option",4,[["pathbuf",3]]]],["result",6,[["resolution",3,[["fdmodule",3,[["milnoralgebra",3]]]]]]]],[[["option",4,[["pathbuf",3]]]],["result",6,[["resolution",3,[["ccc",6]]]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["bool",15]],["loadquasiinverseoption",4]],[[]],[[]],[[["arc",3,[["querymoduleresolution",6]]]],["result",6]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["u32",15],["i32",15],["u32",15]]],[[["str",15]],["result",6,[["value",4]]]],null,[[["config",3]],["bool",15]],[[["str",15]],["result",6,[["value",4]]]],[[["slice",4],["i32",15],["u32",15]]],[[["option",4,[["algebratype",4]]]],["result",6,[["querymoduleresolution",6]]]],[[["str",15],["option",4,[["algebratype",4]]]],["result",6,[["querymoduleresolution",6]]]],[[],["option",4,[["u32",15]]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["char",15]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["arguments",3]]],[[]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["qm",3],["option",4],["option",4],["option",4,[["subspace",3]]],["i32",15]]],[[["ademalgebra",3],["i32",15],["usize",15]],["i32",15]],[[["ademalgebra",3],["i32",15],["usize",15]],["i32",15]],[[["milnoralgebra",3],["i32",15],["usize",15]],["i32",15]],[[["arc",3],["i32",15],["usize",15]],["i32",15]],[[["usize",15],["usize",15]]],[[["arc",3],["chainmap",3,[["freemodulehomomorphism",3]]]],["yoneda",6]],[[["arc",3],["u32",15],["i32",15]],["yoneda",6]],[[["arc",3],["chainmap",3,[["freemodulehomomorphism",3]]]],["yoneda",6]]],"p":[[8,"ChainComplex"],[8,"CochainComplex"],[8,"AugmentedChainComplex"],[4,"ChainComplexGrading"],[3,"StemIterator"],[3,"ChainMap"],[3,"FiniteAugmentedChainComplex"],[8,"FreeChainComplex"],[3,"FiniteChainComplex"],[8,"BoundedChainComplex"],[4,"Magic"],[3,"MilnorSubalgebra"],[3,"Resolution"],[3,"SenderData"],[3,"SubalgebraIterator"],[3,"SignatureIterator"],[3,"Resolution"],[3,"SenderData"],[3,"ResolutionHomomorphism"],[4,"SaveKind"],[3,"ChecksumWriter"],[3,"ChecksumReader"],[3,"SaveFile"],[8,"SecondaryLift"],[3,"SecondaryComposite"],[3,"SecondaryHomotopy"],[3,"SecondaryResolution"],[3,"Timer"],[4,"LoadQuasiInverseOption"],[3,"Config"]]},\
"filtration_one":{"doc":"This computes all available filtration one products for a …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"fp":{"doc":"","t":[17,17,17,17,17,11,14,0,11,11,11,11,11,11,0,0,0,11,0,0,0,0,17,17,7,17,17,17,6,17,17,17,17,17,17,14,3,5,12,5,5,5,11,11,11,11,11,11,11,5,5,11,11,11,5,12,5,5,5,5,5,5,11,5,11,11,11,5,3,3,3,3,3,3,12,12,12,12,12,12,12,12,0,12,0,12,12,12,0,12,12,0,0,12,12,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,3,3,3,3,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,14,11,11,11,11,5,11,11,11,11,11,11,5,5,5,5,5,11,10,10,11,11,11,11,11,11,11,12,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,5,0,6,5,5,5,4,4,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,6,6,6,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["MAX_MULTINOMIAL_LEN","NUM_PRIMES","ODD_PRIMES","PRIMES","PRIME_TO_INDEX_MAP","add_assign","const_for","constants","deserialize","fmt","fmt","from","from","from","limb","matrix","prime","serialize","simd","vector","vector_2","vector_inner","BINOMIAL4_TABLE","BINOMIAL4_TABLE_SIZE","BINOMIAL_TABLE","BITS_PER_LIMB","BYTES_PER_LIMB","INVERSE_TABLE","Limb","MAX_MULTINOMIAL_LEN","MAX_PRIME","NOT_A_PRIME","NUM_PRIMES","PRIMES","PRIME_TO_INDEX_MAP","populate_binomial_table","LimbBitIndexPair","add","bit_index","bit_length","bit_length_const","bitmask","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","entries_per_limb","entries_per_limb_const","from","init","into","is_reduced","limb","limb_bit_index_pair","number","pack","range","reduce","sign_rule","to_owned","truncate","try_from","try_into","type_id","unpack","AugmentedMatrix","Matrix","MatrixSliceMut","QuasiInverse","Subquotient","Subspace","col_end","col_start","columns","dimension","end","gens","image","inner","m4ri","matrix","matrix_inner","p","pivots","preimage","quasi_inverse","quotient","start","subquotient","subspace","vectors","vectors","M4riTable","add","borrow","borrow_mut","clear","columns","data","default","deref","deref_mut","drop","fmt","from","generate","init","into","is_empty","len","min_limb","new","reduce","reduce_naive","rows","rows","try_from","try_into","type_id","AugmentedMatrix","Matrix","MatrixSliceMut","add_assign","add_identity","add_masked","apply","as_slice_mut","assign","augmented_from_vec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","col_end","col_start","columns","columns","columns","compute_image","compute_image","compute_kernel","compute_kernel","compute_quasi_inverse","compute_quasi_inverse","compute_quasi_inverses","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop_first","end","eq","equivalent","extend_column_dimension","extend_column_dimension","extend_image","extend_to_surjection","find_first_row_in_block","find_pivots_permutation","fmt","fmt","from","from","from","from_bytes","from_vec","index","index_mut","init","init","init","initialize_pivots","inner","into","into","into","into_matrix","is_zero","iter","iter","iter_mut","iter_mut","mul_assign","new","new","new_with_capacity","new_with_capacity","p","par_iter_mut","par_iter_mut","pivots","pivots","pivots_mut","prime","read_pivot","row","row","row_mut","row_mut","row_op","row_op_naive","row_reduce","row_segment","row_segment_mut","row_slice","rows","rows","segment","set_to_zero","slice_mut","split_borrow","start","to_bytes","to_owned","to_owned","to_string","to_vec","trim","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vectors","vectors","write_pivot","QuasiInverse","apply","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","from_bytes","image","image_dimension","init","into","ne","new","pivots","preimage","preimage","prime","source_dimension","stream_quasi_inverse","target_dimension","to_bytes","to_owned","try_from","try_into","type_id","Subquotient","add_gen","ambient_dimension","borrow","borrow_mut","clear_gens","clone","clone_into","complement_pivots","deref","deref_mut","dimension","dimension","drop","fmt","from","gens","gens","init","into","is_empty","new","new_full","prime","quotient","quotient","quotient_dimension","quotient_pivots","reduce","reduce_by_quotient","reduce_matrix","set_to_full","subquotient","subspace_dimension","subspace_gens","to_owned","to_string","try_from","try_into","type_id","zeros","Subspace","add_basis_elements","add_vector","add_vectors","ambient_dimension","basis","borrow","borrow_mut","clone","clone_into","contains","deref","deref_mut","dimension","drop","empty_space","entire_space","eq","equivalent","fmt","fmt","from","from_bytes","init","into","is_empty","iter","matrix","ne","new","pivots","prime","reduce","set_to_entire","set_to_zero","to_bytes","to_owned","to_string","try_from","try_into","type_id","0","Binomial","BinomialIterator","BitflagIterator","InvalidPrimeError","ValidPrime","binomial","binomial2","binomial4","binomial4_rec","binomial_odd","binomial_odd_is_zero","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","direct_binomial","drop","drop","drop","drop","eq","equivalent","factor_pk","flag","fmt","fmt","fmt","fmt","from","from","from","from","from_str","impl_binomial","init","init","init","init","integer_power","into","into","into","into","into_iter","into_iter","inverse","is_valid_prime","log2","logp","minus_one_to_the_n","multinomial","multinomial2","multinomial_odd","ne","new","new","new","new_fixed_length","next","next","p","power_mod","remaining","serialize","set_bit_iterator","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","value","LIMBS_PER_SIMD","add_simd","x86_64","SimdLimb","load","store","xor","FpVector","FpVectorNonZeroIterator","Slice","SliceMut","_2","_2","_2","_2","_3","_3","_3","_3","_5","_5","_5","_5","_7","_7","_7","_7","add","add","add_assign","add_basis_element","add_basis_element","add_carry","add_masked","add_nosimd","add_offset","add_offset_nosimd","add_tensor","add_truncate","add_unmasked","as_slice","as_slice","as_slice_mut","assign","assign","assign_partial","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copy","copy_from_slice","density","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","dispatch_vector","dispatch_vector_inner","drop","drop","drop","drop","entry","entry","eq","equivalent","extend_len","first_nonzero","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_slice","get_hash","hash","impl_try_into","init","init","init","init","into","into","into","into","into_iter","is_empty","is_empty","is_zero","is_zero","iter","iter","iter_nonzero","iter_nonzero","len","len","limbs","limbs_mut","match_p","multiunzip","ne","new","new_with_capacity","next","next","num_limbs","padded_len","prime","prime","prime","scale","scale","serialize","set_entry","set_entry","set_scratch_vector_size","set_to_zero","set_to_zero","sign_rule","slice","slice","slice_mut","slice_mut","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","trim_start","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_bytes","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","FpVector","FpVectorNonZeroIterator","Slice","SliceMut","from_bytes","from_slice","new","new_with_capacity","num_limbs","padded_len","to_bytes","update_from_bytes","AddShiftLeftData","AddShiftRightData","FpVectorIterator","FpVectorNonZeroIteratorP","FpVectorP","SliceMutP","SliceP","add","add","add_basis_element","add_basis_element","add_carry","add_carry_limb","add_masked","add_nosimd","add_offset","add_offset_nosimd","add_shift_left","add_shift_none","add_shift_right","add_tensor","add_truncate","add_unmasked","as_slice","as_slice","as_slice_mut","assign","assign","assign_partial","bit_length","bit_mask","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copy","copy_from_slice","counter","cur_limb","cur_limb","cur_limb_entries_left","density","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dim","drop","drop","drop","drop","drop","drop","drop","end","end","entries_left","entries_per_limb_m_1","entry","entry","eq","equivalent","extend_len","first_nonzero","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bytes","from_raw_parts","from_slice","get_hash","hash","idx","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","is_zero","is_zero","iter","iter","iter_nonzero","iter_nonzero","len","len","len","len","limb_index","limb_index","limb_masks","limb_range","limb_range_inner","limbs","limbs","limbs","limbs","limbs","limbs","limbs_mut","mask_first_limb","mask_first_limb_a","mask_first_limb_b","mask_last_limb_a","mask_last_limb_a","mask_last_limb_b","mask_last_limb_b","mask_middle_limb_a","mask_middle_limb_a","mask_middle_limb_b","mask_middle_limb_b","max_limb_mask","max_mask","max_mask","min_limb_mask","min_mask","min_mask","min_source_limb","min_source_limb","min_target_limb","min_target_limb","multiunzip","ne","new","new","new","new","new","new_","new_with_capacity","new_with_capacity_","next","next","num_limbs","number_of_source_limbs","number_of_source_limbs","number_of_target_limbs","number_of_target_limbs","offset","offset_shift","offset_shift","padded_len","prime","prime","prime","reduce_limbs","scale","scale","set_entry","set_entry","set_scratch_vector_size","set_to_zero","set_to_zero","sign_rule","skip_n","slice","slice","slice_mut","slice_mut","start","start","tail_shift","tail_shift","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","trim_start","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_bytes","zero_bits","zero_bits"],"q":["fp","","","","","","","","","","","","","","","","","","","","","","fp::constants","","","","","","","","","","","","","","fp::limb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::m4ri","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::matrix_inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::quasi_inverse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::subquotient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::subspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::prime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::simd","","","fp::simd::x86_64","","","","fp::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::vector::FpVector","","","","fp::vector::FpVectorNonZeroIterator","","","","fp::vector::Slice","","","","fp::vector::SliceMut","","","","fp::vector_2","","","","","","","","","","","","fp::vector_innerd":["","The number of primes that are supported.","","An array containing the first <code>NUM_PRIMES</code> prime numbers.","For any integer <code>i</code> less than or equal to <code>MAX_PRIME</code>, …","","","","","","","","","","","","","","","This module is provides wrappers around the contents of …","This module replaces <code>vector</code> when <code>odd-primes</code> is disabled. …","","","","","The number of bits each <code>Limb</code> occupies.","The number of bytes each <code>Limb</code> occupies.","","","","The <code>MAX_PRIME</code>th prime number. Constructing a <code>ValidPrime</code> …","A sentinel value. <code>PRIME_TO_INDEX_MAP[i] == NOT_A_PRIME</code> if …","The number of primes that are supported.","An array containing the first <code>NUM_PRIMES</code> prime numbers.","For any integer <code>i</code> less than or equal to <code>MAX_PRIME</code>, …","","A struct containing the information required to access a …","Return the <code>Limb</code> whose <code>i</code>th entry is …","","Return the number of bits an element of $\\\\mathbb{F}_P$ …","Return the number of bits an element of $\\\\mathbb{F}_P$ …","If <code>l</code> is a limb of elements of $\\\\mathbb{F}_p$, then …","","","","","","","","The number of elements of $\\\\mathbb{F}_p$ that fit in a …","The number of elements of $\\\\mathbb{F}_p$ that fit in a …","","","","Check whether or not a limb is reduced, i.e. whether every …","","","Return the number of limbs required to hold <code>dim</code> entries.","Given an interator of <code>u32</code>’s, pack all of them into a …","Return the <code>Range&lt;usize&gt;</code> starting at the index of the limb …","Return the <code>Limb</code> whose entries are the entries of <code>limb</code> …","","","Return either <code>Some(sum)</code> if no carries happen in the limb, …","","","","Give an iterator over the entries of <code>limb</code>.","This models an augmented matrix.","A matrix! In particular, a matrix with values in F_p. The …","","Given a matrix M, a quasi-inverse Q is a map from the …","","A subspace of a vector space.","","","","","","","","","","","","","The pivot columns of the matrix. <code>pivots[n]</code> is <code>k</code> if column <code>n</code>…","","","","","","","","","M4RI works as follows — first row reduce k rows using …","Add a row to the table.","","","Clear the contents of the table","The list of pivot columns of the rows, in the format …","The 2^k linear combinations of the k rows, apart from the …","","","","","","","Generates the table from the known data <code>num</code> is the number …","","","Whether the table has no rows","Number of rows in the M4riTable","The smallest non-zero limb in this table. We use this when …","Create a table with space for <code>k</code> vectors, each with <code>cols</code> …","","","Get the list of pivot rows","The indices of new rows in the table","","","","This models an augmented matrix.","A matrix! In particular, a matrix with values in F_p. The …","","","","For each row, add the <code>v[i]</code>th entry of <code>other</code> to <code>self</code>.","Applies a matrix to a vector.","","","Produces a padded augmented matrix from an <code>&amp;[Vec&lt;u32&gt;]</code> …","","","","","","","","","","","","","","Gets the number of columns in the matrix.","","Computes the quasi-inverse of a matrix given a rref of […","","Computes the kernel from an augmented matrix in rref. To …","","Computes the quasi-inverse of a matrix given a rref of […","","This function computes quasi-inverses for matrices A, B …","","","","","","","","","","","","","","","","","","Given a matrix in rref, say [A|B|C], where B lies between …","Given a matrix M in rref, add rows to make the matrix …","Given a row reduced matrix, find the first row whose pivot …","This is very similar to row_reduce, except we only need to …","Example","","","","","","Produces a Matrix from an <code>&amp;[Vec&lt;u32&gt;]</code> object. If the …","Returns the ith row of the matrix","Returns the ith row of the matrix","","","","Set the pivots to -1 in every entry. This is called by …","","","","","","","","","","","","Produces a new matrix over F_p with the specified number …","","","","","","","","The pivot columns of the matrix. <code>pivots[n]</code> is <code>k</code> if column <code>n</code>…","","","Read a vector of <code>isize</code> of length <code>dim</code>.","","","","","Performs a row operation using <code>pivot_column</code> as the pivot …","A version of <code>Matrix::row_op</code> without the zero assumption.","Perform row reduction to reduce it to reduced row echelon …","","","","","Gets the number of rows in the matrix.","","","","Mutably borrows <code>x[i]</code> and <code>x[j]</code>.","","","","","","","","","","","","","","","","","","","Read a vector of <code>isize</code>","Given a matrix M, a quasi-inverse Q is a map from the …","Apply the quasi-inverse to an input vector and add a …","","","","","","","","","","","","","","","","","","","","","","","","Given a data file containing a quasi-inverse, apply it to …","","","","","","","","","","","","","","","The pivot columns of the complement to the subspace","","","","","","","","","","","","","Create a new subquotient of an ambient space of dimension …","Create a new subquotient of an ambient space of dimension …","","","","","","Given a vector <code>elt</code>, project <code>elt</code> to the complement and …","Project the vector onto the complement of the quotient …","","Set the subquotient to be the full ambient space …","Given a chain of subspaces <code>subspace</code> &lt; <code>space</code> &lt; k^…","The dimension of the subspace part of the subquotient.","The generators of the subspace part of the subquotient.","","","","","","","A subspace of a vector space.","","This adds a vector to the subspace. This function assumes …","This adds some rows to the subspace","","Returns a basis of the subspace.","","","","","","","","","","","","","","","","","","","","Whether the subspace is empty. This assumes the subspace …","","","","","","","Projects a vector to a complement of the subspace. The …","Sets the subspace to be the entire subspace.","Sets the subspace to be the zero subspace.","","","","","","","","A number satisfying the Binomial trait supports computing …","Iterates through all numbers with the same number of bits. …","","","","Binomial coefficient n choose k.","mod 2 binomial coefficient n choose k","Binomial coefficients mod 4. We pre-compute the …","Compute binomial coefficients mod 4 using the recursion …","Compute odd binomial coefficients mod p, where p is odd. …","Checks whether n choose k is zero mod p. Since we don’t …","","","","","","","","","","","","","","","","","","","","","This uses a lookup table for n choose k when n and k are …","","","","","","","Factor $n$ as $p^k m$. Returns $(k, m)$.","","","","","","","","","","","","","","","","Computes b^e.","","","","","","","","","Compute the base 2 log of a number, rounded down to the …","Discrete log base p of n.","","Multinomial coefficient of the list l","mod 2 multinomial coefficient","Computes the multinomial coefficient mod p using Lucas’ …","","","","","","","","","Compute b^e mod p.","","","","","","","","","","","","","","","","","","","","Get the underlying prime. This is the same function as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Example","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterator over non-zero entries of an FpVector. This is …","An <code>FpVectorP</code> is a vector over $\\\\mathbb{F}_p$ for a fixed …","A <code>SliceMutP</code> is a mutable slice of an <code>FpVectorP</code>. This …","A SliceP is a slice of an FpVectorP. This immutably …","","","","","","","Given a mask v, add the <code>v[i]</code>th entry of <code>other</code> to the <code>i</code>th …","","Add <code>other</code> to <code>self</code> on the assumption that the first <code>offset</code> …","Add <code>other</code> to <code>self</code> on the assumption that the first <code>offset</code> …","","Adds <code>c</code> * <code>other</code> to <code>self</code>. <code>other</code> must have the same length, …","","<code>coeff</code> need not be reduced mod p. Adds v otimes w to self.","","Given a mask v, add the <code>i</code>th entry of <code>other</code> to the <code>v[i]</code>th …","","","","","TODO: improve efficiency","A version of <code>FpVectorP::assign</code> that allows <code>other</code> to be …","","","","","","","","","","","","","","","","","","","","","Generates a version of itself with a shorter lifetime","This replaces the contents of the vector with the contents …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function ensures the length of the vector is at least …","Find the index and value of the first non-zero entry of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TODO: implement prime 2 version","","","","","","","","","","","This function underflows if <code>self.end == 0</code>, which happens …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This clears the vector and sets the length to <code>len</code>. This is …","","","","","","","","","","","","","","","Converts a slice to an owned FpVectorP. This is vastly …","","","","Permanently remove the first <code>n</code> elements in the vector. <code>n</code> …","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,0,0,1,1,2,2,2,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,4,4,4,4,4,4,0,0,4,4,4,0,4,0,0,0,0,0,0,4,0,4,4,4,0,0,0,0,0,0,0,5,5,6,7,8,7,9,8,0,10,0,6,6,9,0,7,8,0,0,5,6,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,6,5,5,6,6,6,6,5,6,8,5,6,8,6,8,6,8,5,5,5,6,6,6,8,6,8,6,8,8,5,6,8,8,5,6,8,8,5,6,8,8,8,6,6,6,8,6,6,6,6,6,6,5,6,8,6,6,6,6,5,6,8,6,8,5,6,8,8,6,5,6,5,6,6,6,8,6,8,6,5,6,6,6,6,6,6,5,6,5,6,6,6,6,8,8,5,5,6,8,6,6,6,8,6,6,8,6,6,6,5,6,8,5,6,8,5,6,8,5,6,6,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,0,0,0,0,0,13,13,13,13,13,13,14,15,16,12,14,15,16,12,16,16,14,15,16,16,12,14,15,16,12,16,0,14,15,16,12,16,16,0,14,16,16,12,12,14,15,16,12,16,0,14,15,16,12,0,14,15,16,12,14,15,0,0,0,0,0,13,13,13,16,14,15,16,14,14,15,16,0,14,16,14,16,16,12,14,15,16,16,12,14,15,16,12,14,15,16,12,16,15,0,0,0,0,0,0,0,0,0,0,0,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,18,20,18,18,20,18,20,18,18,18,20,18,20,18,20,18,18,20,18,17,18,19,20,17,18,19,20,18,19,18,19,20,18,18,17,18,19,20,17,18,19,20,18,0,0,17,18,19,20,18,19,18,18,18,18,18,18,19,19,20,17,18,19,19,19,19,20,20,20,18,18,18,18,0,17,18,19,20,17,18,19,20,17,18,19,18,19,18,19,18,19,18,19,18,18,0,17,18,18,18,17,17,18,18,18,19,20,18,20,18,18,20,18,18,20,18,18,19,18,20,18,18,19,19,18,19,18,17,18,19,20,17,18,19,20,17,18,19,20,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,37,38,37,38,37,37,38,37,37,37,38,38,38,38,37,38,37,38,37,37,38,37,39,39,40,41,39,42,37,43,38,40,41,39,42,37,43,38,37,43,37,43,38,37,39,39,42,42,37,40,41,39,42,37,43,38,40,41,39,42,37,43,38,42,40,41,39,42,37,43,38,43,38,39,39,37,43,37,37,37,37,37,43,38,40,41,39,42,37,37,43,43,38,38,37,37,37,37,37,42,40,41,39,42,37,43,38,40,41,39,42,37,43,38,39,42,37,43,37,43,37,43,37,43,39,37,43,37,39,42,43,43,43,37,39,42,37,43,38,37,40,41,41,40,41,40,41,40,41,40,41,43,40,41,43,40,41,40,41,40,41,42,37,40,41,39,42,37,37,37,37,39,42,37,40,41,40,41,43,40,41,37,37,43,38,38,37,38,37,38,37,37,38,37,39,37,43,37,38,43,38,40,41,37,37,43,43,37,43,37,40,41,39,42,37,43,38,40,41,39,42,37,43,38,40,41,39,42,37,43,38,37,40,41],"f":[null,null,null,null,null,[[["fpvector",6]]],null,null,[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["slice",6]],["slice",6]],[[["slicemut",6]],["slice",6]],[[["slicemut",6]],["slicemut",6]],null,null,null,[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15],["u64",15],["u32",15]],["u64",15]],null,[[["validprime",3]],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[]],[[]],[[],["limbbitindexpair",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["validprime",3]],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[]],[[["u64",15]],["bool",15]],null,[[["usize",15]],["limbbitindexpair",3]],[[["usize",15]],["usize",15]],[[["iterator",8]],["u64",15]],[[["usize",15],["usize",15]],["range",3,[["usize",15]]]],[[["u64",15]],["u64",15]],[[["u64",15],["u64",15]],["u32",15]],[[]],[[["u64",15]],["option",4,[["u64",15]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["usize",15]]],[[]],[[]],[[]],null,null,[[],["m4ritable",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["matrix",3]]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["usize",15]],null,[[["usize",15],["usize",15]]],[[]],[[["matrix",3],["usize",15]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["matrix",3]]],[[]],[[["matrix",3]]],[[["slicemut",4],["u32",15],["slice",4]]],[[],["matrixslicemut",3]],[[["matrix",3]]],[[["validprime",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["matrix",3]],[[],["augmentedmatrix",3]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],null,[[["usize",15],["usize",15]],["subspace",3]],[[],["subspace",3]],[[["usize",15]],["subspace",3]],[[],["subspace",3]],[[["usize",15],["usize",15]],["quasiinverse",3]],[[],["quasiinverse",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["matrix",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["matrix",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["augmentedmatrix",3]],null,[[],["bool",15]],[[],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15],["subspace",3],["usize",15]],["vec",3,[["usize",15]]]],[[["usize",15],["usize",15],["usize",15]],["vec",3,[["usize",15]]]],[[["usize",15]],["usize",15]],[[["iterator",8]],["vec",3,[["usize",15]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["validprime",3],["usize",15],["usize",15]],["result",6,[["matrix",3]]]],[[["validprime",3]],["matrix",3]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],null,[[]],[[]],[[]],[[],["matrix",3]],[[],["bool",15]],[[]],[[],["iter",3,[["fpvector",4]]]],[[]],[[],["itermut",3,[["fpvector",4]]]],[[["u32",15]]],[[["validprime",3],["usize",15],["usize",15]],["matrix",3]],[[["validprime",3],["usize",15]]],[[["validprime",3],["usize",15],["usize",15],["usize",15],["usize",15]],["matrix",3]],[[["validprime",3],["usize",15],["usize",15],["usize",15]]],null,[[]],[[]],[[]],null,[[]],[[],["validprime",3]],[[["usize",15]],["result",6,[["vec",3,[["isize",15]]]]]],[[["usize",15]],["slice",4]],[[["usize",15]],["slice",4]],[[["usize",15]],["slicemut",4]],[[["usize",15]],["slicemut",4]],[[["usize",15],["usize",15],["usize",15],["validprime",3]]],[[["usize",15],["usize",15],["usize",15],["validprime",3]]],[[],["usize",15]],[[["usize",15],["usize",15],["usize",15]],["slice",4]],[[["usize",15],["usize",15],["usize",15]],["slicemut",4]],[[["usize",15],["usize",15]],["matrixslicemut",3]],[[],["usize",15]],[[],["usize",15]],[[["usize",15],["usize",15]],["matrixslicemut",3]],[[]],[[["usize",15],["usize",15],["usize",15],["usize",15]],["matrixslicemut",3]],[[["usize",15],["usize",15]]],null,[[],["result",6]],[[]],[[]],[[],["string",3]],[[],["vec",3,[["vec",3,[["u32",15]]]]]],[[["usize",15],["usize",15],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["result",6]],null,[[["slicemut",4],["u32",15],["slice",4]]],[[]],[[]],[[],["quasiinverse",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["quasiinverse",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["validprime",3]],["result",6]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[["quasiinverse",3]],["bool",15]],[[["option",4,[["vec",3,[["isize",15]]]]],["matrix",3]]],[[],["option",4]],[[],["matrix",3]],null,[[],["validprime",3]],[[],["usize",15]],[[["validprime",3]],["result",6]],[[],["usize",15]],[[],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["slice",4]]],[[],["usize",15]],[[]],[[]],[[]],[[],["subquotient",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],null,[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],[[["validprime",3],["usize",15]]],[[["validprime",3],["usize",15]]],[[],["validprime",3]],[[["slice",4]]],null,[[],["usize",15]],[[]],[[["slicemut",4]],["vec",3,[["u32",15]]]],[[["slicemut",4]]],[[["matrix",3]],["vec",3,[["vec",3,[["u32",15]]]]]],[[]],[[["subspace",3],["subspace",3]],["vec",3,[["usize",15]]]],[[],["usize",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["subspace",3]],null,[[]],[[["slice",4]],["usize",15]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["subspace",3]],[[]],[[["slice",4]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[["validprime",3],["usize",15]]],[[["validprime",3],["usize",15]]],[[["subspace",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["validprime",3]],["result",6]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],null,[[["subspace",3]],["bool",15]],[[["validprime",3],["usize",15],["usize",15]]],[[]],[[],["validprime",3]],[[["slicemut",4]]],[[]],[[]],[[],["result",6]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[["validprime",3]]],[[]],[[]],[[]],[[["validprime",3]]],[[["validprime",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["validprime",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["validprime",3],["usize",15],["usize",15]],["u32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["validprime",3]],["bool",15]],[[],["bool",15]],[[["u32",15],["u32",15]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4,[["string",3]]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["u32",15],["u32",15]],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["validprime",3],["u32",15]],["u32",15]],[[["u32",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["u32",15],["u32",15]],["u32",15]],[[["u32",15],["i32",15]],["u32",15]],[[["validprime",3]]],[[]],[[["validprime",3]]],[[["validprime",3]],["bool",15]],[[["u64",15]]],[[["usize",15]]],[[["u32",15]]],[[["u64",15],["usize",15]]],[[],["option",4]],[[],["option",4]],null,[[["u32",15],["u32",15],["u32",15]],["u32",15]],null,[[],["result",4]],[[["u64",15]]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u32",15]],["result",4,[["invalidprimeerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],null,null,[[["usize",15]]],null,null,[[],["__m128i",3]],[[["__m128i",3]]],[[["__m128i",3],["__m128i",3]],["__m128i",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15]]],[[["slice",4],["u32",15]]],[[["fpvector",4]]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[["u32",15]],["bool",15]],[[["slice",4],["u32",15]]],[[["u32",15]]],[[["u32",15],["usize",15]]],[[["u32",15],["usize",15]]],[[["usize",15],["u32",15],["slice",4],["slice",4]]],[[["u32",15]],["option",4]],[[["slice",4],["u32",15]]],[[],["slice",4]],[[],["slice",4]],[[],["slicemut",4]],[[]],[[["slice",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpvector",4]],[[],["slice",4]],[[]],[[]],[[],["slicemut",4]],[[]],[[],["f32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["u32",15]],[[["usize",15]],["u32",15]],[[["fpvector",4]],["bool",15]],[[],["bool",15]],[[["usize",15]]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["slice",4]],["slice",4]],[[]],[[["fpvector",4]],["slice",4]],[[["slicemut",4]],["slice",4]],[[]],[[["fpvector",4]],["slicemut",4]],[[["slicemut",4]],["slicemut",4]],[[["validprime",3],["usize",15]],["result",6]],[[["validprime",3]]],[[],["u64",15]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpvectoriterator",3]],[[],["fpvectoriterator",3]],[[],["fpvectornonzeroiterator",4]],[[],["fpvectornonzeroiterator",4]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[]],[[["fpvector",4]],["bool",15]],[[["validprime",3],["usize",15]],["fpvector",4]],[[["validprime",3],["usize",15],["usize",15]],["fpvector",4]],[[],["option",4]],[[],["option",4]],[[["validprime",3],["usize",15]],["usize",15]],[[["validprime",3],["usize",15]],["usize",15]],[[],["validprime",3]],[[],["validprime",3]],[[],["validprime",3]],[[["u32",15]]],[[["u32",15]]],[[],["result",4]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[["usize",15]]],[[]],[[]],[[],["bool",15]],[[["usize",15],["usize",15]],["slice",4]],[[["usize",15],["usize",15]],["slice",4]],[[["usize",15],["usize",15]],["slicemut",4]],[[["usize",15],["usize",15]],["slicemut",4]],[[],["result",6]],[[]],[[]],[[],["fpvector",4]],[[],["string",3]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["validprime",3],["usize",15]],["result",6]],[[["validprime",3]]],[[["validprime",3],["usize",15]],["fpvector",6]],[[["validprime",3],["usize",15],["usize",15]],["fpvector",6]],[[["validprime",3],["usize",15]],["usize",15]],[[["validprime",3],["usize",15]],["usize",15]],[[],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,[[["fpvectorp",3],["u32",15]]],[[["slicep",3],["u32",15]]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[["u32",15]],["bool",15]],[[["usize",15],["u64",15],["u32",15]],["bool",15]],[[["slicep",3],["u32",15]]],[[["fpvectorp",3],["u32",15]]],[[["fpvectorp",3],["u32",15],["usize",15]]],[[["fpvectorp",3],["u32",15],["usize",15]]],[[["slicep",3],["u32",15]]],[[["slicep",3],["u32",15]]],[[["slicep",3],["u32",15]]],[[["usize",15],["u32",15],["slicep",3],["slicep",3]]],[[["u32",15]],["option",4]],[[["slicep",3],["u32",15]]],[[],["slicep",3]],[[],["slicep",3]],[[],["slicemutp",3]],[[]],[[["slicep",3]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpvectorp",3]],[[],["slicep",3]],[[]],[[]],[[],["slicemutp",3]],[[]],null,null,null,null,[[],["f32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,[[["usize",15]],["u32",15]],[[["usize",15]],["u32",15]],[[["fpvectorp",3]],["bool",15]],[[],["bool",15]],[[["usize",15]]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fpvectorp",3]]],[[["fpvectorp",3]]],[[]],[[["validprime",3],["usize",15]],["result",6]],[[["usize",15],["vec",3,[["u64",15]]]]],[[["validprime",3]]],[[],["u64",15]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpvectoriterator",3]],[[],["fpvectoriterator",3]],[[],["fpvectornonzeroiteratorp",3]],[[],["fpvectornonzeroiteratorp",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,[[]],[[],["range",3,[["usize",15]]]],[[],["range",3,[["usize",15]]]],[[]],null,null,null,null,null,[[]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[],["u64",15]],null,null,[[],["u64",15]],null,null,null,null,null,null,[[]],[[["fpvectorp",3]],["bool",15]],[[["slicep",3],["slicep",3]]],[[["slicep",3],["slicep",3]]],[[["slicep",3]]],[[["slicep",3]]],[[["validprime",3],["usize",15]],["fpvector",6]],[[["usize",15]]],[[["validprime",3],["usize",15],["usize",15]],["fpvector",6]],[[["usize",15],["usize",15]]],[[],["option",4]],[[],["option",4]],[[["validprime",3],["usize",15]],["usize",15]],null,null,null,null,[[],["usize",15]],null,null,[[["validprime",3],["usize",15]],["usize",15]],[[],["validprime",3]],[[],["validprime",3]],[[],["validprime",3]],[[]],[[["u32",15]]],[[["u32",15]]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[["usize",15]]],[[]],[[]],[[],["bool",15]],[[["usize",15]]],[[["usize",15],["usize",15]],["slicep",3]],[[["usize",15],["usize",15]],["slicep",3]],[[["usize",15],["usize",15]],["slicemutp",3]],[[["usize",15],["usize",15]],["slicemutp",3]],null,null,null,null,[[],["result",6]],[[]],[[],["fpvectorp",3]],[[]],[[],["string",3]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],null,null],"p":[[6,"FpVector"],[6,"Slice"],[6,"SliceMut"],[3,"LimbBitIndexPair"],[3,"MatrixSliceMut"],[3,"Matrix"],[3,"Subquotient"],[3,"AugmentedMatrix"],[3,"QuasiInverse"],[3,"Subspace"],[3,"M4riTable"],[3,"InvalidPrimeError"],[8,"Binomial"],[3,"BitflagIterator"],[3,"BinomialIterator"],[3,"ValidPrime"],[4,"FpVectorNonZeroIterator"],[4,"FpVector"],[4,"Slice"],[4,"SliceMut"],[13,"_2"],[13,"_3"],[13,"_5"],[13,"_7"],[13,"_2"],[13,"_3"],[13,"_5"],[13,"_7"],[13,"_2"],[13,"_3"],[13,"_5"],[13,"_7"],[13,"_2"],[13,"_3"],[13,"_5"],[13,"_7"],[3,"FpVectorP"],[3,"SliceMutP"],[3,"FpVectorIterator"],[3,"AddShiftLeftData"],[3,"AddShiftRightData"],[3,"FpVectorNonZeroIteratorP"],[3,"SliceP"]]},\
"lift_hom":{"doc":"Given an element in $\\\\Ext(M, N)$, this computes the …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"massey":{"doc":"Computes the triple Massey product up to a sign","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"num_gens":{"doc":"This prints the number of generators in each $\\\\Ext^{s, n + …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"once":{"doc":"","t":[12,12,17,17,3,3,3,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","DATA_LAYOUT","MAX_OUTER_LENGTH","OnceBiVec","OnceVec","OooTracker","Page","USIZE_LEN","allocate","allocate_for","allocated","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","data","data","deallocate","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","entry_ptr","eq","eq","extend","extend","fmt","fmt","from","from","from","from","from_bivec","from_vec","from_vec","get","get","get_mut","index","index","index","index_mut","index_mut","index_mut","init","init","init","init","inner_index","into","into","into","into","is_empty","is_empty","iter","iter","iter_enum","last","last","layout","len","len","len","lock","lock","max_degree","min_degree","min_degree","ne","new","new","ooo","ooo_elements","ooo_elements","page","page_raw","par_extend","par_extend","par_iter_enum","ptr","push","push","push_checked","push_checked","push_ooo","push_ooo","range","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["once","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","The maximum length of a OnceVec is 2^{MAX_OUTER_LENGTH} - …","","A <code>OnceVec</code> is a push-only vector which is thread-safe. To …","This is a wrapper around our out-of-order push tracker. We …","","","","Allocate enough space to fit <code>new_max</code> many elements in …","","Safety","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","Returns","","","Extend the <code>OnceVec</code> to up to index <code>new_max</code>, filling in the …","Extend the <code>OnceBiVec</code> to up to index <code>new_max</code>, filling in …","","","","","","","","Creates a OnceVec from a Vec.","","","Returns whether the <code>OnceBiVec</code> has remaining out-of-order …","","","","","","","","","","","","","","","","","","","Iterate through the <code>OnceVec</code>.","","","","","This always returns a layout of non-zero size.","All data up to length self.len() are guaranteed to be …","This returns the “length” of the bivector, defined to …","","Takes a lock on the <code>OnceVec</code>. The <code>OnceVec</code> cannot be updated …","Takes a lock on the <code>OnceBiVec</code>. The <code>OnceBiVec</code> cannot be …","This returns the largest degree in the bivector. This is …","","","","","","<code>BTreeSet</code> of elements that have been added out of order. We …","Returns a list of out-of-order elements remaining.","","Obtain an immutable reference to the <code>page</code>th page. This …","Returns","A parallel version of <code>extend</code>, where the function <code>f</code> is run …","A parallel version of <code>extend</code>, where the function <code>f</code> is run …","","","Append an element to the end of the vector.","","Push an element into the vector and check that it was …","","Append an element to an arbitrary position in the OnceVec.","See <code>OnceVec::push_ooo</code>.","","","","","","","","","","","","","","","",""],"i":[1,2,0,0,0,0,0,0,0,1,3,1,1,1,3,2,4,1,3,2,4,3,2,4,3,2,4,3,4,1,1,3,2,1,3,2,4,1,3,2,4,1,3,3,2,4,3,3,4,3,4,3,4,1,3,2,4,4,3,4,3,4,3,3,3,4,3,3,4,1,3,2,4,0,1,3,2,4,3,4,3,4,4,3,4,1,3,4,3,3,4,4,4,4,4,3,4,3,3,4,3,3,3,4,4,1,3,4,3,4,3,4,4,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4],"f":[null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["usize",15],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["oootracker",3]],[[],["oncebivec",3]],[[]],[[]],[[]],null,null,[[["usize",15],["usize",15]]],[[]],[[]],[[],["oootracker",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["oncevec",3]],["bool",15]],[[["oncebivec",3]],["bool",15]],[[["usize",15]]],[[["i32",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["bivec",3]]],[[["vec",3]]],[[["i32",15],["vec",3]]],[[["usize",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]]],[[["u32",15]]],[[["i32",15]]],[[["u32",15]]],[[["usize",15]]],[[["i32",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["layout",3]],[[],["usize",15]],[[],["i32",15]],null,[[],["mutexguard",3,[["oootracker",3]]]],[[],["mutexguard",3,[["oootracker",3]]]],[[],["i32",15]],[[],["i32",15]],null,[[["oncebivec",3]],["bool",15]],[[]],[[["i32",15]]],null,[[],["vec",3,[["usize",15]]]],[[],["vec",3,[["i32",15]]]],[[["usize",15]],["page",3]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]]],[[]],[[]],[[],["usize",15]],[[],["i32",15]],[[["usize",15]]],[[["i32",15]]],[[["usize",15]],["range",3,[["usize",15]]]],[[["i32",15]],["range",3,[["i32",15]]]],[[],["range",3,[["i32",15]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Page"],[3,"OooTracker"],[3,"OnceVec"],[3,"OnceBiVec"]]},\
"query":{"doc":"This library gives various functions that are used to …","t":[17,5,5,5,5,5],"n":["ARGV","optional","raw","vector","with_default","yes_no"],"q":["query","","","","",""],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":[null,[[["str",15]],["option",4]],[[["str",15]]],[[["str",15],["usize",15]],["vec",3,[["u32",15]]]],[[["str",15],["str",15]]],[[["str",15]],["bool",15]]],"p":[]},\
"resolution_size":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"resolve":{"doc":"Resolves a module up to a fixed $(s, t)$ and prints an …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"resolve_through_stem":{"doc":"Resolves a module up to an $(n, s)$ and prints an ASCII …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"save_bruner":{"doc":"This saves a resolution to Bruner’s format. This saves …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"secondary":{"doc":"This computes $d_2$ differentials in the Adams spectral …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"secondary_massey":{"doc":"Computes massey products in $\\\\Mod_{C\\\\tau^2}$.","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"secondary_product":{"doc":"Computes products in $\\\\Mod_{C\\\\tau^2}$.","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"sseq":{"doc":"","t":[3,3,3,3,8,0,12,0,12,12,12,12,12,12,12,12,12,12,10,12,10,12,0,12,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,12,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,3,18,18,3,8,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,12,11,12,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11],"n":["Adams","DenseBigradedModule","Differential","Sseq","SseqProfile","bigraded","classes","differential","differentials","dimensions","error","first_empty_row","invalid","matrix","min_y","p","page_data","permanent_classes","profile","profile","profile_inverse","source_dim","sseq","target_dim","DenseBigradedModule","borrow","borrow_mut","defined","deref","deref_mut","dimension","dimensions","drop","from","init","into","max_x","max_y","min_x","min_y","min_y","new","range","set_dimension","try_from","try_into","type_id","Differential","add","borrow","borrow_mut","deref","deref_mut","drop","error","evaluate","first_empty_row","from","get_source_target_pairs","inconsistent","init","into","matrix","new","prime","quasi_inverse","reduce_target","set_to_zero","source_dim","target_dim","try_from","try_into","type_id","Adams","MIN_R","MIN_R","Sseq","SseqProfile","add_differential","add_permanent_class","borrow","borrow","borrow_mut","borrow_mut","classes","classes","clear","complete","defined","deref","deref","deref_mut","deref_mut","differentials","differentials","differentials_hitting","dimension","drop","drop","extend_differential","extend_page_data","from","from","inconsistent","init","init","into","into","invalid","invalid","max_x","max_y","min_x","min_y","new","p","page_data","page_data","permanent_classes","permanent_classes","profile","profile","profile","profile_inverse","profile_inverse","range","set_dimension","try_from","try_from","try_into","try_into","type_id","type_id","update","update_bidegree"],"q":["sseq","","","","","","","","","","","","","","","","","","","","","","","","sseq::bigraded","","","","","","","","","","","","","","","","","","","","","","","sseq::differential","","","","","","","","","","","","","","","","","","","","","","","","","","sseq::sseq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","The direction of the differentials","","The first page of the spectral sequence","","x -&gt; y -&gt; r -&gt; differential","","","","x -&gt; y -&gt; validity. A bidegree is invalid if the page_data …","","","","x -&gt; y -&gt; r -&gt; E_r^{x, y} as a subquotient of the original …","x -&gt; y -&gt; permanent_classes","","","","","","","","","","","","","","","","","","","","","","","","","","This can only be set when bidegrees to the left and bottom …","","","","","Add a differential","","","","","","","This evaluates the differential on <code>source</code>, adding the …","","","An iterator of differentials in the form <code>(source, target)</code>","Whether the current set of differentials is inconsistent. …","","","","","","Find the differential that hits <code>value</code>, and write the …","Given a subspace of the target space, project the target …","","","","","","","","","","","The direction of the differentials","Add a $d_r$ differential from bidegree $(x, y)$, with the …","Returns","","","","","","The first page of the spectral sequence","","Whether the calcuations at bidegree (x, y) are complete. …","","","","","","","x -&gt; y -&gt; r -&gt; differential","","","","","Ensure <code>self.differentials[x][y][r]</code> is defined. Must call …","Ensure <code>self.page_data[x][y][r]</code> is defined","","","Whether there is an inconsistent differential involving …","","","","","","x -&gt; y -&gt; validity. A bidegree is invalid if the page_data …","","","","","","","","x -&gt; y -&gt; r -&gt; E_r^{x, y} as a subquotient of the original …","","x -&gt; y -&gt; permanent_classes","","","","","","","","","","","","","","","This returns the vec of differentials to draw on each page."],"i":[0,0,0,0,0,0,1,0,1,2,3,3,1,3,2,1,1,1,4,1,4,3,0,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,0,0,1,1,5,1,5,1,1,1,1,1,1,5,1,5,1,1,1,1,1,5,1,1,1,5,1,1,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,1,4,5,1,1,5,1,5,1,5,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15],["i32",15],["i32",15]]],null,[[["i32",15],["i32",15],["i32",15]]],null,null,null,null,[[]],[[]],[[["i32",15],["i32",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["i32",15]],["usize",15]],null,[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,[[["i32",15],["i32",15]]],[[["i32",15]],["range",3,[["i32",15]]]],[[["i32",15],["i32",15],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["slice",4],["option",4,[["slice",4]]]],["bool",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["slice",4],["slicemut",4]]],null,[[]],[[],["vec",3]],[[],["bool",15]],[[],["usize",15]],[[]],null,[[["validprime",3],["usize",15],["usize",15]]],[[],["validprime",3]],[[["slicemut",4],["slice",4]]],[[["subspace",3]]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["i32",15],["i32",15],["i32",15],["slice",4],["slice",4]],["bool",15]],[[["i32",15],["i32",15],["slice",4]],["bool",15]],[[]],[[]],[[]],[[]],[[],["arc",3,[["densebigradedmodule",3]]]],null,[[]],[[["i32",15],["i32",15]],["bool",15]],[[["i32",15],["i32",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["i32",15]],["bivec",3]],null,[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["i32",15],["i32",15]]],[[["i32",15],["i32",15],["i32",15]]],[[]],[[]],[[["i32",15],["i32",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["i32",15],["i32",15]],["bool",15]],null,[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["validprime",3],["i32",15],["i32",15]]],null,[[["i32",15],["i32",15]],["bivec",3]],null,[[["i32",15],["i32",15]],["subspace",3]],null,[[["i32",15],["i32",15],["i32",15]]],[[["i32",15],["i32",15],["i32",15]]],null,[[["i32",15],["i32",15],["i32",15]]],[[["i32",15],["i32",15],["i32",15]]],[[["i32",15]],["range",3,[["i32",15]]]],[[["i32",15],["i32",15],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["i32",15],["i32",15]],["bivec",3,[["vec",3,[["vec",3,[["u32",15]]]]]]]]],"p":[[3,"Sseq"],[3,"DenseBigradedModule"],[3,"Differential"],[8,"SseqProfile"],[3,"Adams"]]},\
"steenrod":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"tensor":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"yoneda":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};
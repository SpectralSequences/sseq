var searchIndex = new Map(JSON.parse('[\
["algebra",{"doc":"Types and traits for working with various algebras and …","t":"PFPKKGKPPFKPFPKKKFFGGKKCMCMOOMMOOCMMMMMOMMMQOOOOMMCMMMOOOCMCHOOOMMMMMMOOCOMMOMMOOMMMCCOOOFKFPPGMOOOOOOOOOOOOEEEEEEEEEEEEEEEEECCCCCCCCCFKFPPGNMNNNNONONONNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNNNNOONNNONHNNNNNNNNNNNNNNNOKKKKMMMMNNMMMNNMNNMNNNNMNNMMMNNMNNNNMNNNNMKMMSFSFSNHNNNNNNNNNNNNNONNOHNNONNNNNNNNOONOOOONHNNNNNNHFNNNNNNNNNNNNNNNNNNNNNNNNNONNNNSOFFKFIFIFIFNOONNNONONNNNNNNNNNNNNONNNOONNNNNNNNNNNNNONNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNOONNNNNNNNNNNOONMNONNNNNNNNNNNNNNNNNNNNNNNOOOOONNONNNNONOOHONONNNNNNONNNNNNNNNNNNNNNNNNNNONNNNSRIFKMHHNNONNNMMMNNNONNMOMNNMQONNONQOKFFMNNNNNNNNMNONNNNNNNNNNOMMNNNNMNNNNNONNNNNNNNNNONNNNNNNNNNOMMMMMNNNNNNNNNNOPPFGPPPPGGKNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNONNMNNNNNNNNNNNNNNNNNNNSFFHOOHOOOOOOOHHFOOFKFFIFIFOOOOOOOOOOOOOOMOOOOOOOOOOOOOORFFIFFKFFFFFEFFIKMOMOOOOOOOOOMOCOOOMOCCCOOOOOOOOOOOOOOOCCOOOOOMOMOOOOOCOOOOOOOOOOCOOOCOOOCOCOCOOCMFFNOOONNNNNNNNNNNNNNNOONNNNNNNNNNNNNNFNNNONNNONNNNNNNNNNNNNNNNNNNNNOONNNNNONNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNONNNNONOONNNNONNNOONONNNNNNNNIFFFFINNNNOOOOOONNNNNNNNNNNNONNNNNNNNNNNNNONNNNNNNOOOOONOOOOONOOONNNNNNNNNNNNNNNNNOOOOOOONNOOONOONONONNNNNNNNNNNNNNNFNNONONNNNNNNNNNNNNNNONONNNNIFFFKKFFFRRIKNNMNNMOOOOOOOCCCNNCMNOOOOONOOOOOOONOOOOOONNOOOOOCOOMOOOOOOOMOOOOOOMIFINNNNNNNNNNNOOONNNNNNNNOOONNNOOONOOONNNNOOONOOONNNNOOONOOONNNNFNNNNNNNONNNNNNNNONNNOONNONNNONONNNNNFNNNNONNNNNNNNONONNNNFNNNNNNNNNNONNNOONNNONONONNNFFNNNNNNNNNNNNNNOONNNNNNNNOONNONNNNNNNNRKFNNNNNNMMMNNNNNNMNNNNNNNNNNMNNNNMNNONNNNNNOFNNNNONNNNNNNNNNNNNNONNNNNNNONONNNNFFNNONNNNNOOHHNNNNNNNNNNNNNNNNNNNNNOONNOONNNNNNNNNNNIHCNHFNNNNNNNNNNNNNNNNNONNNNNNNNONNNNNNFNNNNNONNNNNNNNNNNONNNNNONNNNNNKMRFKMOMMMMOMMOOFONNNNNNNNNNNNNNNNNNNONNNNNNNNNPGGPPGPIIPPPPPPPPHHHHNNNNNNHONNNNNNHNNNNNNHNNNNNNHNNNNNNNNNOHHHHHHHHNNNNNNNNNNNNN","n":["Adem","AdemAlgebra","AdemAlgebra","AdemAlgebraT","Algebra","AlgebraType","Bialgebra","BorrowAdem","BorrowMilnor","Field","GeneratedAlgebra","Milnor","MilnorAlgebra","MilnorAlgebra","MilnorAlgebraT","MuAlgebra","PolynomialAlgebra","PolynomialAlgebraMonomial","PolynomialAlgebraTableEntry","SteenrodAlgebra","SteenrodAlgebraBorrow","SteenrodAlgebraT","UnstableAlgebra","adem_algebra","adem_algebra","algebra","basis_element_from_string","basis_element_to_index_map","basis_element_to_index_map","basis_element_to_string","basis_table","basis_table","basis_table","combinatorics","compute_basis","compute_generating_set","coproduct","decompose","decompose_basis_element","degree","dimension","dimension_unstable","dimension_unstable","dispatch_algebra","even_basis_table","excess_table","excess_table","ext","exterior_generators_in_degree","exterior_monomials","field","frobenius_on_generator","generating_relations","generators","generic","generic","index_to_monomial","milnor_algebra","milnor_algebra","module","module_gens_from_json","monomial_to_index","multiplication_table","multiplication_table","multiply_basis_element_by_element_unstable","multiply_basis_elements","multiply_basis_elements_unstable","multiply_basis_elements_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_element_unstable","p","p","pair_algebra","poly","polynomial_generators_in_degree","polynomial_monomials","ppart_table","prime","prime","prime","profile","repr_ext_generator","repr_poly_generator","steenrod_algebra","steenrod_evaluator","steenrod_parser","unstable_enabled","unstable_enabled","valid","AdemAlgebra","AdemAlgebraT","AdemBasisElement","Bockstein","P","PorBockstein","adem_algebra","basis_element_to_index_map","basis_table","bocksteins","degree","even_basis_table","excess_table","generic","multiplication_table","p","p_or_sq","ps","unstable_enabled","AdemAlgebra","AdemAlgebraT","Algebra","AlgebraType","Bialgebra","Field","GeneratedAlgebra","MilnorAlgebra","MilnorAlgebraT","MuAlgebra","PolynomialAlgebra","PolynomialAlgebraMonomial","PolynomialAlgebraTableEntry","SteenrodAlgebra","SteenrodAlgebraBorrow","SteenrodAlgebraT","UnstableAlgebra","adem_algebra","algebra_trait","bialgebra_trait","combinatorics","field","milnor_algebra","pair_algebra","polynomial_algebra","steenrod_algebra","AdemAlgebra","AdemAlgebraT","AdemBasisElement","Bockstein","P","PorBockstein","a_multiply","adem_algebra","adem_algebra","basis_element_from_index","basis_element_from_string","basis_element_to_index","basis_element_to_index_map","basis_element_to_string","basis_table","beps_pn","bocksteins","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_basis","coproduct","decompose","decompose_basis_element","decompose_basis_element_2","decompose_basis_element_generic","default_filtration_one_products","degree","deref","deref","deref","deref_mut","deref_mut","deref_mut","dimension","dimension_unstable","dimension_unstable","dimension_unstable","drop","drop","drop","element_from_bytes","element_is_zero","element_to_bytes","eq","equivalent","equivalent","equivalent","even_basis_table","excess","excess_table","finalize_element","fmt","fmt","fmt","fmt","from","from","from","generate_basis2","generate_basis_element_to_index_map","generate_basis_even","generate_basis_generic","generate_excess_table","generate_multiplication_table_2","generate_multiplication_table_2_step","generate_multiplication_table_generic","generate_multiplication_table_generic_step","generating_relations","generator_to_string","generators","generic","generic","hash","init","init","init","into","into","into","iter_filtered","magic","make_mono_admissible","make_mono_admissible_2","make_mono_admissible_generic","multiplication_table","multiply_basis_element_by_element_unstable","multiply_basis_element_by_element_unstable","multiply_basis_elements","multiply_basis_elements_unstable","multiply_basis_elements_unstable","multiply_basis_elements_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_element_unstable","multiply_element_by_element_unstable","multiply_inner","new","new_pair_element","p","p_or_sq","p_tilde","prefix","prime","ps","q","shift_vec","sigma_multiply_basis","tail_of_basis_element_to_index","to_owned","to_string","to_string","try_basis_element_to_index","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unstable_enabled","Algebra","GeneratedAlgebra","MuAlgebra","UnstableAlgebra","basis_element_from_string","basis_element_to_string","compute_basis","decompose_basis_element","default_filtration_one_products","default_filtration_one_products","dimension","dimension_unstable","dimension_unstable","element_to_string","element_to_string","generating_relations","generator_to_string","generator_to_string","generators","magic","magic","multiply_basis_element_by_element","multiply_basis_element_by_element","multiply_basis_element_by_element_unstable","multiply_basis_element_by_element_unstable","multiply_basis_element_by_element_unstable","multiply_basis_elements","multiply_basis_elements_unstable","multiply_basis_elements_unstable","multiply_element_by_basis_element","multiply_element_by_basis_element","multiply_element_by_basis_element_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_element","multiply_element_by_element","multiply_element_by_element_unstable","multiply_element_by_element_unstable","multiply_element_by_element_unstable","prefix","prefix","prime","Bialgebra","coproduct","decompose","MAX_XI_TAU","PartitionIterator","TAU_DEGREES","TruncatedPolynomialMonomialBasis","XI_DEGREES","add_gens_and_calculate_parts","adem_relation_coefficient","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","gen_deg_idx_to_internal_idx","gen_degrees","generators","generators_up_to_degree","gens","inadmissible_pairs","init","init","initial","internal_idx_to_gen_deg","into","into","into_iter","multiunzip","new","new","next","p","partition","parts","parts","parts","parts_by_max","remaining","search","tau_degrees","try_from","try_from","try_into","try_into","type_id","type_id","xi_degrees","Field","basis_element_from_string","basis_element_to_string","borrow","borrow_mut","compute_basis","coproduct","decompose","default_filtration_one_products","deref","deref_mut","dimension","dimension_unstable","drop","element_to_string","fmt","from","init","into","multiply_basis_element_by_element_unstable","multiply_basis_elements","multiply_basis_elements_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_element_unstable","new","prime","prime","to_string","try_from","try_into","type_id","ALLOCATION","M","Matrix2D","MilnorAlgebra","MilnorAlgebraT","MilnorBasisElement","MilnorHashMap","MilnorProfile","PPart","PPartAllocation","PPartEntry","PPartMultiplier","a_multiply","ans","base","basis_element_from_index","basis_element_from_string","basis_element_to_index","basis_element_to_index_map","basis_element_to_string","basis_table","beps_pn","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone_into","clone_into","cols","cols","compute_basis","compute_degree","compute_ppart","coproduct","decompose","decompose_basis_element","decompose_basis_element_ppart","decompose_basis_element_qpart","default","default","default","default","default_filtration_one_products","degree","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","diag_num","diagonal","diagonal","dimension","dimension_unstable","dimension_unstable","dimension_unstable","drop","drop","drop","drop","drop","drop","element_from_bytes","element_is_zero","element_to_bytes","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","excess","excess_table","finalize_element","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_p","generate_basis_2","generate_basis_generic","generate_excess_table","generating_relations","generator_to_string","generators","generic","generic","get_p_part","hash","increment_p_part","index","index_mut","init","init","init","init","init","init","init","inner","into","into","into","into","into","into","into_allocation","into_iter","is_an","is_trivial","is_valid","len","m","magic","milnor_algebra","milnor_algebra","multiplication_table","multiply","multiply_basis_by_element","multiply_basis_by_element_with_allocation","multiply_basis_element_by_element","multiply_basis_element_by_element_unstable","multiply_basis_element_by_element_unstable","multiply_basis_elements","multiply_basis_elements_unstable","multiply_basis_elements_unstable","multiply_basis_elements_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_element","multiply_element_by_element_unstable","multiply_element_by_element_unstable","multiply_qpart","multiply_with_allocation","new","new_from_allocation","new_pair_element","new_with_profile","next","next_val","p","p","p_part","p_part","p_part","p_tilde","ppart_table","ppart_table","prefix","prime","prime","profile","profile","q","q_part","q_part","q_part_default","r","reset","rows","serialize","sigma_multiply_basis","to_owned","to_string","to_string","to_string","truncated","try_basis_element_to_index","try_beps_pn","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unstable_enabled","update","with_capacity","with_capacity","with_local","AY_CACHE","Element","HashMap","MilnorPairElement","PairAlgebra","a_multiply","a_y_cached","a_y_inner","borrow","borrow_mut","degree","deref","deref_mut","drop","element_from_bytes","element_is_zero","element_to_bytes","finalize_element","finalize_element","from","hash_builder","init","into","new_pair_element","ones","p_tilde","sigma_multiply","sigma_multiply","sigma_multiply_basis","sub","table","try_from","try_into","twos","type_id","unsub","ys","PolynomialAlgebra","PolynomialAlgebraMonomial","PolynomialAlgebraTableEntry","basis_table","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compute_basis_step","compute_basis_step","compute_generating_set","default","degree","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","equivalent","equivalent","ext","exterior_generators_in_degree","exterior_monomials","fmt","fmt","frobenius_monomial","frobenius_monomial","frobenius_on_generator","from","from","hash","index_to_monomial","index_to_monomial","index_to_monomial","init","init","into","into","max_computed_degree","max_computed_degree","min_degree","min_degree","monomial_to_index","monomial_to_index","monomial_to_index","multiply_monomial_by_polynomial","multiply_monomial_by_polynomial","multiply_monomials","multiply_monomials","multiply_polynomial_by_monomial","multiply_polynomial_by_monomial","multiply_polynomials","multiply_polynomials","new","new","poly","polynomial_generators_in_degree","polynomial_monomials","prime","repr_ext_generator","repr_poly_generator","set_monomial_degree","set_monomial_degree","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","valid","Adem","AdemAlgebra","AlgebraSpec","AlgebraType","BorrowAdem","BorrowMilnor","Milnor","MilnorAlgebra","SteenrodAlgebra","SteenrodAlgebraBorrow","SteenrodAlgebraT","a_multiply","adem_algebra","algebra","basis_element_from_string","basis_element_to_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_basis","coproduct","decompose","decompose_basis_element","default_filtration_one_products","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","dimension","dimension_unstable","dimension_unstable","dimension_unstable","dispatch_steenrod","drop","drop","drop","drop","element_from_bytes","element_is_zero","element_to_bytes","element_to_string","eq","equivalent","equivalent","equivalent","finalize_element","fmt","fmt","fmt","fmt","from","from","from","from","from_json","from_str","generating_relations","generator_to_string","generators","init","init","init","init","into","into","into","into","magic","milnor_algebra","multiply_basis_element_by_element","multiply_basis_element_by_element_unstable","multiply_basis_element_by_element_unstable","multiply_basis_element_by_element_unstable","multiply_basis_elements","multiply_basis_elements_unstable","multiply_basis_elements_unstable","multiply_basis_elements_unstable","multiply_element_by_basis_element","multiply_element_by_basis_element_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_basis_element_unstable","multiply_element_by_element","multiply_element_by_element_unstable","multiply_element_by_element_unstable","multiply_element_by_element_unstable","new_pair_element","p","p_tilde","prefix","prime","profile","sigma_multiply","sigma_multiply_basis","steenrod_algebra","steenrod_algebra","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","MAX_XI_TAU","PartitionIterator","TruncatedPolynomialMonomialBasis","adem_relation_coefficient","gen_degrees","gens","inadmissible_pairs","initial","p","partition","parts","parts","parts_by_max","remaining","tau_degrees","xi_degrees","Field","prime","M","MilnorAlgebra","MilnorAlgebraT","MilnorBasisElement","MilnorProfile","PPart","PPartAllocation","PPartEntry","PPartMultiplier","ans","basis_element_to_index_map","basis_table","buf","cols","degree","diag_num","diagonal","diagonal","excess_table","generic","init","len","m","milnor_algebra","multiplication_table","p","p","p_part","p_part","p_part","ppart_table","profile","q_part","q_part","r","rows","truncated","unstable_enabled","Algebra","FDModule","FPModule","FreeModule","GeneratorData","HomModule","Module","ModuleFailedRelationError","MuFreeModule","OperationGeneratorPair","QuotientModule","RealProjectiveSpace","SteenrodModule","SuspensionModule","TensorModule","UnstableFreeModule","ZeroModule","act_on_basis","actions","algebra","algebra","algebra","algebra","algebra","algebra","algebra","basis_element_to_opgen","basis_element_to_opgen","basis_element_to_opgen","basis_element_to_string","basis_list","block_structure","block_structures","block_structures","clear_bottom","dimension","end","finite_dimensional_module","finitely_presented_module","free_module","gen_deg","gen_deg_idx_to_internal_idx","gen_deg_idx_to_internal_idx","gen_deg_idx_to_internal_idx","gen_names","gen_names","gen_names","gen_names","generator_degree","generator_index","generator_to_index","generator_to_index","generator_to_index","generators","graded_dimension","hom_module","homomorphism","index_table","inner","left","map","max","max_computed_degree","min","min_degree","min_degree","min_degree","min_degree","min_degree","module","module_trait","name","name","name","name","name","num_gens","num_gens","num_gens","operation_degree","operation_index","quotient_module","relation","relations","right","rpn","shift","source","start","steenrod_module","subspaces","suspension_module","target","tensor_module","truncation","value","zero_module","zero_module","BlockStructure","GeneratorBasisEltPair","add_block","basis_element_to_block_idx","basis_index","blocks","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","generator_basis_elt_to_index","generator_degree","generator_index","generator_to_block","index_to_generator_basis_elt","init","init","into","into","new","total_dimension","try_from","try_from","try_into","try_into","type_id","type_id","FiniteDimensionalModule","act_on_basis","action","action_mut","actions","actions_to_json","add_generator","algebra","algebra","allocate_actions","basis_element_to_string","borrow","borrow_mut","check_validity","clone","clone_into","compute_basis","deref","deref_mut","dimension","drop","eq","equivalent","equivalent","equivalent","extend_actions","fmt","from","from","from_json","gen_names","graded_dimension","init","into","max_computed_degree","max_degree","min_degree","name","new","parse_action","set_action","set_basis_element_name","string_to_basis_element","test_equal","to_json","to_owned","to_string","try_from","try_into","type_id","zero_module","FPMIndexTable","FinitelyPresentedModule","act_on_basis","add_generators","add_relations","algebra","basis_element_to_string","borrow","borrow","borrow_mut","borrow_mut","compute_basis","deref","deref","deref_mut","deref_mut","dimension","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fp_idx_to_gen_idx","fp_idx_to_gen_idx","from","from","from_json","gen_idx_to_fp_idx","gen_idx_to_fp_idx","generators","generators","index_table","init","init","into","into","map","max_computed_degree","max_generator_degree","min_degree","min_degree","name","new","relations","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","FreeModule","GeneratorData","MuFreeModule","OffsetIterator","OperationGeneratorPair","UnstableFreeModule","act","act_on_basis","add_generators","algebra","algebra","algebra","algebra","basis_element_to_opgen","basis_element_to_opgen","basis_element_to_opgen","basis_element_to_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_basis","degree","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dimension","drop","drop","drop","drop","end","extend_by_zero","fmt","fmt","from","from","from","from","gen_deg","gen_deg","gen_deg_idx_to_internal_idx","gen_deg_idx_to_internal_idx","gen_deg_idx_to_internal_idx","gen_names","gen_names","gen_names","gen_names","generator_degree","generator_index","generator_offset","generator_to_index","generator_to_index","generator_to_index","index_to_op_gen","init","init","init","init","internal_generator_offset","into","into","into","into","into_iter","iter_gen_offsets","iter_gens","iter_slices","max_computed_degree","max_generator_degree","min_degree","min_degree","min_degree","min_degree","module","name","name","name","new","next","num_gens","num_gens","num_gens","number_of_gens_in_degree","offset","operation_degree","operation_generator_to_index","operation_index","slice_vector","start","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zero_module","HomModule","act_on_basis","algebra","algebra","basis_element_to_string","block_structures","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","fmt","from","init","into","max_computed_degree","min_degree","new","source","source","target","target","to_string","try_from","try_into","type_id","FreeModuleHomomorphism","FullModuleHomomorphism","GenericZeroHomomorphism","HomPullback","IdentityHomomorphism","ModuleHomomorphism","MuFreeModuleHomomorphism","QuotientHomomorphism","QuotientHomomorphismSource","Source","Target","UnstableFreeModuleHomomorphism","ZeroHomomorphism","apply","apply_quasi_inverse","apply_to_basis_element","auxiliary_data","compute_auxiliary_data_through_degree","degree_shift","degree_shift","degree_shift","degree_shift","degree_shift","degree_shift","f","f","free_module_homomorphism","full_module_homomorphism","generic_zero_homomorphism","get_matrix","get_partial_matrix","hom_pullback","identity_homomorphism","image","images","images","images","images","images","kernel","kernels","kernels","kernels","kernels","kernels","map","matrices","min_degree","min_degree","min_degree","min_degree","outputs","outputs","outputs","prime","quasi_inverse","quasi_inverses","quasi_inverses","quasi_inverses","quasi_inverses","quasi_inverses","quotient_homomorphism","s","s","source","source","source","source","source","source","source","t","target","target","target","target","target","target","target","zero_homomorphism","FreeModuleHomomorphism","MuFreeModuleHomomorphism","UnstableFreeModuleHomomorphism","add_generators_from_big_vector","add_generators_from_matrix_rows","add_generators_from_rows","add_generators_from_rows_ooo","apply_to_basis_element","apply_to_generator","borrow","borrow_mut","compute_auxiliary_data_through_degree","degree_shift","degree_shift","degree_shift","degree_shift","degree_shift","deref","deref_mut","differential_density","drop","extend_by_zero","from","hom_k","image","images","images","images","init","into","kernel","kernels","kernels","kernels","min_degree","min_degree","min_degree","min_degree","new","next_degree","ooo_outputs","output","outputs","outputs","outputs","quasi_inverse","quasi_inverses","quasi_inverses","quasi_inverses","set_image","set_kernel","set_quasi_inverse","source","source","source","source","target","target","target","target","try_from","try_into","type_id","zero_homomorphism","FullModuleHomomorphism","apply_to_basis_element","borrow","borrow_mut","clone","clone_into","compute_auxiliary_data_through_degree","degree_shift","degree_shift","deref","deref_mut","drop","from","from","from_matrices","identity_homomorphism","image","images","init","into","kernel","kernels","matrices","new","quasi_inverse","quasi_inverses","replace_source","replace_target","source","source","target","target","to_owned","try_from","try_into","type_id","zero_homomorphism","GenericZeroHomomorphism","apply_to_basis_element","borrow","borrow_mut","degree_shift","degree_shift","deref","deref_mut","drop","from","init","into","new","source","source","target","target","try_from","try_into","type_id","zero_homomorphism","HomPullback","apply_to_basis_element","borrow","borrow_mut","compute_auxiliary_data_through_degree","degree_shift","deref","deref_mut","drop","from","image","images","init","into","kernel","kernels","map","min_degree","new","quasi_inverse","quasi_inverses","source","source","target","target","try_from","try_into","type_id","QuotientHomomorphism","QuotientHomomorphismSource","apply_to_basis_element","apply_to_basis_element","borrow","borrow","borrow_mut","borrow_mut","degree_shift","degree_shift","deref","deref","deref_mut","deref_mut","drop","drop","f","f","from","from","init","init","into","into","new","new","s","s","source","source","t","target","target","try_from","try_from","try_into","try_into","type_id","type_id","Algebra","Module","ModuleFailedRelationError","act","act","act_by_element","act_by_element","act_by_element_on_basis","act_by_element_on_basis","act_on_basis","algebra","basis_element_to_string","borrow","borrow_mut","compute_basis","compute_basis","deref","deref_mut","dimension","drop","element_to_string","element_to_string","fmt","fmt","from","init","into","is_unit","is_unit","max_computed_degree","max_degree","max_degree","max_generator_degree","max_generator_degree","min_degree","prime","prime","relation","to_string","total_dimension","total_dimension","try_from","try_into","type_id","value","QuotientModule","act_on_basis","act_on_original_basis","algebra","basis_element_to_string","basis_list","borrow","borrow_mut","deref","deref_mut","dimension","drop","flush","fmt","from","init","into","max_computed_degree","max_degree","min_degree","module","new","old_basis_to_new","quotient","quotient_all","quotient_basis_elements","quotient_vectors","reduce","subspaces","to_string","truncation","try_from","try_into","type_id","zero_module","RPSpec","RealProjectiveSpace","act_on_basis","algebra","algebra","basis_element_to_string","borrow","borrow","borrow_mut","borrow_mut","clear_bottom","clear_bottom","coef_adem","coef_milnor","deref","deref","deref_mut","deref_mut","deserialize","dimension","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_json","init","init","into","into","max","max","max_computed_degree","max_degree","min","min","min_degree","new","to_json","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","SteenrodModule","from_json","json","zero_module","from_json","SuspensionModule","act","act_by_element","act_by_element_on_basis","act_on_basis","algebra","basis_element_to_string","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","element_to_string","fmt","from","init","inner","into","is_unit","max_computed_degree","max_degree","max_generator_degree","min_degree","new","prime","shift","to_string","total_dimension","try_from","try_into","type_id","zero_module","TensorModule","act","act_helper","act_on_basis","algebra","basis_element_to_string","block_structures","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","fmt","from","init","into","left","max_computed_degree","max_degree","min_degree","new","offset","right","seek_module_num","to_string","try_from","try_into","type_id","zero_module","ZeroModule","zero_module","Element","MilnorPairElement","PairAlgebra","a_multiply","degree","element_from_bytes","element_is_zero","element_to_bytes","new_pair_element","ones","p_tilde","sigma_multiply_basis","twos","ys","SteenrodEvaluator","adem","adem_q","adem_to_milnor","adem_to_milnor_on_basis","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","evaluate_algebra_adem","evaluate_algebra_milnor","evaluate_algebra_node","evaluate_basis_element","evaluate_module_adem","evaluate_p_or_b_list","from","init","into","milnor","milnor_to_adem","milnor_to_adem_on_basis","milnor_to_adem_on_basis_2","milnor_to_adem_on_basis_generic","new","prime","try_from","try_into","type_id","AList","AlgebraBasisElt","AlgebraNode","BasisElt","Bockstein","BocksteinOrSq","Err","IResult","ModuleNode","Ok","P","PList","Product","Q","Scalar","Sq","Sum","algebra_expr","algebra_factor","algebra_generator","algebra_term","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","brackets","buf","clone","clone","clone","clone_into","clone_into","clone_into","convert_error","deref","deref","deref","deref_mut","deref_mut","deref_mut","digits","drop","drop","drop","fmt","fmt","fmt","fold_separated","from","from","from","init","init","init","into","into","into","len","module_expr","module_generator","module_term","p_or_sq","parse_algebra","parse_module","scalar","space","to_adem_basis_elt","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"algebra"],[89,"algebra::adem_algebra"],[108,"algebra::algebra"],[134,"algebra::algebra::adem_algebra"],[262,"algebra::algebra::algebra_trait"],[304,"algebra::algebra::bialgebra_trait"],[307,"algebra::algebra::combinatorics"],[359,"algebra::algebra::field"],[390,"algebra::algebra::milnor_algebra"],[610,"algebra::algebra::pair_algebra"],[647,"algebra::algebra::polynomial_algebra"],[724,"algebra::algebra::steenrod_algebra"],[849,"algebra::combinatorics"],[865,"algebra::field"],[867,"algebra::milnor_algebra"],[905,"algebra::module"],[1003,"algebra::module::block_structure"],[1040,"algebra::module::finite_dimensional_module"],[1091,"algebra::module::finitely_presented_module"],[1145,"algebra::module::free_module"],[1261,"algebra::module::hom_module"],[1289,"algebra::module::homomorphism"],[1369,"algebra::module::homomorphism::free_module_homomorphism"],[1433,"algebra::module::homomorphism::full_module_homomorphism"],[1470,"algebra::module::homomorphism::generic_zero_homomorphism"],[1491,"algebra::module::homomorphism::hom_pullback"],[1519,"algebra::module::homomorphism::quotient_homomorphism"],[1558,"algebra::module::module_trait"],[1603,"algebra::module::quotient_module"],[1638,"algebra::module::rpn"],[1690,"algebra::module::steenrod_module"],[1694,"algebra::module::steenrod_module::json"],[1695,"algebra::module::suspension_module"],[1729,"algebra::module::tensor_module"],[1760,"algebra::module::zero_module"],[1762,"algebra::pair_algebra"],[1776,"algebra::steenrod_evaluator"],[1807,"algebra::steenrod_parser"],[1888,"core::option"],[1889,"alloc::string"],[1890,"once"],[1891,"alloc::vec"],[1892,"serde_json::value"],[1893,"bivec"],[1894,"anyhow"],[1895,"core::ops::function"],[1896,"fp::vector::vector_generic"],[1897,"fp::vector::vector_generic"],[1898,"std::io::error"],[1899,"std::io"],[1900,"std::io"],[1901,"core::fmt"],[1902,"core::iter::traits::iterator"],[1903,"core::result"],[1904,"core::any"],[1905,"serde::de"],[1906,"serde::ser"],[1907,"core::ops::function"],[1908,"core::marker"],[1909,"core::ops::range"],[1910,"once"],[1911,"fp::matrix::quasi_inverse"],[1912,"fp::matrix::matrix_inner"],[1913,"fp::matrix::matrix_inner"],[1914,"nom::error"],[1915,"nom::internal"],[1916,"nom::error"],[1917,"core::marker"]],"d":["","An <code>Algebra</code> implementing the Steenrod algebra, using the …","","An algebra that can be viewed as an Adem algebra.","A graded algebra over $\\\\mathbb{F}_p$.","","An <code>Algebra</code> equipped with a coproduct operation that makes …","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","An <code>Algebra</code> equipped with a distinguished presentation.","","","","","An algebra that is maybe unstable. Every Algebra …","","","","","","","","The Steenrod algebra using the Adem basis.","","Traits describing algebras, and implementations thereof …","Converts a string to a basis element. This must be a …","degree -&gt; AdemBasisElement -&gt; index","degree -&gt; MilnorBasisElement -&gt; index","Converts a basis element into a string for display.","","degree -&gt; index -&gt; AdemBasisElement","A list of all basis elements of each degree, constructed …","","Computes basis elements up to and including <code>degree</code>.","","Computes a coproduct $\\\\Delta(x)$, expressed as","Decomposes an element of the algebra into a product of …","Decomposes an element into generators.","","Returns the dimension of the algebra in degree <code>degree</code>.","","","","","","","","","","Finite fields over a prime.","","Returns relations that the algebra wants checked to ensure …","Return generators in <code>degree</code>.","","","","","","","","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","source_deg -&gt; target_deg -&gt; source_op -&gt; target_op","","Computes the product <code>r * s</code> of two basis elements, and adds …","","","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of two general elements, and …","","","This implements the notion of a split pair algebra in the …","","","","This is a list of possible P(R) of each degree, where …","Returns the prime the algebra is over.","","","","","","","","This module includes code for parsing an expression in the …","","","","An <code>Algebra</code> implementing the Steenrod algebra, using the …","An algebra that can be viewed as an Adem algebra.","An Adem basis element for the Steenrod algebra.","","","A Steenrod power $P^i$, or a Bockstein $\\\\beta^\\\\varepsilon$.","","degree -&gt; AdemBasisElement -&gt; index","degree -&gt; index -&gt; AdemBasisElement","A bitset of which $\\\\beta$ Bocksteins are in the element’…","The degree of the element.","","","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","","Whether to denote the generators as powers $P^i$ or …","A list of which Steenrod powers are in the element’s …","","","","","","","","","","","","","","","","","","","The Steenrod algebra using the Adem basis.","","","","Finite fields over a prime.","","This implements the notion of a split pair algebra in the …","","","An <code>Algebra</code> implementing the Steenrod algebra, using the …","An algebra that can be viewed as an Adem algebra.","An Adem basis element for the Steenrod algebra.","","","A Steenrod power $P^i$, or a Bockstein $\\\\beta^\\\\varepsilon$.","","","","","","","degree -&gt; AdemBasisElement -&gt; index","","degree -&gt; index -&gt; AdemBasisElement","","A bitset of which $\\\\beta$ Bocksteins are in the element’…","","","","","","","","","","","","","","","","The degree of the element.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","This function expresses $Sq^x$ (current) in terms of the …","We return Adem relations $b^2 = 0$, $P^i P^j = \\\\cdots$ for …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator over the element’s decomposition.","","","Reduce a Steenrod monomial at the prime 2.","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","","","","","","","","","","","","Constructs a new <code>AdemAlgebra</code>.","","","Whether to denote the generators as powers $P^i$ or …","","","","A list of which Steenrod powers are in the element’s …","","Shifts a <code>Vec</code>’s elements back by <code>offset</code>.","","","","","","","","","","","","","","","","","A graded algebra over $\\\\mathbb{F}_p$.","An <code>Algebra</code> equipped with a distinguished presentation.","An algebra that is maybe unstable. Every Algebra …","","Converts a string to a basis element. This must be a …","Converts a basis element into a string for display.","Computes basis elements up to and including <code>degree</code>.","Decomposes an element into generators.","Returns a list of filtration-one elements in $Ext(k, k)$.","Returns a list of filtration-one elements in $Ext(k, k)$.","Returns the dimension of the algebra in degree <code>degree</code>.","","","Converts a general element into a string for display.","Converts a general element into a string for display.","Returns relations that the algebra wants checked to ensure …","Returns the name of a generator.","Returns the name of a generator.","Return generators in <code>degree</code>.","A magic constant used to identify the algebra in save …","A magic constant used to identify the algebra in save …","Computes the product <code>r * s</code> of a basis element <code>r</code> and a …","Computes the product <code>r * s</code> of a basis element <code>r</code> and a …","","Computes the product <code>r * s</code> of a basis element <code>r</code> and a …","Computes the product <code>r * s</code> of a basis element <code>r</code> and a …","Computes the product <code>r * s</code> of two basis elements, and adds …","","","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of two general elements, and …","Computes the product <code>r * s</code> of two general elements, and …","Computes the product <code>r * s</code> of two general elements, and …","Computes the product <code>r * s</code> of two general elements, and …","Computes the product <code>r * s</code> of two general elements, and …","A name for the algebra to use in serialization operations. …","A name for the algebra to use in serialization operations. …","Returns the prime the algebra is over.","An <code>Algebra</code> equipped with a coproduct operation that makes …","Computes a coproduct $\\\\Delta(x)$, expressed as","Decomposes an element of the algebra into a product of …","","","If p is the nth prime, then <code>TAU_DEGREES[n][i]</code> is the …","","If p is the nth prime, then <code>XI_DEGREES[n][i - 1]</code> is the …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","index ==&gt; degree","","","degree =&gt; (first_index, number_of_gens)","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","degree =&gt; max_part =&gt; list of partitions with maximum part …","","","","","","","","","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Returns a new <code>Field</code> over the given prime <code>p</code>.","","","","","","","","","","","","","A version of <code>HashMap&lt;MilnorBasisElement, T&gt;</code> that is more …","","","The parts of a PPartMultiplier that involve heap …","","","","","","","","","degree -&gt; MilnorBasisElement -&gt; index","","A list of all basis elements of each degree, constructed …","Return the degree and index of $Q_1^e P(x)$.","","","","","","","","","","","","","","","","","","","","Update the degree component to the correct degree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assert that <code>elt</code> is in the image of the differential. Drop …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Returns <code>true</code> if the new element is not within the bounds","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether the profile is that of A(n). This is relevant …","","Checks whether the profile function is valid","","","","","","source_deg -&gt; target_deg -&gt; source_op -&gt; target_op","","","","","","","","","","","","","","","","","","","","","","","This compute the first l &gt; k such that (sum + l) choose l …","","","The profile function for the Q part.","","","","Gives a list of PPart’s in degree <code>t</code>.","This is a list of possible P(R) of each degree, where …","","","","","","","A bitmask indicating which of the Q_k we want to include …","","","","","","","","","","","","If <code>true</code>, unspecified p_part entries will be 0. Otherwise …","","","","","","","","","","","","","","","","","","","","","","We have a matrix of the form | s₁  s₂  s₃ …","","This creates a PPartAllocation with enough capacity to …","","","An element in the cohomological degree zero part of the …","","","A lift of an algebra to a split pair algebra. See module …","Compute $A(r, s)$ and write the result to <code>result</code>.","Compute $A(Sq(R), Y_{k, l})$ where $a = Sq(R)$. This …","Actually computes $A(a, Y_{k, l})$ and returns the result.","","","","","","","","","","Assert that <code>elt</code> is in the image of the differential. Drop …","Assert that <code>elt</code> is in the image of the differential. Drop …","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Create a new zero element in the given degree.","","The element p is classified by a filtration on element in …","Same as <code>PairAlgebra::sigma_multiply_basis</code> but with …","Same as <code>PairAlgebra::sigma_multiply_basis</code> but with …","Given $r, s \\\\in \\\\pi_0(A)$, compute $\\\\sigma(r) \\\\sigma(s)$ …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","index ==&gt; degree","degree =&gt; (first_index, number_of_gens)","","","","","","","degree =&gt; max_part =&gt; list of partitions with maximum part …","","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","","","","","","","","The parts of a PPartMultiplier that involve heap …","","","","degree -&gt; MilnorBasisElement -&gt; index","A list of all basis elements of each degree, constructed …","","","","","","","","","","","","","source_deg -&gt; target_deg -&gt; source_op -&gt; target_op","","","The profile function for the Q part.","","","This is a list of possible P(R) of each degree, where …","","A bitmask indicating which of the Q_k we want to include …","","","","If <code>true</code>, unspecified p_part entries will be 0. Otherwise …","","","","","","","Given a module N and a free module M, this is the module …","A bounded below module over an algebra. To accommodate for …","","A free module.","","A quotient of a module truncated below a fix degree.","This is $\\\\mathbb{RP}_{\\\\mathrm{min}}^{\\\\mathrm{max}}$. The …","","","","","","","","The algebra the module is over.","","","","","","","","","","The name of a basis element. This is useful for debugging …","For each degree <code>d</code>, <code>basis_list[d]</code> is a list of basis …","","","","","The dimension of a module at the given degree","","","","","","degree -&gt; internal index of first generator in degree","degree -&gt; internal index of first generator in degree","degree -&gt; internal index of first generator in degree","","","","","","","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","","","","","","","","","","The maximum <code>t</code> for which the module is fully defined at <code>t</code>. …","","The minimum degree of the module, which is required to be …","","","","","The underlying module","","","","","","","","","","","","","","","","","","","","","The subspaces that we quotient out by","","","","Everything above this degree is quotiented out.","","","","A block structure is a structure that makes it efficient …","","Add source vector “source” to the block indicated by …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert (generator, basis element) to basis element of the …","","","Find the block corresponding to a given generator.","Find the (generator, basis element) pair corresponding to …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","This function will panic if you call it with input such …","This function will panic if you call it with input such …","","","","","","","","","","","","","","","","","","","","","","","","This should really by try_from but orphan rules prohibit …","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A free module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","degree -&gt; internal index of first generator in degree","degree -&gt; internal index of first generator in degree","degree -&gt; internal index of first generator in degree","","","","","","","Given a generator <code>(gen_deg, gen_idx)</code>, find the first index …","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","","","","","","Given a generator <code>(gen_deg, gen_idx)</code>, find the first index …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Iterate the degrees and offsets of each generator up to …","Iterate the degrees and indices of each generator up to …","Given an element in a degree, iterate through the slices …","","","","","","","","","","","","","","","","","","","","","Given a vector that represents an element in degree <code>degree</code>…","","","","","","","","","","","","","","","","","Given a module N and a free module M, this is the module …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A ModuleHomomorphism that simply records the matrix of the …","","Given a map $\\\\mathtt{map}: A \\\\to B$ and hom modules …","","Each <code>ModuleHomomorphism</code> may come with auxiliary data, …","","","","","","","","","Attempt to apply quasi inverse to the input. Returns …","Calling this function when …","Compute the auxiliary data associated to the homomorphism …","","","degree shift, such that ouptut_degree = input_degree - …","degree shift, such that ouptut_degree = input_degree - …","degree shift, such that ouptut_degree = input_degree - …","","","","","","","","Write the matrix of the homomorphism at input degree <code>degree</code>…","Get the values of the homomorphism on the specified inputs …","","","","","","","","","","","","","","","","The matrices of the module homomorphism. Unspecified …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A MatrixSlice will do but there is no applicaiton of this …","","Add the image of a bidegree out of order. See …","","","","","","","","degree shift, such that ouptut_degree = input_degree - …","degree shift, such that ouptut_degree = input_degree - …","degree shift, such that ouptut_degree = input_degree - …","","","","","","Returns the argument unchanged.","Given f: M -&gt; N, compute the dual f*: Hom(N, k) -&gt; Hom(M, …","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","List of outputs that have been added out of order","","","","","","","","","","","","","","","","","","","","","","","","A ModuleHomomorphism that simply records the matrix of the …","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","The matrices of the module homomorphism. Unspecified …","","","","This function replaces the source of the …","See <code>replace_source</code>","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Given a map $\\\\mathtt{map}: A \\\\to B$ and hom modules …","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A bounded below module over an algebra. To accommodate for …","","The length of <code>input</code> need not be equal to the dimension of …","The length of <code>input</code> need not be equal to the dimension of …","","","","","","The algebra the module is over.","The name of a basis element. This is useful for debugging …","","","Compute internal data of the module so that we can query …","Compute internal data of the module so that we can query …","","","The dimension of a module at the given degree","","Gives the name of an element. The default implementation …","Gives the name of an element. The default implementation …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Whether this is the unit module.","Whether this is the unit module.","The maximum <code>t</code> for which the module is fully defined at <code>t</code>. …","<code>max_degree</code> is the a degree such that if t &gt; <code>max_degree</code>, …","<code>max_degree</code> is the a degree such that if t &gt; <code>max_degree</code>, …","Maximum degree of a generator under the Steenrod action. …","Maximum degree of a generator under the Steenrod action. …","The minimum degree of the module, which is required to be …","The prime the module is over, which should be equal to the …","The prime the module is over, which should be equal to the …","","","","","","","","","A quotient of a module truncated below a fix degree.","","","","","For each degree <code>d</code>, <code>basis_list[d]</code> is a list of basis …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","The underlying module","","","","","","Arguments","","The subspaces that we quotient out by","","Everything above this degree is quotiented out.","","","","","","This is $\\\\mathbb{RP}_{\\\\mathrm{min}}^{\\\\mathrm{max}}$. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","An element in the cohomological degree zero part of the …","","A lift of an algebra to a split pair algebra. See module …","Compute $A(r, s)$ and write the result to <code>result</code>.","","","","","Create a new zero element in the given degree.","","The element p is classified by a filtration on element in …","Given $r, s \\\\in \\\\pi_0(A)$, compute $\\\\sigma(r) \\\\sigma(s)$ …","","","","","Express $Q_{qi}$ in the adem basis.","","Translate from the adem basis to the milnor basis, adding …","","","","","","","","","","","","Returns","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Contains the error value","","","Contains the success value","","","","","","","","","","","","","","","","","","Surround with brackets","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Pad both ends with whitespace","","","","","","","","","","","","",""],"i":[67,0,66,0,0,0,0,32,32,0,0,67,0,66,0,0,0,0,0,0,0,0,0,0,1,0,3,2,22,3,10,2,22,0,3,10,14,14,16,65,3,18,19,0,2,2,22,65,10,10,0,10,16,16,2,22,11,0,21,0,0,11,2,22,19,3,18,19,19,19,2,22,0,65,10,10,22,3,10,50,22,10,10,31,0,0,2,22,65,0,0,0,40,40,0,1,2,2,33,33,2,2,2,2,2,33,33,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,40,0,2,1,2,2,2,2,2,2,2,2,33,2,33,40,2,33,40,33,33,2,2,2,2,2,2,2,33,2,33,40,2,33,40,2,2,2,2,2,33,40,2,2,2,33,33,33,33,2,33,2,2,2,33,33,40,2,33,40,2,2,2,2,2,2,2,2,2,2,2,2,2,2,33,2,33,40,2,33,40,33,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,33,2,2,2,33,2,0,2,2,33,2,33,2,2,33,40,2,33,40,2,33,40,2,0,0,0,0,3,3,3,16,3,3,3,18,19,3,3,16,16,16,16,3,3,3,3,19,18,18,3,18,19,3,3,19,18,18,3,3,19,18,18,3,3,3,0,14,14,0,0,0,0,0,20,0,20,49,20,49,20,49,20,49,20,49,20,49,20,20,20,20,20,0,20,49,49,20,20,49,49,49,20,49,49,20,49,20,20,49,20,49,49,0,20,49,20,49,20,49,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,58,0,0,0,0,0,0,0,0,0,0,22,58,125,22,22,22,22,22,22,22,22,58,53,51,54,55,22,58,53,51,54,55,57,51,51,51,58,54,22,51,22,22,22,22,22,22,53,51,54,55,22,51,22,58,53,51,54,55,22,58,53,51,54,55,53,58,58,55,22,22,22,22,22,58,53,51,54,55,22,22,22,53,51,53,53,53,51,51,51,51,22,22,22,53,51,51,54,54,22,58,53,51,54,55,51,22,22,22,22,22,22,22,22,53,51,22,54,54,22,58,53,51,54,55,58,54,22,58,53,51,54,55,58,58,53,53,53,57,55,22,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,58,22,22,58,58,22,58,53,51,55,22,22,22,22,22,58,22,22,22,53,51,0,58,54,58,53,22,51,22,51,54,53,22,22,22,58,53,51,54,55,22,58,53,51,54,55,22,58,53,51,54,55,22,58,54,55,55,0,62,0,0,0,62,0,0,126,126,126,126,126,126,62,62,62,62,62,126,127,126,126,62,126,62,62,62,62,0,127,126,126,126,126,0,126,0,0,0,10,65,11,65,11,65,65,10,10,10,11,65,65,11,65,11,65,11,65,65,65,65,65,10,10,65,65,10,10,10,65,11,65,10,10,11,65,11,65,11,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,65,11,65,10,10,10,10,10,10,10,65,65,65,11,65,11,65,11,65,67,66,0,0,32,32,67,66,0,0,0,66,66,68,66,66,32,66,67,68,32,66,67,68,67,67,66,66,66,66,66,32,66,67,68,32,66,67,68,68,66,66,66,66,0,32,66,67,68,66,66,66,66,67,67,67,67,66,66,67,67,68,32,66,67,68,66,67,66,66,66,32,66,67,68,32,66,67,68,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,68,66,66,66,68,66,66,31,66,67,66,67,32,66,67,67,68,32,66,66,66,67,68,32,66,67,68,0,0,0,0,20,20,0,49,20,49,20,49,20,49,0,0,0,50,58,0,0,0,0,0,0,0,0,58,22,22,57,58,51,58,58,55,22,22,58,57,55,21,22,22,58,53,51,55,22,22,53,51,58,58,53,22,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,76,70,76,79,128,80,106,86,79,128,80,70,104,0,86,110,106,70,84,0,0,0,84,79,128,80,76,79,128,80,81,81,79,128,80,78,76,0,0,78,109,110,78,106,70,106,70,78,79,128,80,104,0,76,78,79,128,80,79,128,80,81,81,0,77,78,110,0,109,86,84,0,104,0,86,0,104,77,0,72,0,0,73,73,74,73,74,73,74,73,74,73,74,73,74,73,74,73,74,73,73,74,74,73,73,74,73,74,73,73,73,74,73,74,73,74,73,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,78,78,78,78,78,129,78,129,78,78,129,78,129,78,78,129,78,78,78,78,78,78,78,129,129,78,78,78,129,78,78,78,129,78,129,78,78,78,78,78,78,78,78,78,78,129,78,129,78,129,78,78,0,0,0,0,0,0,80,80,80,80,79,128,80,79,128,80,80,80,84,85,81,80,84,85,81,81,81,80,85,80,84,85,81,80,84,85,81,80,80,84,85,81,84,80,80,81,80,84,85,81,84,85,79,128,80,80,79,128,80,81,81,80,79,128,80,80,80,84,85,81,80,80,84,85,81,85,80,80,80,80,80,80,79,128,80,85,79,128,80,80,85,79,128,80,80,85,81,80,81,80,84,81,80,80,84,85,81,80,84,85,81,80,84,85,81,80,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,0,0,0,0,0,0,0,0,89,89,0,0,89,89,89,89,89,89,101,130,96,98,99,102,103,0,0,0,89,89,0,94,89,101,130,96,98,100,89,101,130,96,98,100,100,98,89,101,130,96,101,130,96,89,89,101,130,96,98,100,0,102,103,89,101,130,96,98,99,100,102,89,101,130,96,98,99,100,95,0,0,0,96,96,96,96,96,96,96,96,96,96,96,101,130,96,96,96,96,96,96,96,96,96,101,130,96,96,96,96,101,130,96,96,101,130,96,96,96,96,96,101,130,96,96,101,130,96,96,96,96,96,101,130,96,96,101,130,96,96,96,96,96,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,102,103,102,103,102,103,102,103,70,0,0,70,70,70,70,70,70,70,70,70,77,77,70,70,77,77,70,77,70,70,77,77,77,77,77,70,70,70,70,70,70,70,70,70,70,77,77,70,70,77,77,77,77,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,0,106,106,106,106,106,107,106,107,106,107,0,0,106,107,106,107,107,106,106,107,106,106,106,106,106,107,106,107,106,106,107,106,107,106,107,106,106,106,107,106,106,106,106,106,107,106,107,106,107,106,0,0,0,108,0,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,0,72,62,0,0,62,126,62,62,62,62,126,62,62,126,126,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,113,0,0,112,115,0,131,0,0,131,113,113,112,113,112,115,112,0,0,0,0,113,112,115,113,112,115,0,132,113,112,115,113,112,115,0,113,112,115,113,112,115,0,113,112,115,113,112,115,0,113,112,115,113,112,115,113,112,115,132,0,0,0,0,0,0,0,0,115,113,112,115,113,112,115,113,112,115,113,112,115],"f":"````````````````````````{bd}`{{fh}{{A`{{n{jl}}}}}}``{{fjl}Ab}{Ad{{Ah{Af}}}}```{{fj}Aj}{{Adj}Aj}{{Aljl}{{An{{n{jljl}}}}}}{{Aljl}{{An{{n{jl}}}}}}{{B`jl}{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}`{{fj}l}{{Bdjj}l}{{Bfjj}l}`````{{Adj}l}{AdBh}`{{Adjl}{{A`{l}}}}{{B`j}{{An{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}}}{{B`j}{{An{l}}}}````{BjBl}`{Bn{{n{{C`{l}}{C`{{An{Ab}}}}{`{{Cf{h}{{Cb{{Cd{{n{jl}}}}}}}}}}}}}}```{{BfChBbjljCjj}Aj}{{fChBbjljl}Aj}{{BdChBbjljlj}Aj}{{BfChBbjljlj}Aj}{{BfChBbjCjjlj}Aj}{{BfChBbjCjjCjj}Aj}````<;`{fCl}{AdCl}``{{Adjl}Ab}{{Adjl}{{n{AbBb}}}}{CnD`}```````````{bd}````````````````````````````````````````````{{dChBbjCjjc}Aj{}}1{dd}{{djl}Db}{{dh}{{A`{{n{jl}}}}}}{{dDb}l}`{{djl}Ab}`{{dBbBb}{{n{jl}}}}`{ce{}{}}00000{DbDb}{{ce}Aj{}{}}{{dj}Aj}{{djl}{{An{{n{jljl}}}}}}{{djl}{{An{{n{jl}}}}}}{{djl}{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}00{d{{An{{n{Abjl}}}}}}`{lc{}}00000{{dj}l}{{cjj}l{}}{{djj}l}1{lAj}00{{djc}{{Dd{e}}}Df{}}{cDh{}}{{dce}{{Dd{Aj}}}{}Dj}{{DbDb}Dh}{{ce}Dh{}{}}00`{{DbCl}Bb}`{cAj{}}{{dDl}Dn}{{DbDl}Dn}0{{E`Dl}Dn}{cc{}}00{{dj}Aj}00000{{d{Ed{{An{Eb}}}}jjl}Eb}10{{dj}{{An{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}}}{{djl}Ab}{{dj}{{An{l}}}}{dDh}`{{Dbc}AjEf}{{}l}00{ce{}{}}00{Db{{`{{Ej{}{{Eh{E`}}}}}}}}{dBb}{{dChBbDbj}Aj}{{dChDbjjjDh}Aj}{{dChBbDbjjjDh}Aj}`{{cChBbjljCjj}Aj{}}0{{dChBbjljl}Aj}{{cChBbjljlj}Aj{}}0{{dChBbjljlj}Aj}{{cChBbjCjjlj}Aj{}}0{{cChBbjCjjCjj}Aj{}}02{{ClDh}d}{{dj}c{}}``{dl}{dh}{dCl}`{dj}{{{An{c}}El}Aj{}}{{dcBbjljl}Aj{}}{{dDbBbBb}l}{ce{}{}}{cAb{}}0{{dDb}{{A`{l}}}}{c{{En{e}}}{}{}}00000{cF`{}}00`````{{fh}{{A`{{n{jl}}}}}}{{fjl}Ab}{{fj}Aj}{{B`jl}{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}{f{{An{{n{Abjl}}}}}}0{{fj}l}{{Bdjj}l}{{Bfjj}l}{{fjCj}Ab}0{{B`j}{{An{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}}}{{B`jl}Ab}0{{B`j}{{An{l}}}}{fBb}0{{fChBbjljCj}Aj}0{{BfChBbjljCjj}Aj}{{BdChBbjljCjj}Aj}0{{fChBbjljl}Aj}{{BdChBbjljlj}Aj}{{BfChBbjljlj}Aj}{{fChBbjCjjl}Aj}0{{BfChBbjCjjlj}Aj}{{BdChBbjCjjlj}Aj}0{{fChBbjCjjCj}Aj}0{{BfChBbjCjjCjj}Aj}{{BdChBbjCjjCjj}Aj}0{fh}0{fCl}`{{Aljl}{{An{{n{jljl}}}}}}{{Aljl}{{An{{n{jl}}}}}}`````{{Bhjl}Aj}{{ClBbBbBbBbBb}Bb}{ce{}{}}000{lc{}}000{lAj}0{cc{}}0{{Bhjl}l}`{{Bhj}l}0`{{ClDhj}{{An{{n{BbBbBb}}}}}}{{}l}0`{{Bhl}{{n{jl}}}}888{c{{n{eg}}}{}{}{}}{ClBh}{{jBb{Ed{j}}}Fb}{Fb{{A`{c}}}{}}``{{Bhj}{{An{Eb}}}}````{FbDh}{Cl{{Ed{j}}}}{c{{En{e}}}{}{}}000{cF`{}}02`{{Fdh}{{A`{{n{jl}}}}}}{{Fdjl}Ab}{ce{}{}}0{{Fdj}Aj}{{Fdjl}{{An{{n{jljl}}}}}}{{Fdjl}{{An{{n{jl}}}}}}{Fd{{An{{n{Abjl}}}}}}{lc{}}0{{Fdj}l}{{cjj}l{}}{lAj}{{FdjCj}Ab}{{FdDl}Dn}{cc{}}{{}l}<{{cChBbjljCjj}Aj{}}{{FdChBbjljl}Aj}{{cChBbjljlj}Aj{}}{{cChBbjCjjlj}Aj{}}{{cChBbjCjjCjj}Aj{}}{ClFd}{FdCl}`{cAb{}}{c{{En{e}}}{}{}}0{cF`{}}````````````{{BlChBbjCjjc}Aj{}}``{{Bljl}Ff}{{Blh}{{A`{{n{jl}}}}}}{{BlFf}l}`{{Bljl}Ab}`{{BlBbFh}{{n{jl}}}}{ce{}{}}00000000000`{FfFf}{{ce}Aj{}{}}{{FfFf}Aj}``{{Blj}Aj}{{FfCl}Aj}1{{Bljl}{{An{{n{jljl}}}}}}{{Bljl}{{An{{n{jl}}}}}}{{Bljl}{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}00{{}Fj}{{}Ff}{{}Fl}{{}Fn}{Bl{{An{{n{Abjl}}}}}}`{lc{}}00000000000{c{{En{Fj}}}G`}```{{Blj}l}{{cjj}l{}}0{{Bljj}l}{lAj}00000{{Bljc}{{Dd{e}}}Df{}}{cDh{}}{{Blce}{{Dd{Aj}}}{}Dj}{{FjFj}Dh}{{FfFf}Dh}{{ce}Dh{}{}}00000{{FfCl}Bb}`{cAj{}}{{BlDl}Dn}{{FjDl}Dn}{{FfDl}Dn}0{{FlDl}Dn}0{cc{}}00000{{Gbj}Ff}{{Blj}Aj}00{{Blj}{{An{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}}}{{Bljl}Ab}{{Blj}{{An{l}}}}{BlDh}`{{Fjl}Fh}{{Ffc}AjEf}{{Gb{Ed{Fh}}}Dh}{{Fll}c{}}0{{}l}00000``{ce{}{}}00000{GdFn}1{{FjDh}Dh}{FjDh}0``{BlBb}{BjBl}{BlBl}`{{BlChBbFfFf}Aj}{{BlChBbFfjCj}Aj}{{BlChBbFfjCjFn}Fn}{{BlChBbjljCj}Aj}{{cChBbjljCjj}Aj{}}0{{BlChBbjljl}Aj}{{cChBbjljlj}Aj{}}{{BlChBbjljlj}Aj}1{{cChBbjCjjlj}Aj{}}0{{BlChBbjCjjCj}Aj}{{cChBbjCjjCjj}Aj{}}0{{BlFfBb}{{An{{n{BbFf}}}}}}{{BlChBbFfFfjFn}Fn}{{ClDh}Bl}{{ClGbGbFnBbj}Gd}{{Blj}c{}}{{ClFjDh}Bl}{Gd{{A`{Bb}}}}{{GdFhFhFh}Fh}`````{Bll}{{Blj}{{Ed{Gb}}}}`{Blh}{BlCl}{GdCl}{BlFj}`{Blj}``{{}Bb}`{{Flll}Aj}`{{Fjc}EnGf}{{BlcBbjljl}Aj{}}{ce{}{}}{cAb{}}00`{{BlFf}{{A`{l}}}}{{BlBbFh}{{A`{{n{jl}}}}}}{c{{En{e}}}{}{}}00000000000{cF`{}}00000`{GdDh}{{ll}Fl}{lFn}{cAj{{Gh{Fn}{{Cb{Fn}}}}}}`````{{{Gl{}{{Gj{c}}}}ChBbjCjjc}Aj{GnH`}}{{BlFfllc}Aj{{Gh{Eb}}}}{{BlFfll}Eb}<<`{lc{}}0{lAj}{{{Gl{}{{Gj{c}}}}je}{{Dd{c}}}{GnH`}Df}{cDh{}}{{{Gl{}{{Gj{c}}}}ce}{{Dd{Aj}}}{GnH`}Dj}{cAj{}}0{cc{}}`{{}l}{ce{}{}}{{{Gl{}{{Gj{c}}}}j}c{GnH`}}`{{{Gl{}{{Gj{c}}}}}l{GnH`}}{{{Gl{}{{Gj{c}}}}cBbjCjjCj}Aj{GnH`}}0{{{Gl{}{{Gj{c}}}}cBbjljl}Aj{GnH`}}``{c{{En{e}}}{}{}}0`{cF`{}}`````{Ad{{Ah{Af}}}}7777{HbHb}{{ce}Aj{}{}}{{Adj}Aj}00{{}Af}`{lc{}}000{lAj}0{{HbHb}Dh}{{ce}Dh{}{}}00`{{Adj}l}{AdBh}{{HbDl}Dn}0{{AdEbEb}Aj}0{{Adjl}{{A`{l}}}}{cc{}}0{{Hbc}AjEf}{{Adjl}Hb}0`{{}l}0{ce{}{}}0{Adj}000{{AdHb}l}0`{{AdEbBbHbjEb}Aj}0{{AdHbHb}{{A`{Bb}}}}0{{AdEbBbjEbHb}Aj}0{{AdEbBbjEbjEb}Aj}0{ClHb}{{}Af}`{{Adj}l}{AdBh}{AdCl}{{Adjl}Ab}{{Adjl}{{n{AbBb}}}}{{AdHbj}Aj}0>{cAb{}}{c{{En{e}}}{}{}}000{cF`{}}0````````````{{HdChBbjCjjc}Aj{}}{cd{}}`{{Hdh}{{A`{{n{jl}}}}}}{{Hdjl}Ab}{ce{}{}}0000000{HfHf}{{ce}Aj{}{}}{{Hdj}Aj}{{Hdjl}{{An{{n{jljl}}}}}}{{Hdjl}{{An{{n{jl}}}}}}{{Hdjl}{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}{Hd{{An{{n{Abjl}}}}}}{lc{}}0000000{c{{En{Hh}}}G`}{{Hdj}l}{{cjj}l{}}{{Hdjj}l}1`{lAj}000{{Hdjc}{{Dd{e}}}Df{}}{cDh{}}{{Hdce}{{Dd{Aj}}}{}Dj}{{HdjCj}Ab}{{HfHf}Dh}{{ce}Dh{}{}}00{cAj{}}{{HdDl}Dn}{{HfDl}Dn}0{{HhDl}Dn}{cc{}}000{{BnHfDh}{{Cd{Hd}}}}{h{{En{Hfc}}}{}}{{Hdj}{{An{{An{{n{Bb{n{jl}}{n{jl}}}}}}}}}}{{Hdjl}Ab}{{Hdj}{{An{l}}}}{{}l}000{ce{}{}}000{HdBb}{cBl{}}{{HdChBbjljCj}Aj}{{HdChBbjljCjj}Aj}{{cChBbjljCjj}Aj{}}0{{HdChBbjljl}Aj}{{HdChBbjljlj}Aj}{{cChBbjljlj}Aj{}}0{{HdChBbjCjjl}Aj}{{cChBbjCjjlj}Aj{}}0{{HdChBbjCjjlj}Aj}{{HdChBbjCjjCj}Aj}{{cChBbjCjjCjj}Aj{}}0{{HdChBbjCjjCjj}Aj}{{Hdj}c{}}`{Hdl}{Hdh}{HdCl}`{{HdcBbjCjjCj}Aj{}}{{HdcBbjljl}Aj{}}{CnD`}{HdD`}{ce{}{}}{cAb{}}0{c{{En{e}}}{}{}}00{h{{En{Hfc}}}{}}111{Hd{{En{dc}}}{}}{Hd{{En{Blc}}}{}}33{cF`{}}000```{{ClBbBbBbBbBb}Bb}``{{ClDhj}{{An{{n{BbBbBb}}}}}}```````{Cl{{Ed{j}}}}0`````````````````````````{BjBl}```````````````````````````````{{{Hl{}{{Hj{c}}}}ChBbjljl}Ajf}`{{{Hl{}{{Hj{c}}}}}{{Hn{c}}}f}`````````{{{Hl{}{{Hj{c}}}}jl}Abf}`````{{{Hl{}{{Hj{c}}}}j}lf}``````````````````````````{{{Hl{}{{Hj{c}}}}}jf}`0````````````````````````````````{{{Hn{c}}j}I`{}}``{{IbChBbjlCj}Aj}```{ce{}{}}000{lc{}}000{lAj}0{{IdDl}Dn}{{IbDl}Dn}{cc{}}0{{Ibjll}l}``{{Ibjl}{{If{l}}}}{{Ibl}Id}{{}l}099{{{C`{{An{l}}}}}Ib}{Ibl}{c{{En{e}}}{}{}}000{cF`{}}0`{{{Ih{c}}ChBbjljl}Ajf}{{{Ih{c}}jljl}Ebf}0`{{{Ih{c}}}BnB`}{{{Ih{c}}jAb}Ajf}{{{Ih{c}}}{{Hn{e}}}f{}}`{{{Hn{c}}{C`{l}}}{{C`{{C`{{An{{An{Eb}}}}}}}}}f}{{{Ih{c}}jl}Abf}{ce{}{}}0{{{Ih{c}}jj}{{En{AjIj}}}B`}{{{Ih{c}}}{{Ih{c}}}f}{{ce}Aj{}{}}{{{Ih{c}}j}Ajf}{lc{}}0{{{Ih{c}}j}lf}{lAj}{{{Ih{c}}{Ih{c}}}Dhf}{{ce}Dh{}{}}00{{{Ih{c}}jj}AjB`}{{{Ih{c}}Dl}Dnf}{cIhHl}{cc{}}{{{Hn{c}}Bn}{{Cd{{Ih{c}}}}}B`}``{{}l}?{{{Ih{c}}}jf}{{{Ih{c}}}{{A`{j}}}f}1`{{{Hn{c}}Ab{C`{l}}}{{Ih{c}}}f}{{{Ih{c}}ehDh}{{Cd{Aj}}}B`{{Cf{h}{{Cb{{Cd{{n{jl}}}}}}}}}}{{{Ih{c}}jljl{Ed{Bb}}}Ajf}{{{Ih{c}}jlAb}Ajf}{{{Ih{c}}h}{{A`{{n{jl}}}}}f}{{{Ih{c}}{Ih{c}}}{{En{AjAb}}}f}{{{Ih{c}}Bn}AjB`}{ce{}{}}{cAb{}}{c{{En{e}}}{}{}}0{cF`{}}{{{Hn{c}}j}{{Ih{c}}}f}``{{{Il{c}}ChBbjljl}Ajf}{{{Il{c}}j{An{Ab}}}Ajf}{{{Il{c}}j{An{Eb}}}Ajf}{{{Il{c}}}{{Hn{c}}}f}{{{Il{c}}jl}Abf}9999{{{Il{c}}j}Ajf}{lc{}}000{{{Il{c}}j}lf}{lAj}0{{{Il{c}}{Il{c}}}Dhf}{{ce}Dh{}{}}00{{{Il{c}}Dl}Dnf}{{{Il{c}}jl}lf}`{cc{}}0{{{Hn{c}}Bn}{{Cd{{Il{c}}}}}f}{{{Il{c}}jl}Elf}`{{{Il{c}}}{{Hn{{In{c}}}}}f}``{{}l}0{ce{}{}}0`{{{Il{c}}}jf}{{{Il{c}}}{{A`{j}}}f}1``{{{Hn{c}}Abj}{{Il{c}}}f}`{cAb{}}{c{{En{e}}}{}{}}000{cF`{}}0{{{Hn{c}}j}{{Il{c}}}f}``````{{{J`{c}}ChBbjljCj}AjBf}{{{J`{c}}ChBbjljl}AjBf}{{{J`{c}}jl{A`{{An{Ab}}}}}AjBf}{{{J`{c}}}{{Hn{c}}}Bf}``````{{{J`{c}}jl}AbBf}<<<<<<<<{JbJb}{{ce}Aj{}{}}{{{J`{c}}j}AjBf}`{lc{}}0000000{{{J`{c}}j}lBf}{lAj}000`3{{{J`{c}}Dl}DnBf}{{JbDl}Dn}{cc{}}000`````{{{J`{c}}}{{Jd{{An{Ab}}}}}Bf}`````{{{J`{c}}jjl}lBf}```{{{J`{c}}jl}JbBf}{{}l}000{{{J`{c}}jl}lBf}{ce{}{}}0000{{{J`{c}}{Jf{j}}}{{`{{Ej{}{{Eh{Jh}}}}}}}Bf}{{{J`{c}}j}{{`{{Ej{}{{Eh{{n{jl}}}}}}}}}Bf}{{{J`{c}}jCj}{{`{{Ej{}{{Eh{{n{jljCj}}}}}}}}}Bf}{{{J`{c}}}jBf}{{{J`{c}}}{{A`{j}}}Bf}1```````{{{Hn{c}}Abj}{{J`{c}}}Bf}{{{Jj{ce}}}{{A`{g}}}Bf{{Ej{}{{Eh{j}}}}}{}}```{{{J`{c}}j}lBf}``{{{J`{c}}jljl}lBf}`{{{J`{c}}jjlCj}CjBf}`:{cAb{}}{c{{En{e}}}{}{}}0000000{cF`{}}000{{{Hn{c}}j}{{J`{c}}}Bf}`{{{Jl{c}}ChBbjljl}AjHl}{{{Jl{c}}}{{Hn{e}}}Hl{}}`{{{Jl{c}}jl}AbHl}`{ce{}{}}0{{{Jl{c}}j}AjHl}{lc{}}0{{{Jl{c}}j}lHl}{lAj}{{{Jl{c}}Dl}DnHl}{cc{}}{{}l}7{{{Jl{c}}}jHl}0{{{Hn{In}}{Hn{c}}}{{Jl{c}}}Hl}{{{Jl{c}}}{{Hn{In}}}Hl}`{{{Jl{c}}}{{Hn{c}}}Hl}`{cAb{}}{c{{En{e}}}{}{}}0{cF`{}}`````````````{{{Kb{}{{Jn{c}}{K`{e}}}}ChBbjCj}AjHl{{Hl{}{{Hj{}}}}}}{{{Kb{}{{Jn{c}}{K`{e}}}}ChjCj}DhHl{{Hl{}{{Hj{}}}}}}{{{Kb{}{{Jn{c}}{K`{e}}}}ChBbjl}AjHl{{Hl{}{{Hj{}}}}}}{{{Kb{}{{Jn{c}}{K`{e}}}}j}{{n{KdKdKf}}}Hl{{Hl{}{{Hj{}}}}}}{{{Kb{}{{Jn{c}}{K`{e}}}}j}AjHl{{Hl{}{{Hj{}}}}}}{{{Kb{}{{Jn{c}}{K`{e}}}}}jHl{{Hl{}{{Hj{}}}}}}``````````{{{Kb{}{{Jn{c}}{K`{e}}}}Khj}AjHl{{Hl{}{{Hj{}}}}}}{{{Kb{}{{Jn{c}}{K`{e}}}}j{Ed{l}}}KjHl{{Hl{}{{Hj{}}}}}}`{{{Hn{c}}}KlHl}{{{Kb{}{{Jn{c}}{K`{e}}}}j}{{A`{Kd}}}Hl{{Hl{}{{Hj{}}}}}}`````0```````4``````{{{Kb{}{{Jn{c}}{K`{e}}}}}ClHl{{Hl{}{{Hj{}}}}}}{{{Kb{}{{Jn{c}}{K`{e}}}}j}{{A`{Kf}}}Hl{{Hl{}{{Hj{}}}}}}````````{{{Kb{}{{Jn{c}}{K`{e}}}}}{{Hn{c}}}Hl{{Hl{}{{Hj{}}}}}}```````{{{Kb{}{{Jn{c}}{K`{e}}}}}{{Hn{e}}}Hl{{Hl{}{{Hj{}}}}}}``````{{{Hn{c}}{Hn{e}}j}KnHl{{Hl{}{{Hj{}}}}}}```{{{L`{c}}jCj}AjHl}{{{L`{c}}jKh}AjHl}{{{L`{c}}j{An{Eb}}}AjHl}{{{L`{c}}j{An{Eb}}}{{If{j}}}Hl}{{{L`{c}}ChBbjl}AjHl}{{{L`{c}}EbBbjl}AjHl}{ce{}{}}0{{{L`{c}}j}AjHl}{{{L`{c}}}jHl}0```{lc{}}0{{{L`{c}}j}LbHl}{lAj}4{cc{}}{{{L`{{J`{c}}}}j}{{An{{An{Bb}}}}}Bf}{{{L`{c}}j}{{A`{Kd}}}Hl}```{{}l}91```7```{{{Hn{J`}}{Hn{c}}j}{{L`{c}}}Hl}8{{{L`{c}}}{{An{j}}}Hl}{{{L`{c}}jl}EbHl}```{{{L`{c}}j}{{A`{Kf}}}Hl}```{{{L`{c}}j{A`{Kd}}}AjHl}0{{{L`{c}}j{A`{Kf}}}AjHl}{{{L`{c}}}{{Hn{e}}}Hl{}}```0```{c{{En{e}}}{}{}}0{cF`{}}8`{{{Ld{ce}}ChBbjl}AjHl{{Hl{}{{Hj{}}}}}}{ce{}{}}0{{{Ld{ce}}}{{Ld{ce}}}Hl{{Hl{}{{Hj{}}}}}}{{ce}Aj{}{}}{{{Ld{ce}}j}AjHl{{Hl{}{{Hj{}}}}}}{{{Ld{ce}}}jHl{{Hl{}{{Hj{}}}}}}`{lc{}}0{lAj}{cc{}}{i{{Ld{eg}}}f{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}{{Kb{}{{Jn{e}}{K`{g}}}}}}{{{Hn{e}}{Hn{g}}j{C`{Kj}}}{{Ld{eg}}}f{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{{{Hn{c}}}{{Ld{cc}}}Hl}{{{Ld{ce}}j}{{A`{Kd}}}Hl{{Hl{}{{Hj{}}}}}}`{{}l}<1``{{{Hn{e}}{Hn{g}}j}{{Ld{eg}}}f{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{{{Ld{ce}}j}{{A`{Kf}}}Hl{{Hl{}{{Hj{}}}}}}`{{{Ld{eg}}{Hn{i}}}{{Ld{ig}}}f{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{{{Ld{eg}}{Hn{i}}}{{Ld{ei}}}f{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{{{Ld{ce}}}{{Hn{g}}}Hl{{Hl{}{{Hj{}}}}}{}}`0`{ce{}{}}{c{{En{e}}}{}{}}0{cF`{}}{{{Hn{c}}{Hn{e}}j}{{Ld{ce}}}Hl{{Hl{}{{Hj{}}}}}}`{{{Lf{ce}}ChBbjl}AjHl{{Hl{}{{Hj{}}}}}}44{{{Lf{ce}}}jHl{{Hl{}{{Hj{}}}}}}`{lc{}}0{lAj}{cc{}}>8{{{Hn{c}}{Hn{e}}j}{{Lf{ce}}}Hl{{Hl{}{{Hj{}}}}}}{{{Lf{ce}}}{{Hn{g}}}Hl{{Hl{}{{Hj{}}}}}{}}`0`9981`{{{Lh{c}}ChBbjl}AjHl};;{{{Lh{c}}j}AjHl}{{{Lh{c}}}jHl}7765{{{Lh{c}}j}{{A`{Kd}}}Hl}`{{}l}?1``2{{{Hn{{Jl{c}}}}{Hn{{Jl{c}}}}{Hn{{Lj{In}}}}}{{Lh{c}}}Hl}{{{Lh{c}}j}{{A`{Kf}}}Hl}`{{{Lh{c}}}{{Hn{e}}}Hl{}}`0`{c{{En{e}}}{}{}}0{cF`{}}``{{{Ll{c}}ChBbjl}AjKb}{{{Ln{c}}ChBbjl}AjKb}{ce{}{}}000{{{Ll{c}}}jKb}{{{Ln{c}}}jKb}{lc{}}000{lAj}0``{cc{}}0==55{{{Hn{c}}{Hn{M`}}{Hn{M`}}}{{Ll{c}}}Kb}{{{Hn{c}}{Hn{M`}}}{{Ln{c}}}Kb}``{{{Ll{c}}}{{Hn{e}}}Kb{}}{{{Ln{c}}}{{Hn{e}}}Kb{}}`10====<<```{{{Hl{}{{Hj{c}}}}ChBbjljCj}Ajf}0{{{Hl{}{{Hj{c}}}}ChBbjCjjCj}Ajf}0{{{Hl{}{{Hj{c}}}}ChBbjCjjl}Ajf}0{{{Hl{}{{Hj{c}}}}ChBbjljl}Ajf}{{{Hl{}{{Hj{c}}}}}{{Hn{c}}}f}{{{Hl{}{{Hj{c}}}}jl}Abf}??{{{Hl{}{{Hj{c}}}}j}Ajf}0=={{{Hl{}{{Hj{c}}}}j}lf}={{{Hl{}{{Hj{c}}}}jCj}Abf}0{{IjDl}Dn}0>{{}l}{ce{}{}}{{{Hl{}{{Hj{c}}}}}Dhf}0{{{Hl{}{{Hj{c}}}}}jf}{{{Hl{}{{Hj{c}}}}}{{A`{j}}}f}0001{{{Hl{}{{Hj{c}}}}}Clf}0`{cAb{}}{{{Hl{}{{Hj{c}}}}}lf}0{c{{En{e}}}{}{}}0{cF`{}}``{{{M`{c}}ChBbjljl}AjHl}0{{{M`{c}}}{{Hn{e}}}Hl{}}{{{M`{c}}jl}AbHl}`;;{lc{}}0{{{M`{c}}j}lHl}{lAj}{{{M`{c}}j}AjHl}{{{M`{c}}Dl}DnHl}{cc{}}{{}l}{ce{}{}}{{{M`{c}}}jHl}{{{M`{c}}}{{A`{j}}}Hl}1`{{{Hn{c}}j}{{M`{c}}}Hl}{{{M`{c}}jChCj}AjHl}{{{M`{c}}jCj}AjHl}9{{{M`{c}}je}AjHl{{Ej{}{{Eh{l}}}}}}{{{M`{c}}je}AjHl{{Mb{Ch}{{Cb{{A`{Aj}}}}}}}}{{{M`{c}}jCh}AjHl}`{cAb{}}`{c{{En{e}}}{}{}}0{cF`{}}{{Hnj}{{M`{c}}}I`}``{{{Md{c}}ChBbjljl}Ajf}{{{Md{c}}}{{Hn{c}}}f}`{{{Md{c}}jl}Abf}????``{{djlj}Dh}{{Bljlj}Dh}{lc{}}000{c{{En{Mf}}}G`}{{{Md{c}}j}lf}{lAj}0{{{Md{c}}{Md{c}}}Dhf}{{ce}Dh{}{}}00{{{Md{c}}Dl}Dnf}{{MfDl}Dn}{cc{}}0{{{Hn{c}}Bn}{{Cd{{Md{c}}}}}f}{{}l}0{ce{}{}}0``{{{Md{c}}}jf}{{{Md{c}}}{{A`{j}}}f}``1{{{Hn{c}}j{A`{j}}Dh}{{Md{c}}}f}{{{Md{c}}Bn}Ajf}{cAb{}}{c{{En{e}}}{}{}}000{cF`{}}0{{{Hn{c}}j}{{Md{c}}}f}`{{{Hn{Hd}}Bn}{{Cd{Mh}}}}`{{{Hn{Hd}}j}Mh}1`{{{Mj{c}}ChBbjljCj}AjHl}{{{Mj{c}}ChBbjCjjCj}AjHl}{{{Mj{c}}ChBbjCjjl}AjHl}{{{Mj{c}}ChBbjljl}AjHl}{{{Mj{c}}}{{Hn{e}}}Hl{}}{{{Mj{c}}jl}AbHl}{ce{}{}}0{{{Mj{c}}j}AjHl}{lc{}}0{{{Mj{c}}j}lHl}{lAj}{{{Mj{c}}jCj}AbHl}{{{Mj{c}}Dl}DnHl}{cc{}}{{}l}`8{{{Mj{c}}}DhHl}{{{Mj{c}}}jHl}{{{Mj{c}}}{{A`{j}}}Hl}01{{{Hn{c}}j}{{Mj{c}}}Hl}{{{Mj{c}}}ClHl}`{cAb{}}{{{Mj{c}}}lHl}{c{{En{e}}}{}{}}0{cF`{}}{{{Hn{c}}j}{{Mj{e}}}{}I`}`{{{Ml{eg}}ChBbjljCj}Aj{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}0{{{Ml{eg}}ChBbjljl}Aj{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{{{Ml{eg}}}{{Hn{c}}}{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{{{Ml{eg}}jl}Ab{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}`{ce{}{}}0{{{Ml{eg}}j}Aj{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{lc{}}0{{{Ml{eg}}j}l{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{lAj}{{{Ml{ce}}Dl}DnHl{{Hl{}{{Hj{}}}}}}{cc{}}{{}l}7`{{{Ml{eg}}}j{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{{{Ml{eg}}}{{A`{j}}}{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}1{{{Hn{e}}{Hn{g}}}{{Ml{eg}}}{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{{{Ml{eg}}jj}l{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}`{{{Ml{eg}}jl}j{fAl}{{Hl{}{{Hj{c}}}}}{{Hl{}{{Hj{c}}}}}}{cAb{}}{c{{En{e}}}{}{}}0{cF`{}}{{{Hn{c}}j}{{Ml{eg}}}{fAl}{{Hl{}{{Hj{c}}}}I`}{{Hl{}{{Hj{c}}}}I`}}`{{{Hn{c}}j}I`{}}```{{{Gl{}{{Gj{c}}}}ChBbjCjjc}Aj{GnH`}}`{{{Gl{}{{Gj{c}}}}je}{{Dd{c}}}{GnH`}Df}{cDh{}}{{{Gl{}{{Gj{c}}}}ce}{{Dd{Aj}}}{GnH`}Dj}{{{Gl{}{{Gj{c}}}}j}c{GnH`}}`{{{Gl{}{{Gj{c}}}}}l{GnH`}}{{{Gl{}{{Gj{c}}}}cBbjljl}Aj{GnH`}}````{{MnEbBbBb}Aj}{{MnEbBbjEb}Aj}{{MnEbBbjl}Aj}{ce{}{}}0{{Mnj}Aj}{lc{}}0{{Mnj}l}{lAj}{{Mnh}{{Cd{{n{jEb}}}}}}0{{Mn{A`{j}}N`}{{Cd{{n{jEb}}}}}}{{Mn{A`{j}}Nb}{{Cd{{n{jEb}}}}}}{{Mnh}{{Cd{{Nd{Ab{n{jEb}}}}}}}}{{Mn{Ed{Nf}}}{{n{jEb}}}}{cc{}}{{}l};`=<<<{ClMn}{MnCl}{c{{En{e}}}{}{}}0{cF`{}}`````````````````{h{{Nj{hN`{Nh{h}}}}}}0{h{{Nj{hNb{Nh{h}}}}}}1{ce{}{}}00000{g{{`{{Mb{h}{{Cb{{Nj{hce}}}}}}}}}{}{{Nl{h}}}{{Nn{hce}}}}`{NbNb}{N`N`}{NfNf}{{ce}Aj{}{}}00{h{{`{{Gh{{O`{{Nh{h}}}}}{{Cb{Ob}}}}}}}}{lc{}}00000{h{{Nj{hc{Nh{h}}}}}{OdOf}}{lAj}00{{NbDl}Dn}{{N`Dl}Dn}{{NfDl}Dn}{{imo}{{`{{Mb{c}{{Cb{{Nj{ckg}}}}}}}}}Oh{}{}{{Nn{ceg}}}{}{{Nn{ckg}}}{{Mb{kk}{{Cb{k}}}}}}{cc{}}00{{}l}00???`{h{{Nj{h{An{{n{N`Ab}}}}{Nh{h}}}}}}{h{{Nj{hAb{Nh{h}}}}}}1{h{{Nj{hh{Nh{h}}}}}}{h{{Cd{N`}}}}{h{{Cd{{An{{n{N`Ab}}}}}}}}{h{{Nj{hj{Nh{h}}}}}}{g{{`{{Mb{h}{{Cb{{Nj{hce}}}}}}}}}{}{{Nl{h}}}{{Nn{hce}}}}{{Nfj}Db}{ce{}{}}00{c{{En{e}}}{}{}}00000{cF`{}}00","c":[],"p":[[10,"AdemAlgebraT",134],[5,"AdemAlgebra",134],[10,"Algebra",262],[1,"str"],[1,"i32"],[1,"usize"],[1,"tuple"],[6,"Option",1888],[5,"String",1889],[10,"PolynomialAlgebra",647],[5,"PolynomialAlgebraTableEntry",647],[5,"OnceVec",1890],[1,"unit"],[10,"Bialgebra",304],[5,"Vec",1891],[10,"GeneratedAlgebra",262],[1,"u32"],[10,"UnstableAlgebra",262],[10,"MuAlgebra",262],[5,"TruncatedPolynomialMonomialBasis",307],[10,"MilnorAlgebraT",390],[5,"MilnorAlgebra",390],[6,"Value",1892],[5,"BiVec",1893],[17,"Output"],[8,"Result",1894],[10,"Fn",1895],[6,"SliceMut",1896],[6,"Slice",1896],[5,"ValidPrime",1897],[10,"SteenrodAlgebraT",724],[6,"SteenrodAlgebraBorrow",724],[5,"AdemBasisElement",134],[8,"Result",1898],[10,"Read",1899],[1,"bool"],[10,"Write",1899],[5,"Formatter",1900],[8,"Result",1900],[6,"PorBockstein",134],[6,"FpVector",1896],[1,"slice"],[10,"Hasher",1901],[17,"Item"],[10,"Iterator",1902],[1,"isize"],[6,"Result",1903],[5,"TypeId",1904],[5,"PartitionIterator",307],[5,"Field",359],[5,"MilnorBasisElement",390],[8,"PPartEntry",390],[5,"MilnorProfile",390],[5,"Matrix2D",390],[5,"PPartAllocation",390],[10,"Deserializer",1905],[8,"PPart",390],[5,"PPartMultiplier",390],[10,"Serializer",1906],[10,"FnOnce",1895],[17,"Element"],[10,"PairAlgebra",610],[10,"Send",1907],[10,"Sync",1907],[5,"PolynomialAlgebraMonomial",647],[6,"SteenrodAlgebra",724],[6,"AlgebraType",724],[5,"AlgebraSpec",724],[17,"Algebra"],[10,"Module",1558],[5,"Arc",1908],[10,"ZeroModule",1760],[5,"BlockStructure",1003],[5,"GeneratorBasisEltPair",1003],[5,"Range",1909],[5,"FiniteDimensionalModule",1040],[5,"ModuleFailedRelationError",1558],[5,"FinitelyPresentedModule",1091],[8,"FreeModule",1145],[5,"MuFreeModule",1145],[5,"OperationGeneratorPair",1145],[5,"OnceBiVec",1890],[1,"array"],[5,"GeneratorData",1145],[5,"OffsetIterator",1145],[5,"HomModule",1261],[17,"Source"],[17,"Target"],[10,"ModuleHomomorphism",1289],[5,"Subspace",1910],[5,"QuasiInverse",1911],[5,"MatrixSliceMut",1912],[5,"Matrix",1912],[10,"IdentityHomomorphism",1289],[10,"ZeroHomomorphism",1289],[5,"MuFreeModuleHomomorphism",1369],[1,"f32"],[5,"FullModuleHomomorphism",1433],[5,"GenericZeroHomomorphism",1470],[5,"HomPullback",1491],[8,"FreeModuleHomomorphism",1369],[5,"QuotientHomomorphism",1519],[5,"QuotientHomomorphismSource",1519],[5,"QuotientModule",1603],[10,"FnMut",1895],[5,"RealProjectiveSpace",1638],[5,"RPSpec",1638],[8,"SteenrodModule",1690],[5,"SuspensionModule",1695],[5,"TensorModule",1729],[5,"SteenrodEvaluator",1776],[6,"AlgebraNode",1807],[6,"AlgebraBasisElt",1807],[5,"BTreeMap",1913],[6,"BocksteinOrSq",1807],[5,"VerboseError",1914],[8,"IResult",1915],[10,"ParseError",1914],[10,"Parser",1915],[6,"Err",1915],[5,"Error",1894],[10,"FromStr",1916],[10,"Copy",1907],[10,"Clone",1917],[8,"MilnorHashMap",390],[5,"MilnorPairElement",610],[8,"HashMap",610],[8,"UnstableFreeModule",1145],[5,"FPMIndexTable",1091],[8,"UnstableFreeModuleHomomorphism",1369],[8,"IResult",1807],[8,"ModuleNode",1807]],"b":[[192,"impl-Display-for-AdemBasisElement"],[193,"impl-Debug-for-AdemBasisElement"],[486,"impl-Debug-for-MilnorBasisElement"],[487,"impl-Display-for-MilnorBasisElement"],[488,"impl-Display-for-Matrix2D"],[489,"impl-Debug-for-Matrix2D"],[675,"impl-Display-for-PolynomialAlgebraMonomial"],[676,"impl-Debug-for-PolynomialAlgebraMonomial"],[783,"impl-Debug-for-AlgebraType"],[784,"impl-Display-for-AlgebraType"],[841,"impl-TryInto%3C%26AdemAlgebra%3E-for-%26SteenrodAlgebra"],[842,"impl-TryInto%3C%26MilnorAlgebra%3E-for-%26SteenrodAlgebra"],[1381,"impl-ModuleHomomorphism-for-MuFreeModuleHomomorphism%3CU,+M%3E"],[1382,"impl-MuFreeModuleHomomorphism%3CU,+M%3E"],[1580,"impl-Debug-for-ModuleFailedRelationError"],[1581,"impl-Display-for-ModuleFailedRelationError"]]}],\
["algebra_dim",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["bivec",{"doc":"","t":"FNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNN","n":["BiVec","borrow","borrow_mut","clone","clone_into","data","default","deserialize","eq","extend","extend_negative","extend_with","fmt","from","from_vec","get","get_max","index","index_mut","into","into_iter","into_iter","into_iter","into_iter_enum","into_vec","is_empty","iter","iter_enum","iter_mut","iter_mut_enum","last","len","max_degree","min_degree","min_degree","new","push","range","reserve","serialize","split_borrow_mut","to_owned","try_from","try_into","type_id","with_capacity"],"q":[[0,"bivec"],[46,"core::clone"],[47,"core::result"],[48,"serde::de"],[49,"serde::de"],[50,"core::iter::traits::collect"],[51,"core::ops::function"],[52,"core::fmt"],[53,"core::fmt"],[54,"core::option"],[55,"core::iter::traits::double_ended"],[56,"core::slice::iter"],[57,"core::slice::iter"],[58,"serde::ser"],[59,"serde::ser"]],"d":["A BiVec is like a Vec, except we allow indices to be …","","","","","","","","","","If <code>min_degree &lt; self.min_degree</code>, set <code>self.min_degree</code> to …","Extends the bivec such that <code>max_degree()</code> is at least <code>max</code>. …","","Returns the argument unchanged.","","","Get the <code>idx</code>th element if it exists; the last element …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","This returns the “length” of the bivector, defined to …","This returns the largest degree in the bivector. This is …","","","","","","","","Mutably borrows i and j. Panic if i != j.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{{{b{c}}}{{b{c}}}d}{{ce}f{}{}}`{{}{{b{c}}}{}}{c{{h{{b{e}}}}}jl}{{{b{c}}{b{c}}}nA`}{{{b{c}}e}f{}{{Ad{}{{Ab{c}}}}}}{{{b{c}}Afc}fd}{{{b{c}}Afe}f{}{{Aj{Af}{{Ah{c}}}}}}{{{b{c}}Al}AnB`}{cc{}}{{Af{Bb{c}}}{{b{c}}}{}}{{{b{c}}Af}{{Bd{c}}}{}}{{{b{c}}Af}c{}}00={{{b{c}}}e{}{}}00{{{b{c}}}{{`{{Bh{}{{Ab{{Bf{Afc}}}}}}}}}{}}{{{b{c}}}{{Bb{c}}}{}}{{{b{c}}}n{}}{{{b{c}}}{{Bj{c}}}{}}3{{{b{c}}}{{Bl{c}}}{}}4{{{b{c}}}{{Bd{c}}}{}}{{{b{c}}}Af{}}00`{Af{{b{c}}}{}}{{{b{c}}c}f{}}{{{b{c}}}{{Bn{Af}}}{}}{{{b{c}}C`}f{}}{{{b{c}}e}hCbCd}{{{b{c}}AfAf}{{Bf{cc}}}{}}{ce{}{}}{c{{h{e}}}{}{}}0{cCf{}}{{AfAf}{{b{c}}}{}}","c":[],"p":[[5,"BiVec",0],[10,"Clone",46],[1,"unit"],[6,"Result",47],[10,"Deserializer",48],[10,"Deserialize",48],[1,"bool"],[10,"PartialEq",49],[17,"Item"],[10,"IntoIterator",50],[1,"i32"],[17,"Output"],[10,"FnMut",51],[5,"Formatter",52],[8,"Result",52],[10,"Debug",52],[5,"Vec",53],[6,"Option",54],[1,"tuple"],[10,"DoubleEndedIterator",55],[5,"Iter",56],[5,"IterMut",56],[5,"Range",57],[1,"usize"],[10,"Serialize",58],[10,"Serializer",58],[5,"TypeId",59]],"b":[[20,"impl-IntoIterator-for-%26BiVec%3CT%3E"],[21,"impl-IntoIterator-for-%26mut+BiVec%3CT%3E"],[22,"impl-IntoIterator-for-BiVec%3CT%3E"]]}],\
["bruner",{"doc":"This script converts between our basis and Bruner’s …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["chart",{"doc":"","t":"PKPTRTTPTGSPTFFNNNNNNNNNNNNNMNNNNNNNMNNOOOONNMNNOOOOMNNNMNNNNNNNNNNN","n":["Above","Backend","Below","EXT","Error","GRID_WIDTH","HEADER","Left","MARGIN","Orientation","PATTERNS","Right","STYLES","SvgBackend","TikzBackend","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","drop","from","from","from","get_coords","get_coords","header","header","header","init","into","into","into","legend","line","line","line","max_x","max_x","max_y","max_y","new","new","node","node","node","num_nodes","num_nodes","out","out","structline","structline","structline","structline_matrix","text","text","text","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"chart"],[68,"std::io"],[69,"core::result"],[70,"std::io::error"],[71,"core::option"],[72,"alloc::vec"],[73,"core::fmt"],[74,"core::any"]],"d":["","","","If the backend writes to a file, this is the extension …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns r, x, y","Returns r, x, y","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Print the legend for node patterns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[17,0,17,10,10,1,4,17,1,0,0,17,1,0,0,17,1,4,17,1,4,1,4,17,1,4,1,4,10,1,4,10,17,1,4,1,10,1,4,1,4,1,4,1,4,10,1,4,1,4,1,4,10,1,4,10,10,1,4,17,1,4,17,1,4,17,1,4],"f":"```````````````{ce{}{}}00000{{{b{c}}}df}{{{h{c}}}df}{cc{}}00{{{b{c}}jjl}{{A`{nnn}}}f}{{{h{c}}jjl}{{A`{nnn}}}f}{{{Ad{}{{Ab{c}}}}jj}{{Af{dc}}}{}}{{{b{c}}jj}{{Af{de}}}f{}}{{{h{c}}jj}{{Af{de}}}f{}}2888{c{{Ah{d}}}f}{{{Ad{}{{Ab{c}}}}jjjjAj}{{Af{dc}}}{}}{{{b{c}}jjjjAj}{{Af{de}}}f{}}{{{h{c}}jjjjAj}{{Af{de}}}f{}}````{c{{b{c}}}f}{c{{h{c}}}f}{{{Ad{}{{Ab{c}}}}jjl}{{Af{dc}}}{}}{{{b{c}}jjl}{{Af{de}}}f{}}{{{h{c}}jjl}{{Af{de}}}f{}}````{{{Ad{}{{Ab{c}}}}{A`{jjl}}{A`{jjl}}{Al{Aj}}}{{Af{dc}}}{}}{{{b{c}}{A`{jjl}}{A`{jjl}}{Al{Aj}}}{{Af{de}}}f{}}{{{h{c}}{A`{jjl}}{A`{jjl}}{Al{Aj}}}{{Af{de}}}f{}}{{{Ad{}{{Ab{c}}}}{A`{jj}}{A`{jj}}{B`{{B`{An}}}}{Al{Aj}}}{{Af{dc}}}{}}{{{Ad{}{{Ab{c}}}}jjeBb}{{Af{dc}}}{}Bd}{{{b{c}}jjeBb}{{Af{dg}}}fBd{}}{{{h{c}}jjeBb}{{Af{dg}}}fBd{}}{c{{Af{e}}}{}{}}00000{cBf{}}00","c":[],"p":[[5,"SvgBackend",0],[1,"unit"],[10,"Write",68],[5,"TikzBackend",0],[1,"i32"],[1,"usize"],[1,"f32"],[1,"tuple"],[17,"Error"],[10,"Backend",0],[6,"Result",69],[8,"Result",70],[1,"str"],[6,"Option",71],[1,"u32"],[5,"Vec",72],[6,"Orientation",0],[10,"Display",73],[5,"TypeId",74]],"b":[]}],\
["d2_charts",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["define_module",{"doc":"","t":"HHHH","n":["gens_to_json","get_gens","interactive_module_define_fdmodule","interactive_module_define_fpmodule"],"q":[[0,"define_module"],[4,"alloc::string"],[5,"alloc::vec"],[6,"bivec"],[7,"serde_json::value"],[8,"anyhow"],[9,"fp::prime::primes_generic"]],"d":["","","",""],"i":[0,0,0,0],"f":"{{{f{{d{b}}}}}h}{{}{{j{{f{{d{b}}}}}}}}{{hl}{{j{n}}}}0","c":[],"p":[[5,"String",4],[5,"Vec",5],[5,"BiVec",6],[6,"Value",7],[8,"Result",8],[5,"ValidPrime",9],[1,"unit"]],"b":[]}],\
["differentials",{"doc":"This prints all the differentials in the resolution.","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["ext",{"doc":"<code>ext-rs</code> is a collection of libraries for doing homological …","t":"ICOOCCCCCCCORKKKGEFRPFFKPRRFRMNNNNNNNOOCMOONMONNNNNNMONNNNNNCNNNNMNNNNNNNNMOMMONMNNONNMONNNNNNNNNNMOFFNNNNNNNONNONNNNNNNNONNNNNNNNNNNNNNNNNNNONNNNNONNNNNNNNOPPTSGFFFPFFNNONNNNNNNNNNNNNONNNNOOONNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNONONNNNNNNNNNNONONONONNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNNNONSFIFINNONNNNNOOOOOONNNNNNNNNOOONNNNNNNNNNNOOOOOOOOONNOOONOOONONNNOOONONOOONNNNNNNNNOOOFIINNNNNNNNNNNNNNNNNNNNOOONOOONNNOOOOOOOOOOOONNNPPPFFPPPPPFGPPPOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNONNNNNHNHONNONNNNNNNNNNNNNNNNNNNORITFFKFRJRRNNNNMNNNNNNNNOMNNOONNNMNNNONNNNNNNNNNNNNNNNNOMNOONNNNNMNONNNOMNNNNNMNMNOMNOMNOONNNNNNNNNNMNOFFISONNOONNHHHNNONNNNNHNNHNHNHOCOOOOHHHHHOHOONNNNNNNHOOFFNNNNONNNNNNHNNNNNNHNNNNONNNNNNNNOSIOOHHHHHHOHHH","n":["CCC","chain_complex","differentials","modules","nassau","resolution","resolution_homomorphism","save","secondary","utils","yoneda","zero_module","Algebra","AugmentedChainComplex","BoundedChainComplex","ChainComplex","ChainComplexGrading","ChainHomotopy","ChainMap","ChainMap","Cohomological","FiniteAugmentedChainComplex","FiniteChainComplex","FreeChainComplex","Homological","Homomorphism","Module","StemIterator","TargetComplex","algebra","apply_quasi_inverse","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cc","cc","chain_homotopy","chain_map","chain_maps","chain_maps","cocycle_string","compute_through_bidegree","current","deref","deref","deref","deref_mut","deref_mut","deref_mut","differential","differentials","drop","drop","drop","euler_characteristic","filtration_one_product","filtration_one_products","finite_chain_complex","from","from","from","graded_dimension_string","has_computed_bidegree","init","init","init","into","into","into","into_iter","iter_stem","max_s","max_s","min_degree","module","modules","next","next_homological_degree","number_of_gens_in_bidegree","prime","s_shift","save_dir","save_file","target","target_cc","to_sseq","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero_module","zero_module","FiniteAugmentedChainComplex","FiniteChainComplex","algebra","algebra","augment","borrow","borrow","borrow_mut","borrow_mut","cc","ccdz","chain_map","chain_maps","compute_through_bidegree","compute_through_bidegree","deref","deref","deref_mut","deref_mut","differential","differential","differentials","drop","drop","from","from","from","has_computed_bidegree","has_computed_bidegree","init","init","into","into","map","map","max_s","max_s","min_degree","min_degree","module","module","modules","new","next_homological_degree","next_homological_degree","pop","target","target_cc","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","zero_module","zero_module","End","Fix","INFINITY","MAX_NEW_GENS","Magic","MilnorSubalgebra","Resolution","SenderData","Signature","SignatureIterator","SubalgebraIterator","algebra","apply_quasi_inverse","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_map","chain_maps","clone","clone_into","compute_through_bidegree","compute_through_stem","current","current","degree","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","differential","differentials","drop","drop","drop","drop","drop","drop","extend_through_degree","fmt","from","from","from","from","from","from","from_bytes","has_computed_bidegree","has_signature","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","into_iter","iter_signatures","lock","max_degree","min_degree","module","modules","name","name","new","new","new","new","new_with_save","next","next","next_homological_degree","optimal_for","par_bridge","prime","profile","save_dir","save_dir","send","sender","set_name","signature_degree","signature_from_bytes","signature_mask","signature_matrix","signature_to_bytes","step0","step1","step_resolution","step_resolution_with_result","step_resolution_with_subalgebra","subalgebra","target","target","to_bytes","to_owned","to_string","top_degree","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write_differential","write_qi","zero_algebra","zero_module","zero_module","zero_signature","MAX_NEW_GENS","MuResolution","Resolution","SenderData","UnstableResolution","algebra","apply_quasi_inverse","b","borrow","borrow","borrow_mut","borrow_mut","chain_map","chain_maps","chain_maps","chain_maps","complex","complex","complex","compute_through_bidegree","compute_through_bidegree_with_callback","compute_through_stem","compute_through_stem_with_callback","deref","deref","deref_mut","deref_mut","differential","differentials","differentials","differentials","drop","drop","extend_through_degree","from","from","get_kernel","has_computed_bidegree","init","init","into","into","kernels","kernels","kernels","load_quasi_inverse","load_quasi_inverse","load_quasi_inverse","lock","lock","lock","min_degree","module","modules","modules","modules","name","name","name","name","new","new","new_with_save","next_homological_degree","save_dir","save_dir","save_dir","save_dir","send","sender","set_name","should_save","should_save","should_save","step_resolution","target","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","zero_module","zero_module","zero_module","MuResolutionHomomorphism","ResolutionHomomorphism","UnstableResolutionHomomorphism","act","algebra","borrow","borrow_mut","deref","deref_mut","drop","extend","extend_all","extend_profile","extend_step","extend_step_raw","extend_through_stem","from","from_class","from_module_homomorphism","get_map","get_map_ensure_length","init","into","maps","maps","maps","name","name","name","name","new","next_homological_degree","save_dir","save_dir","save_dir","save_dir","shift","shift","shift","source","source","source","target","target","target","try_from","try_into","type_id","AugmentationQi","ChainHomotopy","ChainMap","ChecksumReader","ChecksumWriter","Differential","Kernel","NassauDifferential","NassauQi","ResQi","SaveFile","SaveKind","SecondaryComposite","SecondaryHomotopy","SecondaryIntermediate","adler","adler","algebra","b","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_dir","create_file","delete_file","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","exists","flush","fmt","from","from","from","from","get_save_path","idx","init","init","init","init","into","into","into","into","kind","magic","name","nassau_data","new","new","open_file","open_file","open_files","path","read","read_exact","reader","resolution_data","secondary_data","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate_header","write","write_all","write_header","writer","Algebra","CompositeData","HIT_GENERATOR","SecondaryComposite","SecondaryHomotopy","SecondaryLift","SecondaryResolution","Source","TAU_BIDEGREE","Target","Underlying","act","act","add_composite","add_composite","algebra","algebra","algebra","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf","composite","composite","composite","composite","composites","compute_composites","compute_homotopies","compute_homotopy_step","compute_intermediate","compute_intermediate","compute_intermediates","compute_partial","degree","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","e3_page","extend_all","finalize","from","from","from","from_bytes","get_intermediate","hit_generator","homotopies","homotopies","homotopies","homotopies","homotopy","init","init","init","initialize_homotopies","intermediates","intermediates","intermediates","into","into","into","len","max","max","new","new","new","prime","save_dir","save_dir","shift","shift","shift_t","source","source","source","target","target","target","target","to_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","underlying","underlying","underlying","Config","LogWriter","QueryModuleResolution","STATIC_MODULES_PATH","algebra","borrow","borrow_mut","bytes","chain_maps","clone","clone_into","construct","construct_nassau","construct_standard","deref","deref_mut","differentials","drop","eq","equivalent","equivalent","equivalent","ext_tracing_subscriber","fmt","from","get_unit","init","init_logging","into","load_module_json","lock","logging","max_degree","module","modules","name","parse_module_name","query_module","query_module_only","query_unstable_module","query_unstable_module_only","save_dir","secondary_job","start","target","to_owned","try_from","try_from","try_from","try_from","try_into","type_id","unicode_num","writer","zero_module","LogWriter","Throughput","borrow","borrow","borrow_mut","borrow_mut","bytes","deref","deref","deref_mut","deref_mut","drop","drop","ext_tracing_subscriber","flush","fmt","from","from","init","init","init_logging","into","into","into_throughput","new","start","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write","writer","PENALTY_UNIT","Yoneda","cc","chain_maps","compute_kernel_image","operation_drop","rate_adem_operation","rate_milnor_operation","rate_operation","split_mut_borrow","target_cc","yoneda_representative","yoneda_representative_element","yoneda_representative_with_strategy"],"q":[[0,"ext"],[12,"ext::chain_complex"],[100,"ext::chain_complex::finite_chain_complex"],[157,"ext::nassau"],[303,"ext::resolution"],[389,"ext::resolution_homomorphism"],[437,"ext::save"],[537,"ext::secondary"],[640,"ext::utils"],[695,"ext::utils::logging"],[730,"ext::yoneda"],[744,"alloc::sync"],[745,"algebra::algebra::algebra_trait"],[746,"algebra::module::module_trait"],[747,"algebra::module::homomorphism"],[748,"sseq::coordinates::bidegree"],[749,"sseq::coordinates::generator"],[750,"alloc::string"],[751,"alloc::vec"],[752,"core::option"],[753,"sseq::sseq"],[754,"core::marker"],[755,"fp::prime::primes_generic"],[756,"std::path"],[757,"sseq::sseq"],[758,"core::any"],[759,"algebra::module::zero_module"],[760,"algebra::module::homomorphism"],[761,"core::ops::function"],[762,"algebra::algebra::milnor_algebra"],[763,"core::fmt"],[764,"core::fmt"],[765,"std::io"],[766,"algebra::algebra::milnor_algebra"],[767,"std::path"],[768,"rayon::iter::par_bridge"],[769,"std::sync::mpsc"],[770,"algebra::module::free_module"],[771,"algebra::module::homomorphism::free_module_homomorphism"],[772,"fp::matrix::matrix_inner"],[773,"std::io"],[774,"fp::matrix::matrix_inner"],[775,"fp::vector::vector_generic"],[776,"core::marker"],[777,"algebra::module::homomorphism::free_module_homomorphism"],[778,"std::collections::hash::set"],[779,"std::sync::mutex"],[780,"fp::vector::vector_generic"],[781,"core::marker"],[782,"dashmap"],[783,"core::convert"],[784,"algebra::module::finite_dimensional_module"],[785,"tracing_core::subscriber"],[786,"serde_json::value"],[787,"algebra::algebra::steenrod_algebra"],[788,"algebra::module::steenrod_module"],[789,"algebra::module::quotient_module"],[790,"algebra::algebra::adem_algebra"],[791,"core::ops::function"]],"d":["","","","","This module implements Nassau’s algorithm. The main …","This module exports the <code>Resolution</code> object, which is a …","This module defines <code>MuResolutionHomomorphism</code>, which is a …","","","A module containing various utility functions related to …","","","","An augmented chain complex is a map of chain complexes C …","A bounded chain complex is a chain complex C for which C_s …","A chain complex is defined to start in degree 0. The …","","","<code>chain_maps</code> is required to be non-empty","","","","","","","","","An iterator returned by <code>ChainComplex::iter_stem</code>","","","Apply the quasi-inverse of the (s, t)th differential to …","","","","","","","","","","","","","","Ensure all bidegrees less than or equal to (s, t) have …","","","","","","","","This returns the differential starting from the sth module.","","","","","","Computes the filtration one product.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","If the complex has been computed at bidegree (s, t). This …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Iterate through all defined bidegrees in increasing order …","","","","","","","The first s such that <code>self.module(s)</code> is not defined.","","","","A directory used to save information about the chain …","Get the save file of a bidegree","","","","","","","","","","","","","","","","","","","","","","","","","","This currently crashes if <code>s</code> is greater than the s degree …","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","This should be used when you want an entry of the profile …","","Some magic constants used in the save file","A Milnor subalgebra to be used in Nassau’s algorithm. …","A resolution of <code>S_2</code> using Nassau’s algorithm. This aims …","See <code>resolution::SenderData</code>. This differs by not having the …","","See <code>MilnorSubalgebra::iter_signatures</code>.","An iterator that iterates through a sequence of …","","","","","","","","","","","","","","","","","","","","","This function resolves up till a fixed stem instead of a …","","","","","","","","","","","","","","","","","","","","","","","","This function prepares the Resolution object to perform …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Computes the signature of an element","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iterate through all signatures of this algebra that …","","","","","","","","","","","","","","","","","","","","","","","","","","","Give a list of basis elements in degree <code>degree</code> that has …","Get the matrix of a free module homomorphism when …","","Step resolution for s = 0","Step resolution for s = 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The algebra with trivial profile, corresponding to the …","","","","This is the maximum number of new generators we expect in …","A minimal resolution of a chain complex. The functions …","","In <code>MuResolution::compute_through_stem</code> and …","","","","","","","","","","","","","","","","","","This function resolves up till a fixed stem instead of a …","","","","","","","","","","","","This function prepares the Resolution object to perform …","Returns the argument unchanged.","Returns the argument unchanged.","Gets the kernel of the differential starting at $(s, t)$. …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","For each <em>internal</em> degree, store the kernel of the most …","For each <em>internal</em> degree, store the kernel of the most …","For each <em>internal</em> degree, store the kernel of the most …","Whether we should keep the quasi-inverses of the …","Whether we should keep the quasi-inverses of the …","Whether we should keep the quasi-inverses of the …","","","","","","","","","","","","","","Whether this bidegree was newly calculated or have already …","","","","","","","","The sender object used to send the <code>SenderData</code>. We put this …","","Whether we should save newly computed data to the disk. …","Whether we should save newly computed data to the disk. …","Whether we should save newly computed data to the disk. …","Call our resolution $X$, and the chain complex to resolve …","","","","","","","","","","","","A chain complex homomorphims from a <code>FreeChainComplex</code>. This …","","","Given a chain map $f: C \\\\to C’$ between free chain …","","","","","","","Extend the resolution homomorphism such that it is defined …","Extend the resolution homomorphism as far as possible, as …","Extends the resolution homomorphism up to a given range. …","Extend the <code>MuResolutionHomomorphism</code> to be defined on …","Extend the <code>MuResolutionHomomorphism</code> to be defined on …","Extend the resolution homomorphism such that it is defined …","Returns the argument unchanged.","","Construct a chain map that lifts a given module …","Returns the chain map on the <code>s</code>th source module.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","The quasi-inverse of the augmentation map","A chain homotopy","A chain map","","In addition to checking the checksum, we also keep track …","The differential and augmentation map in a resolution","The kernel of a resolution differential","The differential with Nassau’s algorithm. This does not …","The quasi-inverse data in Nassau’s algorithm","The quasi-inverse of the resolution differential","","","Secondary composite","A secondary homotopy","Intermediate data used by secondary code","","","","","","","","","","","","","","","","Arguments","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This panics if there is no save dir","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Open the file pointed to by <code>path</code> as a <code>Box&lt;dyn Read&gt;</code>. If …","","A DashSet&gt; of files that are currently opened and being …","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the composite can hit generators. This is true for …","A homotopy of a map A -&gt; M of pair modules. We assume this …","","When lifting a thing to its secondary version, often what …","","","","","","","Compute the image of an element in the source under the …","","Add composites up to and including the specified degree","","","","","","","","","","","","","","The component of the map on the R_B portion. gen_deg -&gt; …","gen_deg -&gt; gen_idx -&gt; composite","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","gen_deg -&gt; gen_idx -&gt; homotopy","s -&gt; t -&gt; idx -&gt; homotopy","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","output_t = input_t - shift_t","","","","","","","","","","","","","","","","","","","","","A config object is an object that specifies how a Steenrod …","","The type returned by <code>query_module</code>. The value of this type …","","The basis for the Steenrod algebra","","","","","","","This constructs a resolution resolving a module according …","See <code>construct</code>","See <code>construct</code>","","","","","","","","","","","Returns the argument unchanged.","Given a resolution, return a resolution of the unit, …","","","Calls <code>U::from(self)</code>.","Given the name of a module file (without the <code>.json</code> …","","","","The json specification of the module","","","Given a module specification string, load a json …","Query the user for a module and a bidegree, and return a …","Query the user for a module and its save directory. See …","","","","The value of the SECONDARY_JOB environment variable. This …","","","","","","","","","","Given an <code>n: usize</code>, return a UTF-8 character that best …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the throughput in MiB/s","","","","","","","","","","","","","","","","This function does the following computation:","","","","","","","This function produces a quasi-isomorphic quotient of <code>cc</code> …","",""],"i":[0,0,102,102,0,0,0,0,0,0,0,102,4,0,0,0,0,0,0,16,117,0,0,0,117,4,4,0,16,4,4,117,29,114,117,29,114,40,29,0,16,40,114,18,4,29,117,29,114,117,29,114,4,39,117,29,114,23,18,18,0,117,29,114,18,4,117,29,114,117,29,114,29,4,23,29,4,4,39,29,4,18,4,114,4,4,16,40,18,117,29,114,117,29,114,117,29,114,4,39,0,0,39,40,39,39,40,39,40,40,39,40,40,39,40,39,40,39,40,39,40,39,39,40,39,39,40,39,40,39,40,39,40,39,40,39,40,39,40,39,40,39,39,39,40,39,40,40,39,40,39,40,39,40,39,40,39,118,118,48,0,0,0,0,0,118,0,0,46,46,63,63,57,58,118,46,48,63,57,58,118,46,48,46,46,48,48,46,46,57,58,58,63,57,58,118,46,48,63,57,58,118,46,48,46,46,63,57,58,118,46,48,46,48,63,57,58,118,46,48,48,46,48,63,57,58,118,46,48,63,57,58,118,46,48,57,58,48,46,46,46,46,46,46,46,57,58,46,48,46,57,58,46,48,57,46,48,46,46,63,63,46,58,48,48,48,48,46,46,46,46,46,58,46,46,48,48,48,48,63,57,58,118,46,48,63,57,58,118,46,48,63,57,58,118,46,48,46,46,48,46,46,48,0,0,0,0,0,71,71,73,73,71,73,71,71,119,107,71,119,107,71,71,71,71,71,73,71,73,71,71,119,107,71,73,71,71,73,71,71,71,73,71,73,71,119,107,71,119,107,71,119,107,71,71,71,119,107,71,71,119,107,71,71,73,71,71,71,119,107,71,73,73,71,119,107,71,71,71,73,71,73,71,73,71,71,119,107,71,0,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,120,121,74,74,120,121,74,74,74,74,120,121,74,120,121,74,120,121,74,120,121,74,74,74,74,33,33,33,0,0,33,33,33,33,33,0,0,33,33,33,80,81,34,34,80,81,34,33,80,81,34,33,33,33,33,34,34,80,81,34,33,80,81,34,33,80,80,81,81,34,33,33,33,33,33,34,80,33,80,81,34,33,34,34,80,81,34,33,80,81,34,33,34,33,33,33,80,81,0,34,0,80,81,81,81,33,33,33,80,81,34,33,80,81,34,33,80,81,34,33,34,80,80,34,80,93,0,93,0,0,0,0,93,0,93,93,86,89,86,89,93,86,94,86,89,94,86,89,94,91,93,89,94,86,89,93,93,93,93,94,93,93,86,86,89,94,86,89,94,86,89,94,94,93,86,86,89,94,86,93,89,93,94,89,94,94,86,89,94,93,93,94,94,86,89,94,91,93,94,86,89,94,93,93,94,93,94,89,93,94,89,93,94,86,89,86,86,89,94,86,89,94,86,89,94,93,94,94,0,0,0,0,97,97,97,110,98,97,97,0,0,0,97,97,98,97,97,97,97,97,0,97,97,0,97,0,97,0,98,0,98,97,98,98,0,0,0,0,0,98,0,110,98,97,97,97,97,97,97,97,0,110,98,0,0,110,111,110,111,110,110,111,110,111,110,111,0,110,111,110,111,110,111,0,110,111,110,110,110,111,110,111,110,111,110,111,110,110,0,0,115,115,0,0,0,0,0,0,115,0,0,0],"f":"`````````````````````````````{{{h{}{{b{c}}{d{e}}{f{g}}}}}{{j{c}}}l{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}{{{h{}{{b{c}}{d{e}}{f{g}}}}{Af{i}}Ah{Af{k}}}Ajl{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}{}{}}{ce{}{}}00000```{{{B`{}{{Al{c}}{An{g}}}}Bb}{{j{g}}}{{h{}{{b{e}}}}}{}{{Ad{}{{A`{i}}{Ab{}}}}}{}}``{{BdBfAj}Bh}{{{h{}{{b{c}}{d{e}}{f{g}}}}Ah}Bjl{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}`{Blc{}}00000{{{h{}{{b{c}}{d{e}}{f{g}}}}Bb}{{j{g}}}l{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}`{BlBj}00{{BnC`}Cb}{{BdC`BlAh}{{Cf{{Cd{{Cd{Bb}}}}}}}}{{BdC`Bl}Ch}`{cc{}}00{BdBh}{{{h{}{{b{c}}{d{e}}{f{g}}}}Ah}Ajl{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}{{}Bl}00===={{{h{}{{b{c}}{d{e}}{f{g}}}}}{{Cj{{h{}{{b{c}}{d{e}}{f{g}}}}}}}l{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}{BnBb}`{{{h{}{{b{c}}{d{e}}{f{g}}}}}C`l{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}{{{h{}{{b{c}}{d{e}}{f{g}}}}Bb}{{j{e}}}l{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}`{{{Cj{c}}}{{Cf{e}}}{hCl}{}}{{{h{}{{b{c}}{d{e}}{f{g}}}}}Bbl{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}{{BdAh}Bl}{{{h{}{{b{c}}{d{e}}{f{g}}}}}Cnl{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}`{{{h{}{{b{c}}{d{e}}{f{g}}}}}{{Cf{D`}}}l{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}{{{h{}{{b{c}}{d{e}}{f{g}}}}DbAh}{{Dd{c}}}l{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}{{{B`{}{{Al{c}}{An{g}}}}}{{j{c}}}{{h{}{{b{e}}}}}{}{{Ad{}{{A`{i}}{Ab{}}}}}{}}`{Bd{{Dh{Df}}}}{c{{Dj{e}}}{}{}}00000{cDl{}}00{{{h{}{{b{c}}{d{e}}{f{g}}}}}{{j{e}}}l{{n{}{{b{c}}}}}{{Ad{}{{A`{e}}{Ab{e}}}}}}```{{{Dn{ce}}}{{j{g}}}n{{Ad{}{{A`{c}}{Ab{c}}}}}{}}{{{E`{cegi}}}jn{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}}{{{Dn{ce}}{j{g}}{Cd{{j{i}}}}}{{E`{ceig}}}n{{Ad{}{{A`{c}}{Ab{c}}}}}{{h{}{{b{}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}}{ce{}{}}000`{{{j{c}}}{{Dn{ce}}}{nEb}{{Ad{}{{A`{c}}{Ab{c}}}}{Ed{cc}}}}{{{E`{cegi}}Bb}{{j{k}}}n{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}{}}`{{{Dn{ce}}Ah}Bjn{{Ad{}{{A`{c}}{Ab{c}}}}}}{{{E`{cegi}}Ah}Bjn{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}}{Blc{}}000{{{Dn{ce}}Bb}{{j{g}}}n{{Ad{}{{A`{c}}{Ab{c}}}}}{}}4`{BlBj}0{cc{}}{{{E`{cegi}}}{{Dn{ce}}}n{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}}1{{{Dn{ce}}Ah}Ajn{{Ad{}{{A`{c}}{Ab{c}}}}}}{{{E`{cegi}}Ah}Ajn{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}}{{}Bl}0<<{{{Dn{c{Ef{c}}}}g}{{Dn{e{Ef{e}}}}}n{{n{}{{b{}}}}}{{Ej{c}{{Eh{e}}}}}}{{{E`{c{Ef{c}}{Ef{c}}e}}i}{{E`{g{Ef{g}}{Ef{g}}e}}}n{{h{}{{b{}}}}}{{n{}{{b{}}}}}{{Ej{c}{{Eh{g}}}}}}{{{Dn{ce}}}Bbn{{Ad{}{{A`{c}}{Ab{c}}}}}}{{{E`{cegi}}}Bbn{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}}{{{Dn{ce}}}C`n{{Ad{}{{A`{c}}{Ab{c}}}}}}{{{E`{cegi}}}C`n{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}}<{{{E`{cegi}}Bb}{{j{k}}}n{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}{}}`{{{Cd{{j{c}}}}{Cd{{j{e}}}}}{{Dn{ce}}}{nEb}{{Ad{}{{A`{c}}{Ab{c}}}}{Ed{cc}}}}54{{{Dn{ce}}}Bjn{{Ad{}{{A`{c}}{Ab{c}}}}{Ed{cc}}}}{{{E`{cegi}}}{{j{k}}}n{{Ad{}{{A`{c}}{Ab{c}}}}}{{Ad{}{{A`{c}}{Ab{}}}}}{{h{}{{b{}}}}}{}}`{c{{Dj{e}}}{}{}}000{cDl{}}0{{{Dn{ce}}}{{j{g}}}n{{Ad{}{{A`{c}}{Ab{c}}}}}{}}3````````````{{{El{c}}}{{j{e}}}{{Eb{}{{b{En}}}}}{}}{{{El{c}}{Af{e}}Ah{Af{g}}}Aj{{Eb{}{{b{En}}}}}{}{}}`{ce{}{}}00000000000{{{El{c}}Bb}{{j{e}}}{{Eb{}{{b{En}}}}}{}}`{F`F`}{{ce}Bj{}{}}{{{El{c}}Ah}Bj{{Eb{}{{b{En}}}}}}0```{Blc{}}000000000004`{BlBj}00000{{{El{c}}Bb}Bj{{Eb{}{{b{En}}}}}}{{F`Fb}{{Dj{BjFd}}}}{cc{}}00000{c{{Ff{F`}}}Fh}{{{El{c}}Ah}Aj{{Eb{}{{b{En}}}}}}{{F`{Af{Fj}}{Af{Fj}}}Aj}{{}Bl}00000========{{F`C`}{{`{{Fn{}{{Fl{{Cd{Fj}}}}}}}}}}``{{{El{c}}}C`{{Eb{}{{b{En}}}}}}>`{{{El{c}}}G`{{Eb{}{{b{En}}}}}}`{{}Gb}{{F`C`}Gd}{{{j{c}}}{{El{c}}}{{Eb{}{{b{En}}}}}}{{{Cd{Gf}}}F`}{{{j{c}}{Cf{Gh}}}{{Gj{{El{c}}}}}{{Eb{}{{b{En}}}}}}{Gb{{Cf{c}}}{}}{Gd{{Cf{c}}}{}}{{{El{c}}}Bb{{Eb{}{{b{En}}}}}}{AhF`}{c{{Gl{e}}}{}{}}{{{El{c}}}Cn{{Eb{}{{b{En}}}}}}`{{{El{c}}}{{Cf{D`}}}{{Eb{}{{b{En}}}}}}`{{Ah{H`{Gn}}}Bj}`{{{El{c}}Bh}Bj{{Eb{}{{b{En}}}}}}`{{F`c}{{Ff{{Cd{Fj}}}}}Fh}{{F`En{Hb{En}}C`{Af{Fj}}}{{`{{Fn{}{{Fl{Bl}}}}}}}}{{F`{Hd{{Hb{En}}}}C`{Af{Fj}}}Hf}{{{Af{Fj}}c}{{Ff{Bj}}}Hh}{{{El{c}}C`}Bj{{Eb{}{{b{En}}}}}}{{{El{c}}C`}{{Gj{Bj}}}{{Eb{}{{b{En}}}}}}{{{El{c}}Ah}Bj{{Eb{}{{b{En}}}}}}{{{El{c}}Ah}{{Gj{Bj}}}{{Eb{}{{b{En}}}}}}{{{El{c}}AhF`}{{Gj{Bj}}}{{Eb{}{{b{En}}}}}}`{{{El{c}}}{{j{e}}}{{Eb{}{{b{En}}}}}{}}`{{F`c}{{Ff{Bj}}}Hh}{ce{}{}}{cBh{}}{F`C`}{c{{Dj{e}}}{}{}}00000000000{cDl{}}00000{{{El{c}}AhBlBl}{{Gj{Bj}}}{{Eb{}{{b{En}}}}}}{{{Cf{c}}Hj{Af{Fj}}{Af{Bl}}HfHl}{{Ff{Bj}}}Hh}{{}F`}9`{F`{{Cd{Fj}}}}`````{{{Hn{c}}}{{j{e}}}h{}}{{{Hn{c}}{Af{e}}Ah{Af{g}}}Ajh{}{}}`::::{{{Hn{c}}Bb}{{j{e}}}h{}}``````{{{Hn{c}}Ah}Bjh}{{{Hn{c}}Ahe}Bjh{{Ej{Ah}}}}10{Blc{}}0003```{BlBj}0{{{Hn{c}}Bb}Bjh}{cc{}}0{{{Hn{c}}Ah}I`h}{{{Hn{c}}Ah}Ajh}{{}Bl}0{ce{}{}}0`````````{{{Hn{c}}}C`h};```{{{Hn{c}}}G`h}```{{{j{c}}}{{Hn{c}}}h}`{{{j{c}}{Cf{Gh}}}{{Gj{{Hn{c}}}}}h}{{{Hn{c}}}Bbh}{{{Hn{c}}}{{Cf{D`}}}h}```{{AhAj{H`{Ib}}}Bj}`{{{Hn{c}}Bh}Bjh}```{{{Hn{c}}Ah}Bjh}{{{Hn{c}}}{{j{e}}}h{}}{c{{Dj{e}}}{}{}}000{cDl{}}02``````{{{Id{ce}}IfBbBf}BjBd{{Bd{}{{b{}}}}}}{{{Id{ce}}}jBd{{h{}{{b{}}}}}}>>{Blc{}}0{BlBj}{{{Id{ce}}Ah}BjBd{{h{}{{b{}}}}}}{{{Id{ce}}}BjBd{{h{}{{b{}}}}}}{{{Id{ce}}{Ih{g}}}BjBd{{h{}{{b{}}}}}Ij}{{{Id{ce}}Ah{Cf{Hf}}}{{Il{C`}}}Bd{{B`{}{{b{}}}}}}{{{Id{ce}}Ah{Cf{{Cd{Hj}}}}}{{Il{C`}}}Bd{{h{}{{b{}}}}}}4{cc{}}{{Bh{j{c}}{j{e}}Ah{Af{Bb}}}{{Id{ce}}}Bd{{B`{}{{b{}}}}}}{{Bh{j{c}}{j{e}}g}{{Id{ce}}}{B`Bd}{{B`{}{{b{}}}}}{{Ad{}{{A`{}}{Ab{}}}}}}{{{Id{ce}}Bb}{{j{In}}}Bd{{h{}{{b{}}}}}}{{{Id{ce}}Bb}InBd{{h{}{{b{}}}}}}{{}Bl}{ce{}{}}```{{{Id{ce}}}G`Bd{{h{}{{b{}}}}}}```{{Bh{j{c}}{j{e}}Ah}{{Id{ce}}}Bd{{h{}{{b{}}}}}}{{{Id{ce}}}C`Bd{{h{}{{b{}}}}}}{{{Id{ce}}}{{Cf{D`}}}Bd{{h{}{{b{}}}}}}````````````{c{{Dj{e}}}{}{}}0{cDl{}}```````````````````66666666{DbDb}{{ce}Bj{}{}}{{DbD`}{{Gj{Bj}}}}{{{Dd{c}}GhAj}{{`{Hh}}}l}{{{Dd{c}}Gh}{{Ff{Bj}}}l}{Blc{}}0000000{BlBj}{{{J`{c}}}BjHh}1{{{Jb{c}}}BjFh}22{{DbDb}Aj}{{ce}Aj{}{}}00{{{Dd{c}}Gh}Ajl}{{{J`{c}}}{{Ff{Bj}}}Hh}{{DbFb}Jd}{cc{}}000{{{Dd{c}}Gh}Ghl}`{{}Bl}000{ce{}{}}000`{DbBb}{DbG`}{{}{{`{{Fn{}{{Fl{Db}}}}}}}}{{Ghc}{{J`{c}}}Hh}{c{{Jb{c}}}Fh}{Gh{{Cf{{Jf{Fh}}}}}}{{{Dd{c}}Gh}{{Cf{{Jf{Fh}}}}}l}{{}{{Jj{{Jh{Gh}}}}}}`{{{Jb{c}}{Af{Gf}}}{{Ff{Bl}}}Fh}{{{Jb{c}}{Af{Gf}}}{{Ff{Bj}}}Fh}`77:{c{{Dj{e}}}{}{}}0000000{cDl{}}000{{{Dd{c}}e}{{Ff{Bj}}}lFh}{{{J`{c}}{Af{Gf}}}{{Ff{Bl}}}Hh}{{{J`{c}}{Af{Gf}}}{{Ff{Bj}}}Hh}{{{Dd{c}}e}{{Ff{Bj}}}lHh}````````````{{{Jl{c}}IfBbC`Jn}BjK`}{{{Kb{c}}IfBbC`JnAj}Bj{K`KdIj}}{{{Jl{c}}BbC`Bl{Hd{{Hb{c}}}}{Hd{{Hb{c}}}}}BjK`}{{{Kb{c}}BbC`{Kf{c}}{Cf{D`}}}Bj{K`KdIj}}{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}{{j{c}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Jl{c}}}{{j{c}}}K`}{{{Kl{c}}}{{j{e}}}Bd{}}{ce{}{}}00000`{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}Bb}{{Kf{c}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kb{c}}C`Bl}{{Jl{c}}}{K`KdIj}}{{{Kl{c}}Bb}KfBd}``{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}BjK`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}0{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}Ah}{{Il{C`}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}Bf}HjK`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kl{c}}Bf}HjBd}3{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}Bb}BjK`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}`{Blc{}}00000{BlBj}00{{{Kl{c}}}{{Dh{Df}}}Bd}7{{{Jl{c}}}BjK`}{cc{}}00{{{j{{Hb{c}}}}C`Aje}{{Ff{{Jl{c}}}}}K`Fh}8`{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}{{Kn{{Kb{c}}}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kl{c}}}{{Kn{Kb}}}Bd}``{{{Kl{c}}Bb}KbBd}{{}Bl}00>{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}{{L`{BfHj}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kl{c}}}{{L`{BfHj}}}Bd}`{ce{}{}}00`{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}{{Ih{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kl{c}}}{{Ih{{Kl{c}}}}}Bd}{{{j{{Hb{c}}}}C`Aj}{{Jl{c}}}K`}{{{j{{Hb{c}}}}{j{{Hb{c}}}}C`Aj}{{Kb{c}}}{K`KdIj}}{{{j{c}}}{{Kl{c}}}Bd}{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}CnK`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}{{Cf{D`}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kl{c}}}{{Cf{D`}}}Bd}{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}AhK`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kl{c}}}AhBd}`{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}{{j{e}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kl{c}}}{{j{e}}}Bd{}}`{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}{{j{g}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}1``{{{Jl{c}}e}{{Ff{Bj}}}K`Hh}{c{{Dj{e}}}{}{}}00000{cDl{}}00{{{Kj{}{{b{c}}{A`{e}}{Ab{g}}{Kh{i}}}}}{{j{i}}}K`{{Bd{}{{b{c}}}}}{{Bd{}{{b{c}}}}}{}}{{{Kl{c}}}{{j{c}}}Bd}``````{ce{}{}}0``{LbLb}{{ce}Bj{}{}}{{e{Cf{Gh}}}{{Gj{Ld}}}{}{{Lh{Lb}{{Lf{c}}}}}}{{e{Cf{Gh}}}{{Gj{{El{{Lj{En}}}}}}}{}{{Lh{Lb}{{Lf{c}}}}}}{{e{Cf{Gh}}}{{Gj{{Hn{Ll}}}}}{}{{Lh{Lb}{{Lf{c}}}}}}{Blc{}}0`{BlBj}{{LbLb}Aj}{{ce}Aj{}{}}00{{}{{`{Ln}}}}{{LbFb}Jd}{cc{}}{{{j{Ld}}}{{Gj{{M`{Aj{j{Ld}}}}}}}}{{}Bl}{{}Bj}?{G`{{Gj{Mb}}}}``````0{{{Cf{Md}}Aj}{{Gj{Ld}}}}{{G`{Cf{Md}}Aj}{{Gj{Ld}}}}{Aj{{Gj{{Mf{Ll}}}}}}{{}{{Gj{Mh}}}}`{{}{{Cf{Bb}}}}``{ce{}{}}{{{M`{Mbc}}}{{Dj{Lbe}}}{{Lh{Md}}}{}}{c{{Dj{e}}}{}{}}{{{M`{G`e}}}{{Dj{Lbg}}}{}{{Lh{Md}{{Lf{c}}}}}{}}{G`{{Dj{Lbc}}}{}}2{cDl{}}{BlMj}````6666`{Blc{}}000{BlBj}0{{}{{`{Ln}}}}{{{Ml{c}}}{{Ff{Bj}}}Hh}{{MnFb}Jd}{cc{}}0{{}Bl}0{{}Bj}>>{{{Ml{c}}}MnHh}{c{{Ml{c}}}{}}`{cBh{}}????<<{{{Ml{c}}{Af{Gf}}}{{Ff{Bl}}}Hh}`````{{{N`{c}}{Cf{e}}{Cf{g}}{Cf{I`}}C`}{{M`{HfHf}}}nAdAd}{{NbC`Bl}C`}0{{EnC`Bl}C`}{{{j{c}}C`Bl}C`l}{{{Af{c}}BlBl}{{M`{cc}}}{}}`{{{j{c}}{Nd{{Hd{e}}}}}{{Nf{c}}}{Bd{B`{}{{An{Hd}}}}}{{n{}{{b{}}}}}}{{{j{c}}Ah{Af{Bb}}}{{Nf{c}}}{Bd{B`{}{{An{Hd}}}}}}{{{j{c}}{Nd{{Hd{e}}}}g}{{Nf{c}}}{Bd{B`{}{{An{Hd}}}}}{{n{}{{b{}}}}}{{Nh{I`C`Bl}{{Eh{C`}}}}}}","c":[],"p":[[17,"Algebra"],[17,"Module"],[17,"Homomorphism"],[10,"ChainComplex",12],[5,"Arc",744],[10,"Algebra",745],[10,"Module",746],[17,"Source"],[17,"Target"],[10,"ModuleHomomorphism",747],[1,"slice"],[5,"Bidegree",748],[1,"bool"],[17,"TargetComplex"],[17,"ChainMap"],[10,"AugmentedChainComplex",12],[1,"u32"],[10,"FreeChainComplex",12],[5,"BidegreeGenerator",749],[5,"String",750],[1,"unit"],[1,"usize"],[10,"BoundedChainComplex",12],[1,"i32"],[1,"isize"],[5,"Vec",751],[6,"Option",752],[5,"Product",753],[5,"StemIterator",12],[10,"Sized",754],[5,"ValidPrime",755],[5,"Path",756],[6,"SaveKind",437],[5,"SaveFile",437],[5,"Adams",753],[5,"Sseq",753],[6,"Result",757],[5,"TypeId",758],[5,"FiniteChainComplex",100],[5,"FiniteAugmentedChainComplex",100],[10,"ZeroModule",759],[10,"ZeroHomomorphism",747],[5,"FullModuleHomomorphism",760],[17,"Output"],[10,"FnMut",761],[5,"Resolution",157],[5,"MilnorAlgebra",762],[5,"MilnorSubalgebra",157],[5,"Formatter",763],[5,"Error",763],[8,"Result",764],[10,"Read",765],[8,"PPartEntry",762],[17,"Item"],[10,"Iterator",766],[1,"str"],[5,"SubalgebraIterator",157],[5,"SignatureIterator",157],[1,"u8"],[5,"PathBuf",756],[8,"Result",767],[5,"IterBridge",768],[5,"SenderData",157],[5,"Sender",769],[8,"FreeModule",770],[8,"FreeModuleHomomorphism",771],[5,"Matrix",772],[10,"Write",765],[6,"FpVector",773],[5,"AugmentedMatrix",772],[5,"MuResolution",303],[5,"Subspace",774],[5,"SenderData",303],[5,"MuResolutionHomomorphism",389],[6,"SliceMut",773],[5,"BidegreeRange",775],[10,"Sync",754],[5,"Range",776],[5,"MuFreeModuleHomomorphism",771],[5,"ChecksumWriter",437],[5,"ChecksumReader",437],[8,"Result",763],[5,"Box",777],[5,"HashSet",778],[5,"Mutex",779],[5,"SecondaryComposite",537],[6,"Slice",773],[10,"PairAlgebra",780],[5,"SecondaryHomotopy",537],[10,"Send",754],[8,"CompositeData",537],[17,"Underlying"],[10,"SecondaryLift",537],[5,"SecondaryResolution",537],[5,"OnceBiVec",781],[5,"DashMap",782],[5,"Config",640],[8,"QueryModuleResolution",640],[17,"Error"],[10,"TryInto",783],[5,"FiniteDimensionalModule",784],[8,"CCC",0],[10,"Subscriber",785],[1,"tuple"],[6,"Value",786],[6,"AlgebraType",787],[8,"UnstableResolution",303],[8,"SteenrodModule",788],[1,"char"],[5,"LogWriter",695],[5,"Throughput",695],[5,"QuotientModule",789],[5,"AdemAlgebra",790],[5,"ChainMap",12],[8,"Yoneda",730],[10,"Fn",761],[6,"ChainComplexGrading",12],[6,"Magic",157],[8,"Resolution",303],[8,"ResolutionHomomorphism",389],[8,"UnstableResolutionHomomorphism",389]],"b":[[686,"impl-TryFrom%3C(Value,+T)%3E-for-Config"],[688,"impl-TryFrom%3C(%26str,+T)%3E-for-Config"],[689,"impl-TryFrom%3C%26str%3E-for-Config"]]}],\
["ext_m_n",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["filtration_one",{"doc":"This computes all available filtration one products for a …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["fp",{"doc":"","t":"SSSSSQCCCCCCSSJSSSISSSSSSQFHOHHNNNNNNNHNNNNHOHHHHHHNHNNNHFFFFFFFCOOOOOOOOOCOCOOOOCOOCCOOFNNNNNNNNNNNNNNNNNONNONNNNNNFNNNNOONNNNNNNNNNNONNNNONNNFFFNNNNNNNNNNNNNNNNNOONNONNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNOONFNNNNNNNNNNNNONNNNNNONNNNNNNNNFNNNNNNNNNNNONNNNNONNNNNNNONNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNEPPKGSMNNCNNNNQNNNNHNNNQQQNNHCHHHNNHCNMNNNNNKNMMMMMHQNMMFFNNNNNNNNNNONNNNNNNNNNNNNNNONNNNNNNOFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSHCIHHHCCCCCCFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNOOONNNNNNOOONNNNNNNNNNNNNNNNOONNNNNNNNNNNNNFFOONNNNOOOONNNNONNOONNONNNNNNNOOOONNNNNONNNNNNNPPPPGGGGPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQQNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["MAX_MULTINOMIAL_LEN","NUM_PRIMES","ODD_PRIMES","PRIMES","PRIME_TO_INDEX_MAP","const_for","constants","limb","matrix","prime","simd","vector","BINOMIAL4_TABLE","BINOMIAL4_TABLE_SIZE","BINOMIAL_TABLE","BITS_PER_LIMB","BYTES_PER_LIMB","INVERSE_TABLE","Limb","MAX_MULTINOMIAL_LEN","MAX_PRIME","NOT_A_PRIME","NUM_PRIMES","PRIMES","PRIME_TO_INDEX_MAP","populate_binomial_table","LimbBitIndexPair","add","bit_index","bit_length","bitmask","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","entries_per_limb","fmt","from","init","into","is_reduced","limb","limb_bit_index_pair","number","pack","range","reduce","sign_rule","to_owned","truncate","try_from","try_into","type_id","unpack","AffineSubspace","AugmentedMatrix","Matrix","MatrixSliceMut","QuasiInverse","Subquotient","Subspace","affine","col_end","col_start","columns","dimension","end","gens","image","inner","linear_part","m4ri","matrix","matrix_inner","offset","p","pivots","preimage","quasi_inverse","quotient","start","subquotient","subspace","vectors","vectors","AffineSubspace","borrow","borrow_mut","clone","clone_into","contains","contains_space","deref","deref_mut","drop","eq","fmt","fmt","from","from","init","into","linear_part","linear_part","new","offset","offset","sum","to_owned","to_string","try_from","try_into","type_id","M4riTable","add","borrow","borrow_mut","clear","columns","data","default","deref","deref_mut","drop","fmt","from","generate","init","into","is_empty","len","min_limb","new","reduce","reduce_naive","rows","rows","try_from","try_into","type_id","AugmentedMatrix","Matrix","MatrixSliceMut","add_assign","add_identity","add_masked","apply","as_slice_mut","assign","augmented_from_vec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","col_end","col_start","columns","columns","columns","compute_image","compute_image","compute_kernel","compute_kernel","compute_quasi_inverse","compute_quasi_inverse","compute_quasi_inverses","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop_first","end","eq","extend_column_dimension","extend_column_dimension","extend_image","extend_to_surjection","find_first_row_in_block","find_pivots_permutation","fmt","fmt","from","from","from","from_bytes","from_rows","from_vec","identity","index","index_mut","init","init","init","initialize_pivots","inner","into","into","into","into_iter","into_iter","into_iter","into_matrix","into_tail_segment","is_zero","iter","iter","iter_mut","iter_mut","maybe_par_iter_mut","maybe_par_iter_mut","mul","mul_assign","new","new","new_with_capacity","new_with_capacity","p","pivots","pivots","pivots_mut","prime","read_pivot","row","row","row_mut","row_mut","row_op","row_op_naive","row_reduce","row_segment","row_segment_mut","row_slice","rows","rows","safe_row_op","segment","set_to_zero","slice_mut","split_borrow","start","to_bytes","to_owned","to_owned","to_string","to_vec","trim","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vectors","vectors","write_pivot","QuasiInverse","apply","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from_bytes","image","image_dimension","init","into","new","pivots","preimage","preimage","prime","source_dimension","stream_quasi_inverse","target_dimension","to_bytes","to_owned","try_from","try_into","type_id","Subquotient","add_gen","ambient_dimension","borrow","borrow_mut","clear_gens","clone","clone_into","complement_pivots","deref","deref_mut","dimension","dimension","drop","fmt","from","from_parts","gens","gens","init","into","is_empty","new","new_full","prime","quotient","quotient","quotient_dimension","quotient_pivots","reduce","reduce_by_quotient","reduce_matrix","set_to_full","subspace_dimension","subspace_gens","to_owned","to_string","try_from","try_into","type_id","zeros","Subspace","add_basis_elements","add_vector","add_vectors","ambient_dimension","basis","borrow","borrow_mut","clone","clone_into","contains","contains_space","deref","deref","deref_mut","dimension","drop","entire_space","eq","fmt","fmt","from","from_bytes","from_matrix","init","into","is_empty","iter","matrix","new","reduce","set_to_entire","set_to_zero","sum","to_bytes","to_owned","to_string","try_from","try_into","type_id","update_then_row_reduce","Binomial","InvalidPrime","NotAnInteger","Prime","PrimeError","TWO","as_i32","as_u32","as_usize","binomial","borrow","borrow_mut","clone","clone_into","def_prime_static","deref","deref_mut","drop","eq","factor_pk","fmt","fmt","from","impl_op_pn_u32","impl_prime_ops","impl_try_from","init","into","inverse","iter","log2","logp","minus_one_to_the_n","pow","pow_mod","power_mod","primes_generic","product","to_dyn","to_owned","to_string","try_from","try_into","type_id","Binomial","binomial","binomial2","binomial4","binomial4_rec","binomial_odd","binomial_odd_is_zero","direct_binomial","impl_binomial","multinomial","multinomial2","multinomial_odd","BinomialIterator","BitflagIterator","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","flag","from","from","init","init","into","into","into_iter","into_iter","new","new","new_fixed_length","next","next","par_bridge","par_bridge","remaining","set_bit_iterator","try_from","try_from","try_into","try_into","type_id","type_id","value","P2","P3","P5","P7","ValidPrime","add","add","add","add","add","add","add","add","add","add","as_i32","as_i32","as_i32","as_i32","as_i32","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","hash","hash","hash","hash","hash","init","init","init","init","init","into","into","into","into","into","is_prime","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","new","new_unchecked","p","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","serialize","serialize","serialize","serialize","serialize","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_dyn","to_dyn","to_dyn","to_dyn","to_dyn","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","LIMBS_PER_SIMD","add_simd","x86_64","SimdLimb","load","store","xor","impl_fpvectorp","impl_slicemutp","impl_slicep","inner","iter","vector_generic","FpVectorP","SliceMutP","SliceP","add","add","add_basis_element","add_basis_element","add_carry","add_carry_limb","add_masked","add_nosimd","add_offset","add_offset_nosimd","add_shift_left","add_shift_none","add_shift_right","add_tensor","add_truncate","add_unmasked","as_slice","as_slice","as_slice_mut","assign","assign","assign_partial","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copy","copy_from_slice","density","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","end","end","entry","entry","eq","extend_len","first_nonzero","fmt","fmt","fmt","from","from","from","from","from","from","from_raw_parts","hash","init","init","init","into","into","into","is_empty","is_empty","is_zero","is_zero","iter","iter","iter_nonzero","iter_nonzero","len","len","len","limb_masks","limb_range","limb_range_inner","limbs","limbs","limbs","limbs","limbs_mut","max_limb_mask","min_limb_mask","new","new_with_capacity","offset","p","p","p","prime","prime","prime","reduce_limbs","scale","scale","set_entry","set_entry","set_scratch_vector_size","set_to_zero","set_to_zero","sign_rule","slice","slice","slice_mut","slice_mut","start","start","to_owned","to_owned","to_owned","trim_start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","FpVectorIterator","FpVectorNonZeroIteratorP","bit_length","bit_mask","borrow","borrow","borrow_mut","borrow_mut","counter","cur_limb","cur_limb","cur_limb_entries_left","deref","deref","deref_mut","deref_mut","dim","drop","drop","entries_left","entries_per_limb_m_1","from","from","idx","init","init","into","into","into_iter","into_iter","len","limb_index","limb_index","limbs","limbs","multiunzip","new","new","next","next","p","skip_n","try_from","try_from","try_into","try_into","type_id","type_id","Big","Big","Big","Big","FpVector","FpVectorNonZeroIterator","Slice","SliceMut","_2","_2","_2","_2","_3","_3","_3","_3","_5","_5","_5","_5","_7","_7","_7","_7","add","add","add_assign","add_basis_element","add_basis_element","add_carry","add_masked","add_nosimd","add_offset","add_offset_nosimd","add_tensor","add_truncate","add_unmasked","as_slice","as_slice","as_slice_mut","assign","assign","assign_partial","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copy","copy_from_slice","density","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","dispatch_vector","dispatch_vector_inner","drop","drop","drop","drop","entry","entry","eq","extend_len","first_nonzero","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_slice","hash","impl_try_into","init","init","init","init","into","into","into","into","into_iter","into_iter","is_empty","is_empty","is_zero","is_zero","iter","iter","iter_nonzero","iter_nonzero","len","len","limbs","limbs_mut","multiunzip","new","new_with_capacity","next","next","num_limbs","padded_len","prime","prime","prime","scale","scale","serialize","set_entry","set_entry","set_scratch_vector_size","set_to_zero","set_to_zero","sign_rule","slice","slice","slice_mut","slice_mut","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","trim_start","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_bytes"],"q":[[0,"fp"],[12,"fp::constants"],[26,"fp::limb"],[57,"fp::matrix"],[88,"fp::matrix::affine"],[116,"fp::matrix::m4ri"],[143,"fp::matrix::matrix_inner"],[274,"fp::matrix::quasi_inverse"],[304,"fp::matrix::subquotient"],[345,"fp::matrix::subspace"],[386,"fp::prime"],[430,"fp::prime::binomial"],[442,"fp::prime::iter"],[479,"fp::prime::primes_generic"],[689,"fp::simd"],[692,"fp::simd::x86_64"],[696,"fp::vector"],[702,"fp::vector::inner"],[831,"fp::vector::iter"],[879,"fp::vector::vector_generic"],[1045,"core::fmt"],[1046,"core::fmt"],[1047,"core::ops::range"],[1048,"core::option"],[1049,"core::result"],[1050,"core::any"],[1051,"alloc::string"],[1052,"alloc::vec"],[1053,"std::io::error"],[1054,"std::io"],[1055,"core::slice::iter"],[1056,"core::slice::iter"],[1057,"std::io"],[1058,"core::ops::function"],[1059,"serde::de"],[1060,"core::hash"],[1061,"core::cmp"],[1062,"serde::ser"],[1063,"core::core_arch::x86"],[1064,"core::clone"],[1065,"core::cmp"],[1066,"core::hash"]],"d":["","The number of primes that will be prepared at …","","An array containing the first <code>NUM_PRIMES</code> prime numbers.","For any integer <code>i</code> less than or equal to <code>MAX_PRIME</code>, …","","","","","","","","","","","The number of bits each <code>Limb</code> occupies.","The number of bytes each <code>Limb</code> occupies.","","","","The <code>NUM_PRIMES</code>th prime number.","A sentinel value. <code>PRIME_TO_INDEX_MAP[i] == NOT_A_PRIME</code> if …","The number of primes that will be prepared at …","An array containing the first <code>NUM_PRIMES</code> prime numbers.","For any integer <code>i</code> less than or equal to <code>MAX_PRIME</code>, …","","A struct containing the information required to access a …","Return the <code>Limb</code> whose <code>i</code>th entry is …","","Return the number of bits an element of $\\\\mathbb{F}_P$ …","If <code>l</code> is a limb of elements of $\\\\mathbb{F}_p$, then …","","","","","","","","The number of elements of $\\\\mathbb{F}_p$ that fit in a …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Check whether or not a limb is reduced, i.e. whether every …","","","Return the number of limbs required to hold <code>dim</code> entries.","Given an interator of <code>u32</code>’s, pack all of them into a …","Return the <code>Range&lt;usize&gt;</code> starting at the index of the limb …","Return the <code>Limb</code> whose entries are the entries of <code>limb</code> …","","","Return either <code>Some(sum)</code> if no carries happen in the limb, …","","","","Give an iterator over the entries of <code>limb</code>. We return <code>u64</code> …","","This models an augmented matrix.","A matrix! In particular, a matrix with values in F_p. The …","","Given a matrix M, a quasi-inverse Q is a map from the …","","A subspace of a vector space.","","","","","","","","","","","","","","","","The pivot columns of the matrix. <code>pivots[n]</code> is <code>k</code> if column <code>n</code>…","","","","","","","","","","","","","","","","","","","","Example","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","M4RI works as follows — first row reduce k rows using …","Add a row to the table.","","","Clear the contents of the table","The list of pivot columns of the rows","The 2^k linear combinations of the k rows, apart from the …","","","","","","Returns the argument unchanged.","Generates the table from the known data <code>num</code> is the number …","","Calls <code>U::from(self)</code>.","Whether the table has no rows","Number of rows in the M4riTable","The smallest non-zero limb in this table. We use this when …","Create a table with space for <code>k</code> vectors, each with <code>cols</code> …","","","Get the list of pivot rows","The indices of new rows in the table","","","","This models an augmented matrix.","A matrix! In particular, a matrix with values in F_p. The …","","","","For each row, add the <code>v[i]</code>th entry of <code>other</code> to <code>self</code>.","Applies a matrix to a vector.","","","Produces a padded augmented matrix from an <code>&amp;[Vec&lt;u32&gt;]</code> …","","","","","","","","","","","","","","Gets the number of columns in the matrix.","","Computes the quasi-inverse of a matrix given a rref of […","","Computes the kernel from an augmented matrix in rref. To …","","Computes the quasi-inverse of a matrix given a rref of […","","This function computes quasi-inverses for matrices A, B …","","","","","","","","","","","","","","","","","Given a matrix in rref, say [A|B|C], where B lies between …","Given a matrix M in rref, add rows to make the matrix …","Given a row reduced matrix, find the first row whose pivot …","This is very similar to row_reduce, except we only need to …","Example","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Produces a Matrix from an <code>&amp;[Vec&lt;u32&gt;]</code> object. If the …","","Returns the ith row of the matrix","Returns the ith row of the matrix","","","","Set the pivots to -1 in every entry. This is called by …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Produces a new matrix over F_p with the specified number …","","","","","","The pivot columns of the matrix. <code>pivots[n]</code> is <code>k</code> if column <code>n</code>…","","","Read a vector of <code>isize</code> of length <code>dim</code>.","","","","","Performs a row operation using <code>pivot_column</code> as the pivot …","A version of <code>Matrix::row_op</code> without the zero assumption.","Perform row reduction to reduce it to reduced row echelon …","","","","","Gets the number of rows in the matrix.","A no-nonsense, safe, row operation. Adds <code>c * self[source]</code> …","","","","Mutably borrows <code>x[i]</code> and <code>x[j]</code>.","","","","","","","","","","","","","","","","","","","Read a vector of <code>isize</code>","Given a matrix M, a quasi-inverse Q is a map from the …","Apply the quasi-inverse to an input vector and add a …","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","Given a data file containing a quasi-inverse, apply it to …","","","","","","","","","","","","","","","The pivot columns of the complement to the subspace","","","","","","","Returns the argument unchanged.","Given a chain of subspaces <code>subspace</code> &lt; <code>space</code> &lt; k^…","","","","Calls <code>U::from(self)</code>.","","Create a new subquotient of an ambient space of dimension …","Create a new subquotient of an ambient space of dimension …","","","","","","Given a vector <code>elt</code>, project <code>elt</code> to the complement and …","Project the vector onto the complement of the quotient …","","Set the subquotient to be the full ambient space …","The dimension of the subspace part of the subquotient.","The generators of the subspace part of the subquotient.","","","","","","","A subspace of a vector space.","","This adds a vector to the subspace. This function assumes …","This adds some rows to the subspace","","Returns a basis of the subspace.","","","","","","","","","","","","","","Example","","Returns the argument unchanged.","","Create a new subspace from a matrix. The matrix does not …","","Calls <code>U::from(self)</code>.","Whether the subspace is empty. This assumes the subspace …","","","","Projects a vector to a complement of the subspace. The …","Sets the subspace to be the entire subspace.","Sets the subspace to be the zero subspace.","","","","","","","","Run a closure on the matrix and then ensure it is …","","","","A trait that represents a prime number. There are …","","","","","","","","","","","","","","","","Factor $n$ as $p^k m$. Returns $(k, m)$.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","Compute the base 2 log of a number, rounded down to the …","Discrete log base p of n.","","","","Compute b^e mod p. This is a const version of …","","Computes the product mod p. This takes care of overflow.","","","","","","","A number satisfying the Binomial trait supports computing …","Binomial coefficient n choose k.","mod 2 binomial coefficient n choose k","Binomial coefficients mod 4. We pre-compute the …","Compute binomial coefficients mod 4 using the recursion …","Compute odd binomial coefficients mod p, where p is odd. …","Checks whether n choose k is zero mod p. Since we don’t …","This uses a lookup table for n choose k when n and k are …","","Multinomial coefficient of the list l","mod 2 multinomial coefficient","Computes the multinomial coefficient mod p using Lucas’ …","Iterates through all numbers with the same number of bits. …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This module is provides wrappers around the contents of …","An <code>FpVectorP</code> is a vector over $\\\\mathbb{F}_p$ for a fixed …","A <code>SliceMutP</code> is a mutable slice of an <code>FpVectorP</code>. This …","A SliceP is a slice of an FpVectorP. This immutably …","","","","","","","Given a mask v, add the <code>v[i]</code>th entry of <code>other</code> to the <code>i</code>th …","","Add <code>other</code> to <code>self</code> on the assumption that the first <code>offset</code> …","Add <code>other</code> to <code>self</code> on the assumption that the first <code>offset</code> …","","Adds <code>c</code> * <code>other</code> to <code>self</code>. <code>other</code> must have the same length, …","","<code>coeff</code> need not be reduced mod p. Adds v otimes w to self.","","Given a mask v, add the <code>i</code>th entry of <code>other</code> to the <code>v[i]</code>th …","","","","","TODO: improve efficiency","A version of <code>FpVectorP::assign</code> that allows <code>other</code> to be …","","","","","","","","","","","Generates a version of itself with a shorter lifetime","This replaces the contents of the vector with the contents …","","","","","","","","","","","","","","","","This function ensures the length of the vector is at least …","Find the index and value of the first non-zero entry of …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","TODO: implement prime 2 version","","","","","","","","This function underflows if <code>self.end == 0</code>, which happens …","","","","","","","","","","","","","","","","","","","","","","This clears the vector and sets the length to <code>len</code>. This is …","","","","","","","","","","","","Converts a slice to an owned FpVectorP. This is vastly …","Permanently remove the first <code>n</code> elements in the vector. <code>n</code> …","","","","","","","","","","","Iterator over non-zero entries of an FpVector. This is …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Example","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,5,5,5,5,5,5,5,0,5,5,5,5,0,5,0,0,0,0,0,0,5,0,5,5,5,0,0,0,0,0,0,0,0,0,24,24,22,39,29,39,30,29,16,0,18,0,16,22,22,30,0,39,29,0,0,24,22,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,22,24,24,22,22,22,22,24,22,29,24,22,29,22,29,22,29,24,24,24,22,22,22,29,22,29,22,29,29,24,22,29,29,24,22,29,29,24,22,29,29,29,22,22,29,22,22,22,22,22,22,24,22,29,22,22,22,22,22,22,24,22,29,22,29,24,22,29,22,22,22,29,29,22,24,22,24,22,24,22,22,22,22,29,22,29,22,22,22,22,22,22,24,22,24,22,22,22,22,29,29,24,24,22,22,29,22,22,22,29,22,22,29,22,22,22,24,22,29,24,22,29,24,22,29,24,22,22,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,44,44,0,0,0,3,3,3,0,44,44,44,44,0,44,44,44,44,0,44,44,44,0,0,0,44,44,0,0,0,0,0,3,3,0,0,3,3,44,44,44,44,44,0,45,45,45,45,45,45,0,0,45,45,45,0,0,46,47,46,47,46,47,46,47,46,47,46,46,47,46,47,46,47,46,47,46,47,46,46,47,46,47,46,46,46,47,46,47,46,47,47,0,0,0,0,0,49,49,50,50,51,51,52,52,26,26,49,50,51,52,26,49,50,51,52,26,49,50,51,52,26,49,50,51,52,26,49,50,51,52,26,49,50,51,52,26,49,50,51,52,26,49,50,51,52,26,49,49,50,50,51,51,52,52,26,26,49,50,51,52,26,49,49,50,50,51,51,52,52,26,26,49,49,50,50,51,51,52,52,26,26,49,50,51,52,26,26,49,50,51,52,26,49,50,51,52,26,49,50,51,52,26,0,49,49,50,50,51,51,52,52,26,26,26,26,26,49,50,51,52,26,49,49,50,50,51,51,52,52,26,26,49,50,51,52,26,49,49,50,50,51,51,52,52,26,26,49,49,50,50,51,51,52,52,26,26,49,49,50,50,51,51,52,52,26,26,49,50,51,52,26,49,50,51,52,26,49,50,51,52,26,49,49,50,50,51,51,52,52,26,26,49,50,51,52,26,49,50,51,52,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,60,59,60,59,59,60,59,59,59,60,60,60,60,59,60,59,60,59,59,60,59,59,61,60,59,61,60,59,61,59,61,60,59,59,59,61,60,59,61,60,59,61,60,61,60,59,61,59,59,59,59,61,60,59,59,61,61,60,60,59,59,59,61,60,59,61,60,59,61,59,61,59,61,59,61,59,61,59,61,61,61,59,59,61,60,59,61,61,59,59,61,59,61,60,59,61,60,60,59,60,59,60,59,59,60,59,59,61,59,60,61,60,59,61,61,59,59,61,60,59,61,60,59,61,60,0,0,68,68,68,69,68,69,68,68,69,69,68,69,68,69,69,68,69,68,68,68,69,69,68,69,68,69,68,69,68,68,69,68,69,69,68,69,68,69,69,68,68,69,68,69,68,69,70,19,17,25,0,0,0,0,70,19,17,25,70,19,17,25,70,19,17,25,70,19,17,25,19,25,19,19,25,19,25,19,19,19,25,19,25,19,25,19,19,25,19,70,19,17,25,70,19,17,25,19,17,19,17,25,19,19,70,19,17,25,70,19,17,25,19,0,0,70,19,17,25,19,17,19,19,19,19,19,17,17,25,70,19,17,17,17,17,25,25,25,19,19,19,0,70,19,17,25,70,19,17,25,70,19,19,17,19,17,19,17,19,17,19,17,19,19,70,19,19,70,70,19,19,19,17,25,19,25,19,19,25,19,19,25,19,19,17,19,25,19,19,17,17,19,17,19,70,19,17,25,70,19,19,19,19,19,19,17,25,70,19,17,25,19],"f":"```````````````````````````{{cbbd}bf}`{chf}{cbf}{ce{}{}}0{jj}{{ce}l{}{}}{hc{}}0{hl}6{{jn}A`}{cc{}}{{}h}7{{cb}Abf}`{{ch}jf}{{ch}hf}{{ce}bf{{Af{}{{Ad{d}}}}}}{{chh}{{Ah{h}}}f}{{cb}bf}{{bb}d}>{{cb}{{Aj{b}}}f}{c{{Al{e}}}{}{}}0{cAn{}}{{cb}{{`{{Af{}{{Ad{b}}}}}}}f}````````````````````````````````{ce{}{}}0{B`B`}{{ce}l{}{}}{{B`Bb}Ab}{{B`B`}Ab}{hc{}}0{hl}2{{B`n}A`}0{BdB`}{cc{}}{{}h}:{B`Bd}`{{BfBd}B`}{B`Bf}`{{B`B`}B`}>{cBh{}}{c{{Al{e}}}{}{}}0{cAn{}}`{{Bjhh}l}{ce{}{}}0{Bjl}``{{}Bj}{hc{}}0{hl}{{Bjn}A`}?{{BjBl}l}?6{BjAb}{Bjh}`{{hh}Bj}{{Bj{Bn{b}}}l}{{BjBlh}l}{Bj{{Bn{h}}}}`??>```{{BlBl}l}{C`l}{{C`Bl{Bn{h}}}l}{{BlCbdBb}l}{BlC`}4{{Cd{Bn{{Cf{d}}}}}{{Ch{hBl}}}}{ce{}{}}00000{BlBl}{CjCj}{{ce}l{}{}}0``{C`h}{Blh}`{{Blhh}Bd}{CjBd}{{Blh}Bd}1{{Blhh}Cl}{CjCl}{Cj{{Ch{ClCl}}}}{hc{}}0{CjBl}11101{hl}00<`{{BlBl}Ab}{{Blh}l}{{Cjh}l}{{BlhhBdh}{{Cf{h}}}}{{Blhhh}{{Cf{h}}}}{{Blh}h}{{Blc}{{Cf{h}}}{{Af{}{{Ad{h}}}}}}{{Bln}A`}0{cc{}}00{{Cdhhc}{{Cn{Bl}}}D`}{{Cd{Cf{Bf}}}Bl}{{Cd{Bn{{Cf{d}}}}}Bl}{{Cdh}Bl}{{Blc}e{}{}}0{{}h}00{Bll}`{ce{}{}}00{Blc{}}00{CjBl}{{Cjhhh}Bl}{BlAb}{C`{{`{{Af{}{{Ad{Bb}}}}}}}}{Bl{{Db{Bf}}}}{C`{{`{{Af{}{{Ad{Cb}}}}}}}}{Bl{{Dd{Bf}}}}{C`{{`{{Df{}{{Ad{Cb}}}}}}}}{Bl{{`{{Df{}{{Ad{Bf}}}}}}}}{{BlBl}Bl}{{Bld}l}{{Cdhh}Bl}{{Cdh{Dh{h}}}Cj}{{Cdhhhh}Bl}{{Cdh{Bn{h}}hh}Cj}`{Bl{{Bn{Dj}}}}`0{BlCd}{{hc}{{Cn{{Cf{Dj}}}}}D`}{{C`h}Bb}{{Blh}Bb}{{C`h}Cb}{{Blh}Cb}{{BlhhhCd}l}0{Blh}{{Cjhhh}Bb}{{Cjhhh}Cb}{{C`hh}C`}{C`h}4{{Blhhd}l}{{Cjhh}C`}{Bll}{{Blhhhh}C`}{{Blhh}{{Ch{BfBf}}}}`{{Blc}{{Cn{l}}}Dl}{ce{}{}}0{cBh{}}{Bl{{Cf{{Cf{d}}}}}}{{Blhhh}l}{c{{Al{e}}}{}{}}00000{cAn{}}00``{{{Bn{Dj}}c}{{Cn{l}}}Dl}`{{ClCbdBb}l}77{ClCl}{{ce}l{}{}}{hc{}}0{hl}{{ClCl}Ab}{{Cln}A`}{cc{}}{{Cdc}{{Cn{Cl}}}D`}`{Clh}{{}h}{ce{}{}}{{{Aj{{Cf{Dj}}}}Bl}Cl}{Cl{{Aj{{Bn{Dj}}}}}}{ClBl}`{ClCd}6{{Cdc{Bn{e}}{Bn{g}}}{{Cn{l}}}D`{}{}}7{{Clc}{{Cn{l}}}Dl}6{c{{Al{e}}}{}{}}0{cAn{}}`{{DnBb}l}{Dnh}::{Dnl}{DnDn}{{ce}l{}{}}{Dn{{`{{Af{}{{Ad{h}}}}}}}}{hc{}}05`{hl}{{Dnn}A`}{cc{}}{{BdBd}Dn}{Dn{{`{{Af{}{{Ad{Bb}}}}}}}}`{{}h}{ce{}{}}{DnAb}{{Cdh}Dn}0{DnCd}{{DnBb}l}`{Dnh}{Dn{{Bn{Dj}}}}{{DnCb}{{Cf{d}}}}{{DnCb}l}{{BlDnDn}{{Cf{{Cf{d}}}}}}{Dnl}5<:{cBh{}}{c{{Al{e}}}{}{}}0{cAn{}}{DnBd}`{{Bdc}l{{Af{}{{Ad{h}}}}}}{{BdBb}h}{{Bdc}l{{Eb{Cb}{{E`{{Aj{l}}}}}}}}{Bdh}{Bd{{Bn{Bf}}}}{ce{}{}}0{BdBd}{{ce}l{}{}}{{BdBb}Ab}{{BdBd}Ab}{Bdc{}}{hc{}}08{hl}{{Cdh}Bd}4{{Bdn}A`}0{cc{}}{{Cdc}{{Cn{Bd}}}D`}{BlBd}{{}h}={BdAb}{Bd{{`{{Af{}{{Ad{Bb}}}}}}}}`7{{BdCb}l}{Bdl}0{{BdBd}Bd}{{Bdc}{{Cn{l}}}Dl}{ce{}{}}{cBh{}}{c{{Al{e}}}{}{}}0{cAn{}}{{Bde}c{}{{Ed{Bl}{{E`{c}}}}}}``````{fEf}{fd}{fh}`77{EhEh}{{ce}l{}{}}`{hc{}}0{hl}{{EhEh}Ab}{{cd}{{Ch{dd}}}f}{{Ehn}A`}0{cc{}}```{{}h}{ce{}{}}{{cd}df}`{hh}1{{cEf}df}{{fd}d}{{fdd}d}{{ddd}d}`1{fCd}7{cBh{}}{c{{Al{e}}}{}{}}0{cAn{}}`{{CdEjEj}Ej}{{EjEj}Ej}001{{CdEjEj}Ab}{{Cdhh}d}`{{Cd{Bn{Ej}}}Ej}{{{Bn{Ej}}}Ej}1``{ce{}{}}000{hc{}}000{hl}0`{cc{}}0{{}h}04444{bEl}{hEn}{{bh}El}{El{{Aj{c}}}{}}{En{{Aj{c}}}{}}{c{{F`{e}}}{}{}}0`{b{{`{{Af{}{{Ad{h}}}}}}}}{c{{Al{e}}}{}{}}000{cAn{}}0``````{{FbFb}c{}}{{Fbd}c{}}{{Fdd}c{}}{{FdFd}c{}}{{Ffd}c{}}{{FfFf}c{}}{{Fhd}c{}}{{FhFh}c{}}{{Cdd}c{}}{{CdCd}c{}}{FbEf}{FdEf}{FfEf}{FhEf}{CdEf}{ce{}{}}000000000{FbFb}{FdFd}{FfFf}{FhFh}{CdCd}{{ce}l{}{}}0000{hc{}}000000000{c{{Al{Fb}}}Fj}{c{{Al{Fd}}}Fj}{c{{Al{Ff}}}Fj}{c{{Al{Fh}}}Fj}{c{{Al{Cd}}}Fj}{{FbFb}c{}}{{Fbd}c{}}{{Fdd}c{}}{{FdFd}c{}}{{Ffd}c{}}{{FfFf}c{}}{{FhFh}c{}}{{Fhd}c{}}{{CdCd}c{}}{{Cdd}c{}}{hl}0000{{Fbd}Ab}{{FbFb}Ab}{{Fdd}Ab}{{FdFd}Ab}{{Ffd}Ab}{{FfFf}Ab}{{Fhd}Ab}{{FhFh}Ab}{{Cdd}Ab}{{CdCd}Ab}{{Fbn}A`}0{{Fdn}A`}0{{Ffn}A`}0{{Fhn}A`}0{{Cdn}A`}0{cc{}}0000{Fl{{Al{Cdc}}}{}}{{Fbc}lFn}{{Fdc}lFn}{{Ffc}lFn}{{Fhc}lFn}{{Cdc}lFn}{{}h}0000{ce{}{}}0000{dAb}{{Fbd}c{}}{{FbFb}c{}}{{Fdd}c{}}{{FdFd}c{}}{{Ffd}c{}}{{FfFf}c{}}{{Fhd}c{}}{{FhFh}c{}}{{Cdd}c{}}{{CdCd}c{}}{dCd}0`{{Fbd}{{Aj{G`}}}}{{Fdd}{{Aj{G`}}}}{{Ffd}{{Aj{G`}}}}{{Fhd}{{Aj{G`}}}}{{Cdd}{{Aj{G`}}}}?>=<;:9867{{Fbc}AlGb}{{Fdc}AlGb}{{Ffc}AlGb}{{Fhc}AlGb}{{Cdc}AlGb}{{FbFb}c{}}{{Fbd}c{}}{{FdFd}c{}}{{Fdd}c{}}{{Ffd}c{}}{{FfFf}c{}}{{FhFh}c{}}{{Fhd}c{}}{{Cdd}c{}}{{CdCd}c{}}89674523108976453201{FbCd}{FdCd}{FfCd}{FhCd}{CdCd}{ce{}{}}0000{cBh{}}0000{d{{Al{FbEh}}}}{c{{Al{e}}}{}{}}{d{{Al{FdEh}}}}1{d{{Al{FfEh}}}}2{d{{Al{FhEh}}}}3{d{{Al{CdEh}}}}444444{cAn{}}0000`{{{Bn{b}}{Bn{b}}h}l}``{bGd}{{bGd}l}{{GdGd}Gd}`````````{{{Gf{c}}{Gf{c}}d}lf}{{{Gh{c}}{Gj{c}}d}lf}{{{Gf{c}}hd}lf}{{{Gh{c}}hd}lf}{{{Gf{c}}{Gf{c}}d{Bn{e}}}Abf{}}{{{Gf{c}}hbd{Bn{e}}}Abf{}}{{{Gh{c}}{Gj{c}}d{Bn{h}}}lf}6{{{Gf{c}}{Gf{c}}dh}lf}0666{{{Gh{c}}hd{Gj{c}}{Gj{c}}}lf}{{{Gf{c}}{Gf{c}}d}{{Aj{l}}}f}3{{{Gf{c}}}{{Gj{c}}}f}{{{Gh{c}}}{{Gj{c}}}f}{{{Gf{c}}}{{Gh{c}}}f}{{{Gf{c}}{Gf{c}}}lf}{{{Gh{c}}{Gj{c}}}lf}1{ce{}{}}00000{{{Gf{c}}}{{Gf{c}}}{Glf}}{{{Gj{c}}}{{Gj{c}}}{Glf}}{{ce}l{}{}}0{{{Gh{c}}}{{Gh{c}}}f}{{{Gf{c}}{Bn{d}}}lf}{{{Gf{c}}}Gnf}{hc{}}00000{hl}00``{{{Gf{c}}h}df}{{{Gj{c}}h}df}{{{Gf{c}}{Gf{c}}}Ab{H`f}}{{{Gf{c}}h}lf}{{{Gf{c}}}{{Aj{{Ch{hd}}}}}f}{{{Gf{c}}n}A`{Hbf}}{{{Gj{c}}n}A`{Hbf}}{{{Gh{c}}n}A`{Hbf}}{{{Ch{ce}}}{{Gf{c}}}f{{Hd{{Bn{d}}}}}}{cc{}}0{{{Gf{c}}}{{Gj{c}}}f}{{{Gf{c}}}{{Gh{c}}}f}2{{ch{Cf{b}}}{{Gf{c}}}f}{{{Gf{c}}e}l{Hff}Fn}{{}h}00{ce{}{}}00{{{Gf{c}}}Abf}{{{Gj{c}}}Abf}10{{{Gf{c}}}Hhf}{{{Gj{c}}}Hhf}{{{Gf{c}}}{{Hj{c}}}f}{{{Gj{c}}}{{Hj{c}}}f}{{{Gf{c}}}hf}{{{Gj{c}}}hf}`{{{Gj{c}}}{{Ch{bb}}}f}{{{Gj{c}}}{{Ah{h}}}f}0{{{Gf{c}}}{{Bn{b}}}f}```0{{{Gj{c}}}bf}0{{ch}{{Gf{c}}}f}{{chh}{{Gf{c}}}f}6```{{{Gf{c}}}Cdf}{{{Gj{c}}}Cdf}{{{Gh{c}}}Cdf}{{{Gh{c}}}lf}{{{Gf{c}}d}lf}{{{Gh{c}}d}lf}{{{Gf{c}}hd}lf}{{{Gh{c}}hd}lf}{{{Gf{c}}h}lf}{{{Gf{c}}}lf}6{{{Gf{c}}{Gf{c}}}Abf}{{{Gf{c}}hh}{{Gj{c}}}f}{{{Gj{c}}hh}{{Gj{c}}}f}{{{Gf{c}}hh}{{Gh{c}}}f}{{{Gh{c}}hh}{{Gh{c}}}f}``{ce{}{}}0{{{Gj{c}}}{{Gf{c}}}f}8{c{{Al{e}}}{}{}}00000{cAn{}}00````3333````{hc{}}000`{hl}0``{cc{}}0`{{}h}07777{Hhh}````{c{{Ch{eg}}}{}{}{}}{{{Gj{c}}}Hhf}{{{Gj{c}}}{{Hj{c}}}f}{Hh{{Aj{c}}}{}}{{{Hj{c}}}{{Aj{e}}}f{}}`{{Hhh}l}<<<<;;````````````````````````{{BfBfd}l}{{CbBbd}l}{{BfBf}l}{{Bfhd}l}{{Cbhd}l}{{BfBfd{Bn{Bf}}}Ab}{{CbBbd{Bn{h}}}l}6{{BfBfdh}l}0{{CbhdBbBb}l}{{BfBfd}{{Aj{l}}}}3{BfBb}{CbBb}{BfCb}:{{CbBb}l};{ce{}{}}0000000{BfBf}{BbBb}{{ce}l{}{}}0{CbCb}{{Bf{Bn{d}}}l}{BfGn}{hc{}}0000000{c{{Al{Bf}}}Fj}``{hl}000{{Bfh}d}{{Bbh}d}{{BfBf}Ab}{{Bfh}l}{Bf{{Aj{{Ch{hd}}}}}}{{Bfn}A`}0{{Bbn}A`}0{{Cbn}A`}{cc{}}0{BbBb}{CbBb}2{BfBb}{BfCb}4{CbCb}{{Cdhc}{{Cn{Bf}}}D`}{{c{Bn{d}}}Bff}{{Bfc}lFn}`{{}h}000{ce{}{}}0000{Bfc{}}{BfAb}{BbAb}10{BfHh}{BbHh}{BfHl}{BbHl}{Bfh}{Bbh}{Bf{{Bn{b}}}}0{c{{Ch{eg}}}{}{}{}}{{ch}Bff}{{chh}Bff}{Hl{{Aj{{Ch{hd}}}}}}{Hl{{Aj{c}}}{}}{{Cdh}h}0{BfCd}{BbCd}{CbCd}{{Bfd}l}{{Cbd}l}{{Bfc}AlGb}{{Bfhd}l}{{Cbhd}l}{{Bfh}l}{Bfl}{Cbl}{{BfBf}Ab}{{Bfhh}Bb}{{Bbhh}Bb}{{Bfhh}Cb}{{Cbhh}Cb}{{Bfc}{{Cn{l}}}Dl}{ce{}{}}{BbBf}1{cBh{}}0;{c{{Al{e}}}{}{}}0000{Bf{{Al{{Gf{Ff}}l}}}}{Bf{{Al{{Gf{Fh}}l}}}}{Bf{{Al{{Gf{Fd}}l}}}}{Bf{{Al{{Gf{Fb}}l}}}}4{Bf{{Al{{Gf{Cd}}l}}}}55{cAn{}}000{{Bfc}{{Cn{l}}}D`}","c":[],"p":[[1,"u64"],[1,"u32"],[10,"Prime",386],[1,"usize"],[5,"LimbBitIndexPair",26],[1,"unit"],[5,"Formatter",1045],[8,"Result",1045],[1,"bool"],[17,"Item"],[10,"Iterator",1046],[5,"Range",1047],[6,"Option",1048],[6,"Result",1049],[5,"TypeId",1050],[5,"AffineSubspace",88],[6,"Slice",879],[5,"Subspace",345],[6,"FpVector",879],[5,"String",1051],[5,"M4riTable",116],[5,"Matrix",143],[1,"slice"],[5,"MatrixSliceMut",143],[6,"SliceMut",879],[5,"ValidPrime",479],[5,"Vec",1052],[1,"tuple"],[5,"AugmentedMatrix",143],[5,"QuasiInverse",274],[8,"Result",1053],[10,"Read",1054],[5,"Iter",1055],[5,"IterMut",1055],[10,"MaybeIndexedParallelIterator",1056],[1,"array"],[1,"isize"],[10,"Write",1054],[5,"Subquotient",304],[17,"Output"],[10,"FnMut",1057],[10,"FnOnce",1057],[1,"i32"],[6,"PrimeError",386],[10,"Binomial",430],[5,"BitflagIterator",442],[5,"BinomialIterator",442],[5,"IterBridge",1058],[5,"P2",479],[5,"P3",479],[5,"P5",479],[5,"P7",479],[10,"Deserializer",1059],[1,"str"],[10,"Hasher",1060],[6,"Ordering",1061],[10,"Serializer",1062],[5,"__m128i",1063],[5,"FpVectorP",702],[5,"SliceMutP",702],[5,"SliceP",702],[10,"Clone",1064],[1,"f32"],[10,"PartialEq",1061],[10,"Debug",1045],[10,"AsRef",1065],[10,"Hash",1060],[5,"FpVectorIterator",831],[5,"FpVectorNonZeroIteratorP",831],[6,"FpVectorNonZeroIterator",879]],"b":[[99,"impl-Display-for-AffineSubspace"],[100,"impl-Debug-for-AffineSubspace"],[195,"impl-Display-for-Matrix"],[196,"impl-Debug-for-Matrix"],[214,"impl-IntoIterator-for-Matrix"],[215,"impl-IntoIterator-for-%26mut+Matrix"],[216,"impl-IntoIterator-for-%26Matrix"],[364,"impl-Display-for-Subspace"],[365,"impl-Debug-for-Subspace"],[406,"impl-Display-for-PrimeError"],[407,"impl-Debug-for-PrimeError"],[484,"impl-Add-for-P2"],[485,"impl-Add%3Cu32%3E-for-P2"],[486,"impl-Add%3Cu32%3E-for-P3"],[487,"impl-Add-for-P3"],[488,"impl-Add%3Cu32%3E-for-P5"],[489,"impl-Add-for-P5"],[490,"impl-Add%3Cu32%3E-for-P7"],[491,"impl-Add-for-P7"],[492,"impl-Add%3Cu32%3E-for-ValidPrime"],[493,"impl-Add-for-ValidPrime"],[534,"impl-Div-for-P2"],[535,"impl-Div%3Cu32%3E-for-P2"],[536,"impl-Div%3Cu32%3E-for-P3"],[537,"impl-Div-for-P3"],[538,"impl-Div%3Cu32%3E-for-P5"],[539,"impl-Div-for-P5"],[540,"impl-Div-for-P7"],[541,"impl-Div%3Cu32%3E-for-P7"],[542,"impl-Div-for-ValidPrime"],[543,"impl-Div%3Cu32%3E-for-ValidPrime"],[549,"impl-PartialEq%3Cu32%3E-for-P2"],[550,"impl-PartialEq-for-P2"],[551,"impl-PartialEq%3Cu32%3E-for-P3"],[552,"impl-PartialEq-for-P3"],[553,"impl-PartialEq%3Cu32%3E-for-P5"],[554,"impl-PartialEq-for-P5"],[555,"impl-PartialEq%3Cu32%3E-for-P7"],[556,"impl-PartialEq-for-P7"],[557,"impl-PartialEq%3Cu32%3E-for-ValidPrime"],[558,"impl-PartialEq-for-ValidPrime"],[559,"impl-Display-for-P2"],[560,"impl-Debug-for-P2"],[561,"impl-Display-for-P3"],[562,"impl-Debug-for-P3"],[563,"impl-Debug-for-P5"],[564,"impl-Display-for-P5"],[565,"impl-Debug-for-P7"],[566,"impl-Display-for-P7"],[567,"impl-Debug-for-ValidPrime"],[568,"impl-Display-for-ValidPrime"],[591,"impl-Mul%3Cu32%3E-for-P2"],[592,"impl-Mul-for-P2"],[593,"impl-Mul%3Cu32%3E-for-P3"],[594,"impl-Mul-for-P3"],[595,"impl-Mul%3Cu32%3E-for-P5"],[596,"impl-Mul-for-P5"],[597,"impl-Mul%3Cu32%3E-for-P7"],[598,"impl-Mul-for-P7"],[599,"impl-Mul%3Cu32%3E-for-ValidPrime"],[600,"impl-Mul-for-ValidPrime"],[609,"impl-Rem%3Cu32%3E-for-P2"],[610,"impl-Rem-for-P2"],[611,"impl-Rem%3Cu32%3E-for-P3"],[612,"impl-Rem-for-P3"],[613,"impl-Rem%3Cu32%3E-for-P5"],[614,"impl-Rem-for-P5"],[615,"impl-Rem%3Cu32%3E-for-P7"],[616,"impl-Rem-for-P7"],[617,"impl-Rem-for-ValidPrime"],[618,"impl-Rem%3Cu32%3E-for-ValidPrime"],[624,"impl-Shl-for-P2"],[625,"impl-Shl%3Cu32%3E-for-P2"],[626,"impl-Shl-for-P3"],[627,"impl-Shl%3Cu32%3E-for-P3"],[628,"impl-Shl%3Cu32%3E-for-P5"],[629,"impl-Shl-for-P5"],[630,"impl-Shl-for-P7"],[631,"impl-Shl%3Cu32%3E-for-P7"],[632,"impl-Shl%3Cu32%3E-for-ValidPrime"],[633,"impl-Shl-for-ValidPrime"],[634,"impl-Shr%3Cu32%3E-for-P2"],[635,"impl-Shr-for-P2"],[636,"impl-Shr%3Cu32%3E-for-P3"],[637,"impl-Shr-for-P3"],[638,"impl-Shr-for-P5"],[639,"impl-Shr%3Cu32%3E-for-P5"],[640,"impl-Shr%3Cu32%3E-for-P7"],[641,"impl-Shr-for-P7"],[642,"impl-Shr%3Cu32%3E-for-ValidPrime"],[643,"impl-Shr-for-ValidPrime"],[644,"impl-Sub%3Cu32%3E-for-P2"],[645,"impl-Sub-for-P2"],[646,"impl-Sub-for-P3"],[647,"impl-Sub%3Cu32%3E-for-P3"],[648,"impl-Sub-for-P5"],[649,"impl-Sub%3Cu32%3E-for-P5"],[650,"impl-Sub-for-P7"],[651,"impl-Sub%3Cu32%3E-for-P7"],[652,"impl-Sub-for-ValidPrime"],[653,"impl-Sub%3Cu32%3E-for-ValidPrime"],[957,"impl-Debug-for-FpVector"],[958,"impl-Display-for-FpVector"],[959,"impl-Debug-for-Slice%3C\'a%3E"],[960,"impl-Display-for-Slice%3C\'a%3E"],[964,"impl-From%3C%26Slice%3C\'b%3E%3E-for-Slice%3C\'a%3E"],[965,"impl-From%3C%26SliceMut%3C\'b%3E%3E-for-Slice%3C\'a%3E"],[967,"impl-From%3C%26FpVector%3E-for-Slice%3C\'a%3E"],[968,"impl-From%3C%26mut+FpVector%3E-for-SliceMut%3C\'a%3E"],[970,"impl-From%3C%26mut+SliceMut%3C\'b%3E%3E-for-SliceMut%3C\'a%3E"],[1000,"impl-FpVectorNonZeroIterator%3C\'a%3E"],[1001,"impl-Iterator-for-FpVectorNonZeroIterator%3C\'a%3E"],[1032,"impl-TryInto%3C%26mut+FpVectorP%3CP5%3E%3E-for-%26mut+FpVector"],[1033,"impl-TryInto%3C%26mut+FpVectorP%3CP7%3E%3E-for-%26mut+FpVector"],[1034,"impl-TryInto%3C%26mut+FpVectorP%3CP3%3E%3E-for-%26mut+FpVector"],[1035,"impl-TryInto%3C%26mut+FpVectorP%3CP2%3E%3E-for-%26mut+FpVector"],[1037,"impl-TryInto%3C%26mut+FpVectorP%3CValidPrime%3E%3E-for-%26mut+FpVector"]]}],\
["lift_hom",{"doc":"Given an element in $\\\\Ext(M, N)$, this computes the …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["mahowald_invariant",{"doc":"Computes algebraic Mahowald invariants (aka algebraic root …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["massey",{"doc":"Computes the triple Massey product up to a sign","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["maybe_rayon",{"doc":"","t":"CIOHHCHKKRKKIKKKNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNMONMNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNN","n":["concurrent","Scope","base","in_place_scope","join","prelude","scope","IndexedParallelIterator","IntoMaybeParallelIterator","Item","MaybeIndexedParallelIterator","MaybeIntoParallelRefMutIterator","MaybeIterBridge","MaybeParallelBridge","MaybeParallelIterator","ParallelIterator","all","any","by_exponential_blocks","by_uniform_blocks","chain","chunks","cloned","cmp","collect","collect_into_vec","collect_vec_list","copied","count","drive","drive_unindexed","enumerate","eq","filter","filter_map","find_any","find_first","find_last","find_map_any","find_map_first","find_map_last","flat_map","flat_map_iter","flatten","flatten_iter","fold","fold_chunks","fold_chunks_with","fold_with","for_each","for_each_init","for_each_with","ge","gt","inspect","interleave","interleave_shortest","intersperse","into_maybe_par_iter","iter","le","len","lt","map","map_init","map_with","max","max_by","max_by_key","maybe_par_bridge","maybe_par_iter_mut","min","min_by","min_by_key","ne","opt_len","panic_fuse","partial_cmp","partition","partition_map","position_any","position_first","position_last","positions","product","reduce","reduce_with","rev","skip","skip_any","skip_any_while","step_by","sum","take","take_any","take_any_while","try_fold","try_fold_with","try_for_each","try_for_each_init","try_for_each_with","try_reduce","try_reduce_with","unzip","unzip_into_vecs","update","while_some","with_max_len","with_min_len","with_producer","zip","zip_eq"],"q":[[0,"maybe_rayon"],[1,"maybe_rayon::concurrent"],[7,"maybe_rayon::concurrent::prelude"],[112,"core::ops::function"],[113,"core::marker"],[114,"core::ops::function"],[115,"rayon::iter::blocks"],[116,"rayon::iter"],[117,"rayon::iter::chunks"],[118,"rayon::iter::cloned"],[119,"core::cmp"],[120,"rayon::iter"],[121,"alloc::collections::linked_list"],[122,"rayon::iter::copied"],[123,"rayon::iter::plumbing"],[124,"rayon::iter::plumbing"],[125,"rayon::iter::filter"],[126,"rayon::iter::filter_map"],[127,"core::option"],[128,"rayon::iter::flat_map"],[129,"rayon::iter::flat_map_iter"],[130,"core::iter::traits::collect"],[131,"rayon::iter::flatten"],[132,"rayon::iter::flatten_iter"],[133,"rayon::iter::fold"],[134,"rayon::iter::fold_chunks"],[135,"rayon::iter::fold_chunks_with"],[136,"core::clone"],[137,"rayon::iter::fold"],[138,"rayon::iter::interleave"],[139,"rayon::iter::interleave_shortest"],[140,"rayon::iter::intersperse"],[141,"rayon::iter::map"],[142,"rayon::iter::map_with"],[143,"rayon::iter::map_with"],[144,"core::default"],[145,"rayon::iter"],[146,"rayon::iter::positions"],[147,"core::iter::traits::accum"],[148,"rayon::iter::rev"],[149,"rayon::iter::skip"],[150,"rayon::iter::skip_any"],[151,"rayon::iter::skip_any_while"],[152,"rayon::iter::step_by"],[153,"core::iter::traits::accum"],[154,"rayon::iter::take_any"],[155,"rayon::iter::take_any_while"],[156,"rayon::iter::try_fold"],[157,"rayon::iter::private"],[158,"rayon::iter::try_fold"],[159,"rayon::iter::while_some"],[160,"rayon::iter::len"],[161,"rayon::iter::len"],[162,"rayon::iter::zip_eq"]],"d":["","","","","","","","An iterator that supports “random access” to its data, …","","The type of item that this parallel iterator produces. For …","","","","","","Parallel version of the standard iterator trait.","Tests that every item in the parallel iterator matches the …","Searches for <strong>some</strong> item in the parallel iterator that …","Divides an iterator into sequential blocks of …","Divides an iterator into sequential blocks of the given …","Takes two iterators and creates a new iterator over both.","Splits an iterator up into fixed-size chunks.","Creates an iterator which clones all of its elements.  …","Lexicographically compares the elements of this …","Creates a fresh collection containing all the elements …","Collects the results of the iterator into the specified …","Collects this iterator into a linked list of vectors.","Creates an iterator which copies all of its elements.  …","Counts the number of items in this parallel iterator.","Internal method used to define the behavior of this …","Internal method used to define the behavior of this …","Yields an index along with each item.","Determines if the elements of this <code>ParallelIterator</code> are …","Applies <code>filter_op</code> to each item of this iterator, producing …","Applies <code>filter_op</code> to each item of this iterator to get an …","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies <code>map_op</code> to each item of this iterator to get nested …","Applies <code>map_op</code> to each item of this iterator to get nested …","An adaptor that flattens parallel-iterable <code>Item</code>s into one …","An adaptor that flattens serial-iterable <code>Item</code>s into one …","Parallel fold is similar to sequential fold except that the","Splits an iterator into fixed-size chunks, performing a …","Splits an iterator into fixed-size chunks, performing a …","Applies <code>fold_op</code> to the given <code>init</code> value with each item of …","Executes <code>OP</code> on each item produced by the iterator, in …","Executes <code>OP</code> on a value returned by <code>init</code> with each item …","Executes <code>OP</code> on the given <code>init</code> value with each item …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","Applies <code>inspect_op</code> to a reference to each item of this …","Interleaves elements of this iterator and the other given …","Interleaves elements of this iterator and the other given …","Intersperses clones of an element between items of this …","","","Determines if the elements of this <code>ParallelIterator</code> are …","Produces an exact count of how many items this iterator …","Determines if the elements of this <code>ParallelIterator</code> are …","Applies <code>map_op</code> to each item of this iterator, producing a …","Applies <code>map_op</code> to a value returned by <code>init</code> with each item …","Applies <code>map_op</code> to the given <code>init</code> value with each item of …","Computes the maximum of all the items in the iterator. If …","Computes the maximum of all the items in the iterator with …","Computes the item that yields the maximum value for the …","","","Computes the minimum of all the items in the iterator. If …","Computes the minimum of all the items in the iterator with …","Computes the item that yields the minimum value for the …","Determines if the elements of this <code>ParallelIterator</code> are …","Internal method used to define the behavior of this …","Wraps an iterator with a fuse in case of panics, to halt …","Lexicographically compares the elements of this …","Partitions the items of a parallel iterator into a pair of …","Partitions and maps the items of a parallel iterator into …","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Searches for items in the parallel iterator that match the …","Multiplies all the items in the iterator.","Reduces the items in the iterator into one item using <code>op</code>. …","Reduces the items in the iterator into one item using <code>op</code>. …","Produces a new iterator with the elements of this iterator …","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that skips <code>n</code> elements from <em>anywhere</em> in …","Creates an iterator that skips elements from <em>anywhere</em> in …","Creates an iterator that steps by the given amount","Sums up the items in the iterator.","Creates an iterator that yields the first <code>n</code> elements.","Creates an iterator that yields <code>n</code> elements from <em>anywhere</em> …","Creates an iterator that takes elements from <em>anywhere</em> in …","Performs a fallible parallel fold.","Performs a fallible parallel fold with a cloneable <code>init</code> …","Executes a fallible <code>OP</code> on each item produced by the …","Executes a fallible <code>OP</code> on a value returned by <code>init</code> with …","Executes a fallible <code>OP</code> on the given <code>init</code> value with each …","Reduces the items in the iterator into one item using a …","Reduces the items in the iterator into one item using a …","Unzips the items of a parallel iterator into a pair of …","Unzips the results of the iterator into the specified …","Mutates each item of this iterator before yielding it.","Creates an iterator over the <code>Some</code> items of this iterator, …","Sets the maximum length of iterators desired to process in …","Sets the minimum length of iterators desired to process in …","Internal method used to define the behavior of this …","Iterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …","The same as <code>Zip</code>, but requires that both iterators have the …"],"i":[0,0,1,0,0,0,0,0,0,7,0,0,0,0,0,0,7,7,11,11,7,11,7,11,7,11,7,7,7,11,7,11,11,7,7,7,7,7,7,7,7,7,7,7,7,7,11,11,7,7,7,7,11,11,7,11,11,7,45,51,11,11,11,7,7,7,7,7,7,50,52,7,7,7,11,7,7,11,7,7,11,11,11,11,7,7,7,11,11,7,7,11,7,11,7,7,7,7,7,7,7,7,7,7,11,7,7,11,11,11,11,11],"f":"```{ec{}{{f{b}{{d{c}}}}}}{{ei}{{h{cg}}}j{{f{}{{d{c}}}}j}j{{f{}{{d{g}}}}j}}`{ecj{{f{b}{{d{c}}}}j}}`````````{{{n{}{{l{c}}}}e}A`j{{Ab{c}{{d{A`}}}}Adj}}0{Af{{Ah{Af}}}}{{AfAj}{{Al{Af}}}}{{{n{}{{l{c}}}}e}{{An{{n{}{{l{c}}}}}}}j{{B`{}{{l{c}}}}}}{{AfAj}{{Bb{Af}}}}{{{n{}{{l{c}}}}}{{Bd{{n{}{{l{c}}}}}}}j}{{Afe}Bf{}{{B`{}{{l{c}}}}}}{{{n{}{{l{c}}}}}ej{{Bh{c}}}}{{Af{Bj{c}}}Bl{}}{{{n{}{{l{c}}}}}{{Bn{{Bj{c}}}}}j}{{{n{}{{l{c}}}}}{{C`{{n{}{{l{c}}}}}}}j}{{{n{}{{l{c}}}}}Ajj}{{Afe}{}{}{{Cb{c}}}}{{{n{}{{l{c}}}}e}{}j{{Cd{c}}}}{Af{{Cf{Af}}}}{{Afc}A`B`}{{{n{}{{l{c}}}}e}{{Ch{{n{}{{l{c}}}}e}}}j{{Ab{c}{{d{A`}}}}Adj}}{{{n{}{{l{c}}}}g}{{Cj{{n{}{{l{c}}}}g}}}jj{{Ab{c}{{d{{Cl{e}}}}}}Adj}}{{{n{}{{l{c}}}}e}{{Cl{c}}}j{{Ab{c}{{d{A`}}}}Adj}}00{{{n{}{{l{c}}}}g}{{Cl{e}}}jj{{Ab{c}{{d{{Cl{e}}}}}}Adj}}00{{{n{}{{l{c}}}}g}{{Cn{{n{}{{l{c}}}}g}}}jB`{{Ab{c}{{d{e}}}}Adj}}{{{n{}{{l{c}}}}g}{{D`{{n{}{{l{c}}}}g}}}jDb{{Ab{c}{{d{e}}}}Adj}}{{{n{}{{l{c}}}}}{{Dd{{n{}{{l{c}}}}}}}j}{{{n{}{{l{c}}}}}{{Df{{n{}{{l{c}}}}}}}j}{{{n{}{{l{c}}}}gi}{{Dh{{n{}{{l{c}}}}gi}}}jj{{Ab{}{{d{e}}}}Adj}{{Ab{ec}{{d{e}}}}Adj}}{{AfAjei}{{Dj{Afei}}}j{{Ab{}{{d{c}}}}jAd}{}{{Ab{cg}{{d{c}}}}jAd}}{{AfAjcg}{{Dl{Afcg}}}{jDn}{}{{Ab{ce}{{d{c}}}}jAd}}{{{n{}{{l{c}}}}eg}{{E`{{n{}{{l{c}}}}eg}}}j{jDn}{{Ab{ec}{{d{e}}}}Adj}}{{{n{}{{l{c}}}}e}Blj{{Ab{c}}Adj}}{{{n{}{{l{c}}}}gi}Blj{}{{Ab{}{{d{e}}}}Adj}{{Ab{ec}}Adj}}{{{n{}{{l{c}}}}eg}Blj{jDn}{{Ab{ec}}Adj}}??{{{n{}{{l{c}}}}e}{{Eb{{n{}{{l{c}}}}e}}}j{{Ab{c}}Adj}}{{Afe}{{Ed{Af}}}{}{{B`{}{{l{c}}}}}}{{Afe}{{Ef{Af}}}{}{{B`{}{{l{c}}}}}}{{{n{}{{l{c}}}}c}{{Eh{{n{}{{l{c}}}}}}}j}{Ejc{}}`{{Afc}A`B`}{AfAj}1{{{n{}{{l{c}}}}g}{{El{{n{}{{l{c}}}}g}}}jj{{Ab{c}{{d{e}}}}Adj}}{{{n{}{{l{c}}}}gk}{{En{{n{}{{l{c}}}}gk}}}j{}{{Ab{}{{d{e}}}}Adj}j{{Ab{ec}{{d{i}}}}Adj}}{{{n{}{{l{c}}}}ei}{{F`{{n{}{{l{c}}}}ei}}}j{jDn}j{{Ab{ec}{{d{g}}}}Adj}}{{{n{}{{l{c}}}}}{{Cl{c}}}j}{{{n{}{{l{c}}}}e}{{Cl{c}}}j{Adj{Ab{cc}{{d{Bf}}}}}}{{{n{}{{l{c}}}}g}{{Cl{c}}}j{Fbj}{Adj{Ab{c}{{d{e}}}}}}{Fd{{Ff{Fd}}}}{Fhc{}}4329{{{n{}{{l{c}}}}}{{Cl{Aj}}}j}{{{n{}{{l{c}}}}}{{Fj{{n{}{{l{c}}}}}}}j}{{Afc}{{Cl{Bf}}}B`}{{{n{}{{l{c}}}}e}{{h{gi}}}j{{Ab{c}{{d{A`}}}}Adj}{Flj{Fn{c}}}{Flj{Fn{c}}}}{{{n{}{{l{c}}}}i}{{h{km}}}jjj{{Ab{c}{{d{{G`{eg}}}}}}Adj}{Flj{Fn{e}}}{Flj{Fn{g}}}}{{Afe}{{Cl{Aj}}}{}{{Ab{c}{{d{A`}}}}Adj}}00{{Afe}{{Gb{Afe}}}{}{{Ab{c}{{d{A`}}}}Adj}}{{{n{}{{l{c}}}}}ej{j{Gd{c}}Gd}}{{{n{}{{l{c}}}}eg}cj{{Ab{}{{d{c}}}}Adj}{{Ab{cc}{{d{c}}}}Adj}}{{{n{}{{l{c}}}}e}{{Cl{c}}}j{{Ab{cc}{{d{c}}}}Adj}}{Af{{Gf{Af}}}}{{AfAj}{{Gh{Af}}}}{{{n{}{{l{c}}}}Aj}{{Gj{{n{}{{l{c}}}}}}}j}{{{n{}{{l{c}}}}e}{{Gl{{n{}{{l{c}}}}e}}}j{{Ab{c}{{d{A`}}}}Adj}}{{AfAj}{{Gn{Af}}}}{{{n{}{{l{c}}}}}ej{j{H`{c}}H`}}{{AfAj}{{Hb{Af}}}}{{{n{}{{l{c}}}}Aj}{{Hd{{n{}{{l{c}}}}}}}j}{{{n{}{{l{c}}}}e}{{Hf{{n{}{{l{c}}}}e}}}j{{Ab{c}{{d{A`}}}}Adj}}{{{n{}{{l{c}}}}gk}{{Hh{{n{}{{l{c}}}}igk}}}j{}{{Ab{}{{d{e}}}}Adj}{{Hj{}{{d{e}}}}j}{{Ab{ec}{{d{i}}}}Adj}}{{{n{}{{l{c}}}}ei}{{Hl{{n{}{{l{c}}}}gi}}}j{Dnj}{{Hj{}{{d{e}}}}j}{{Ab{ec}{{d{g}}}}Adj}}{{{n{}{{l{c}}}}g}ej{{Hj{}{{d{Bl}}}}j}{{Ab{c}{{d{e}}}}Adj}}{{{n{}{{l{c}}}}gk}ij{}{{Ab{}{{d{e}}}}Adj}{{Hj{}{{d{Bl}}}}j}{{Ab{ec}{{d{i}}}}Adj}}{{{n{}{{l{c}}}}ei}gj{jDn}{{Hj{}{{d{Bl}}}}j}{{Ab{ec}{{d{g}}}}Adj}}{{{n{}{{l{c}}}}gi}cj{}{{Ab{}{{d{e}}}}Adj}{{Ab{ee}{{d{c}}}}Adj}}{{{n{}{{l{c}}}}g}{{Cl{c}}}j{}{{Ab{ee}{{d{c}}}}Adj}}{{{n{}{{l{c}}}}}{{h{gk}}}jj{Flj{Fn{e}}}j{Flj{Fn{i}}}}{{Af{Bj{c}}{Bj{e}}}Bljj}{{{n{}{{l{c}}}}e}{{Hn{{n{}{{l{c}}}}e}}}j{{Ab{c}}Adj}}{{{n{}{{l{c}}}}}{{I`{{n{}{{l{c}}}}}}}j}{{AfAj}{{Ib{Af}}}}{{AfAj}{{Id{Af}}}}{{Afe}{}{}{{If{c}}}}{{Afc}{{Ih{Af}}}B`}{{Afc}{{Ij{Af}}}B`}","c":[],"p":[[8,"Scope",1],[17,"Output"],[10,"FnOnce",112],[1,"tuple"],[10,"Send",113],[17,"Item"],[10,"ParallelIterator",7],[1,"bool"],[10,"Fn",112],[10,"Sync",113],[10,"IndexedParallelIterator",7],[5,"ExponentialBlocks",114],[1,"usize"],[5,"UniformBlocks",114],[5,"Chain",115],[10,"IntoParallelIterator",116],[5,"Chunks",117],[5,"Cloned",118],[6,"Ordering",119],[10,"FromParallelIterator",116],[5,"Vec",120],[1,"unit"],[5,"LinkedList",121],[5,"Copied",122],[10,"Consumer",123],[10,"UnindexedConsumer",123],[5,"Enumerate",124],[5,"Filter",125],[5,"FilterMap",126],[6,"Option",127],[5,"FlatMap",128],[5,"FlatMapIter",129],[10,"IntoIterator",130],[5,"Flatten",131],[5,"FlattenIter",132],[5,"Fold",133],[5,"FoldChunks",134],[5,"FoldChunksWith",135],[10,"Clone",136],[5,"FoldWith",133],[5,"Inspect",137],[5,"Interleave",138],[5,"InterleaveShortest",139],[5,"Intersperse",140],[10,"IntoMaybeParallelIterator",7],[5,"Map",141],[5,"MapInit",142],[5,"MapWith",142],[10,"Ord",119],[10,"MaybeParallelBridge",7],[8,"MaybeIterBridge",7],[10,"MaybeIntoParallelRefMutIterator",7],[5,"PanicFuse",143],[10,"Default",144],[10,"ParallelExtend",116],[6,"Either",145],[5,"Positions",146],[10,"Product",147],[5,"Rev",148],[5,"Skip",149],[5,"SkipAny",150],[5,"SkipAnyWhile",151],[5,"StepBy",152],[10,"Sum",147],[5,"Take",153],[5,"TakeAny",154],[5,"TakeAnyWhile",155],[5,"TryFold",156],[10,"Try",157],[5,"TryFoldWith",156],[5,"Update",158],[5,"WhileSome",159],[5,"MaxLen",160],[5,"MinLen",160],[10,"ProducerCallback",123],[5,"Zip",161],[5,"ZipEq",162]],"b":[]}],\
["num_gens",{"doc":"This prints the number of generators in each $\\\\Ext^{s, n + …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["once",{"doc":"","t":"SSFFFFSNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNONNNNNNNONNONNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["DATA_LAYOUT","MAX_OUTER_LENGTH","OnceBiVec","OnceVec","OooTracker","Page","USIZE_LEN","allocate","allocate_for","allocated","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","data","data","deallocate","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","entry_ptr","eq","eq","extend","extend","fmt","fmt","from","from","from","from","from_bivec","from_vec","from_vec","get","get","get_mut","index","index","index","index_mut","index_mut","index_mut","init","init","init","init","inner_index","into","into","into","into","is_empty","is_empty","iter","iter","iter_enum","last","last","layout","len","len","len","lock","lock","max_degree","maybe_par_extend","maybe_par_extend","maybe_par_iter_enum","min_degree","min_degree","new","new","ooo","ooo_elements","ooo_elements","page","page_raw","ptr","push","push","push_checked","push_checked","push_ooo","push_ooo","range","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"once"],[125,"core::clone"],[126,"core::cmp"],[127,"core::ops::function"],[128,"core::fmt"],[129,"core::fmt"],[130,"alloc::vec"],[131,"core::option"],[132,"core::iter::traits::iterator"],[133,"core::alloc::layout"],[134,"std::sync::mutex"],[135,"core::marker"],[136,"core::marker"],[137,"maybe_rayon::concurrent::prelude"],[138,"core::result"],[139,"core::any"]],"d":["","The maximum length of a OnceVec is 2^{MAX_OUTER_LENGTH} - …","","A <code>OnceVec</code> is a push-only vector which is thread-safe. To …","This is a wrapper around our out-of-order push tracker. …","","","","Allocate enough space to fit <code>new_max</code> many elements in …","","Safety","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","Returns","","","Extend the <code>OnceVec</code> to up to index <code>new_max</code>, filling in the …","Extend the <code>OnceBiVec</code> to up to index <code>new_max</code>, filling in …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a OnceVec from a Vec.","","","Returns whether the <code>OnceBiVec</code> has remaining out-of-order …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iterate through the <code>OnceVec</code>.","","","","","This always returns a layout of non-zero size.","All data up to length self.len() are guaranteed to be …","This returns the “length” of the bivector, defined to …","","Takes a lock on the <code>OnceVec</code>. The <code>OnceVec</code> cannot be updated …","Takes a lock on the <code>OnceBiVec</code>. The <code>OnceBiVec</code> cannot be …","This returns the largest degree in the bivector. This is …","A parallel version of <code>extend</code>. If the <code>concurrent</code> feature is …","A parallel version of <code>extend</code>. If the <code>concurrent</code> feature is …","","","","","","<code>BTreeSet</code> of elements that have been added out of order. We …","Returns a list of out-of-order elements remaining.","","Obtain an immutable reference to the <code>page</code>th page. This …","Returns","","Append an element to the end of the vector.","","Push an element into the vector and check that it was …","","Append an element to an arbitrary position in the OnceVec.","See <code>OnceVec::push_ooo</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,4,1,1,1,4,8,9,1,4,8,9,4,8,9,4,8,9,4,9,1,1,4,8,1,4,8,9,1,4,8,9,1,4,4,8,9,4,4,9,4,9,4,9,1,4,8,9,9,4,9,4,9,4,4,4,9,4,4,9,1,4,8,9,0,1,4,8,9,4,9,4,9,9,4,9,1,4,9,4,4,9,9,4,9,9,9,9,4,9,4,4,9,4,4,1,4,9,4,9,4,9,9,4,8,9,1,4,8,9,1,4,8,9,1,4,8,9],"f":"```````{{{b{c}}d}f{}}{{{h{c}}d}f{}}{{{b{c}}}j{}}{{{b{c}}dd}{{l{c}}}{}}{ce{}{}}0000000{{{h{c}}}{{h{c}}}n}{A`A`}{{{Ab{c}}}{{Ab{c}}}n}{{ce}f{}{}}00``{{{b{c}}dd}f{}}{{}{{b{c}}}{}}{{}{{h{c}}}{}}{{}A`}{dc{}}0000000{df}0{{{h{c}}}f{}}11{{{h{c}}d}{}{}}{{{h{c}}{h{c}}}jAd}{{{Ab{c}}{Ab{c}}}jAd}{{{h{c}}de}f{}{{Ah{d}{{Af{c}}}}}}{{{Ab{c}}Aje}f{}{{Ah{Aj}{{Af{c}}}}}}{{{h{c}}Al}AnB`}{{{Ab{c}}Al}AnB`}{cc{}}000{{{Bb{c}}}{{Ab{c}}}{}}{{{Bd{c}}}{{h{c}}}{}}{{Aj{Bd{c}}}{{Ab{c}}}{}}{{{h{c}}d}{{Bf{c}}}{}}{{{Ab{c}}Aj}{{Bf{c}}}{}}1{{{h{c}}Bh}c{}}{{{h{c}}d}c{}}{{{Ab{c}}Aj}c{}}210{{}d}000{d{{Bj{dd}}}}{ce{}{}}000{{{h{c}}}j{}}{{{Ab{c}}}j{}}{{{h{c}}}{{`{{Bn{}{{Bl{c}}}}}}}{}}{{{Ab{c}}}{{`{{Bn{}{{Bl{c}}}}}}}{}}{{{Ab{c}}}{{`{{Bn{}{{Bl{{Bj{Ajc}}}}}}}}}{}}{{{h{c}}}{{Bf{c}}}{}}{{{Ab{c}}}{{Bf{c}}}{}}{dC`}{{{h{c}}}d{}}{{{Ab{c}}}Aj{}}`{{{h{c}}}{{Cb{A`}}}{}}{{{Ab{c}}}{{Cb{A`}}}{}}2{{{h{c}}de}f{CdCf}{{Ch{d}{{Af{c}}}}CdCf}}{{{Ab{c}}Aje}f{CdCf}{{Ch{Aj}{{Af{c}}}}CdCf}}{{{Ab{c}}}{{`{{Cj{}{{Bl{{Bj{Ajc}}}}}}Cl}}}{CdCf}}5`{{}{{h{c}}}{}}{Aj{{Ab{c}}}{}}`{{{h{c}}}{{Bd{d}}}{}}{{{Ab{c}}}{{Bd{Aj}}}{}}{{{h{c}}d}{{b{c}}}{}}{{{h{c}}d}b{}}{{{b{c}}}{}{}}{{{h{c}}c}d{}}{{{Ab{c}}c}Aj{}}{{{h{c}}cd}f{}}{{{Ab{c}}cAj}f{}}{{{h{c}}cd}{{Cn{d}}}{}}{{{Ab{c}}cAj}{{Cn{Aj}}}{}}{{{Ab{c}}}{{Cn{Aj}}}{}}{ce{}{}}00{c{{D`{e}}}{}{}}0000000{cDb{}}000","c":[],"p":[[5,"Page",0],[1,"usize"],[1,"unit"],[5,"OnceVec",0],[1,"bool"],[1,"slice"],[10,"Clone",125],[5,"OooTracker",0],[5,"OnceBiVec",0],[10,"PartialEq",126],[17,"Output"],[10,"FnMut",127],[1,"i32"],[5,"Formatter",128],[8,"Result",128],[10,"Debug",128],[5,"BiVec",129],[5,"Vec",130],[6,"Option",131],[1,"u32"],[1,"tuple"],[17,"Item"],[10,"Iterator",132],[5,"Layout",133],[5,"MutexGuard",134],[10,"Send",135],[10,"Sync",135],[10,"Fn",127],[10,"MaybeParallelIterator",136],[10,"MaybeIndexedParallelIterator",136],[5,"Range",137],[6,"Result",138],[5,"TypeId",139]],"b":[[61,"impl-Index%3Cu32%3E-for-OnceVec%3CT%3E"],[62,"impl-Index%3Cusize%3E-for-OnceVec%3CT%3E"],[64,"impl-IndexMut%3Cu32%3E-for-OnceVec%3CT%3E"],[65,"impl-IndexMut%3Cusize%3E-for-OnceVec%3CT%3E"]]}],\
["query",{"doc":"This library gives various functions that are used to …","t":"SHHHHH","n":["ARGV","optional","raw","vector","with_default","yes_no"],"q":[[0,"query"],[6,"core::option"],[7,"core::fmt"],[8,"core::result"],[9,"core::ops::function"],[10,"alloc::vec"]],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":"`{{bg}{{d{c}}}{}f{{l{b}{{h{{j{ce}}}}}}}}{{bg}c{}f{{l{b}{{h{{j{ce}}}}}}}}{{bn}{{Ab{A`}}}}{{bbg}c{}f{{l{b}{{h{{j{ce}}}}}}}}{bAd}","c":[],"p":[[1,"str"],[6,"Option",6],[10,"Display",7],[17,"Output"],[6,"Result",8],[10,"FnMut",9],[1,"usize"],[1,"u32"],[5,"Vec",10],[1,"bool"]],"b":[]}],\
["resolution_size",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["resolve",{"doc":"Resolves a module up to a fixed $(s, t)$ and prints an …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["resolve_through_stem",{"doc":"Resolves a module up to an $(n, s)$ and prints an ASCII …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["resolve_unstable",{"doc":"Resolves an unstable module up to an $(n, s)$ and prints …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["save_bruner",{"doc":"This saves a resolution to Bruner’s format. This saves …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["secondary",{"doc":"This computes $d_2$ differentials in the Adams spectral …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["secondary_massey",{"doc":"Computes massey products in $\\\\Mod_{C\\\\tau^2}$.","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["secondary_product",{"doc":"Computes products in $\\\\Mod_{C\\\\tau^2}$.","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["sq0",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["sseq",{"doc":"","t":"FFFTFFKCOCCMOOOOOOOOOOOOMOMOCOOOFNNNNNNONNNNNNNNNONNNNNNEEEECCCHCFNNNNNNNNNNNNNNNNNNNNNNNNONNNNONNNNNNNNFNNNNNONNNNNNNNNNNNNNNNNNNNNOFNNNNNNONNNNNNNNNNNNNNONNNNNNNNNNNNNNNFONNNNNNNNNNNNNONONNNNFNNNNNNONONNNNNONNNNNOONNNFTFFKNNNNNNNNNONNNNNNNNNMNNONNNNNNNNNNNNNNNNNNOONONNNNNNONONOMNOMNNNNNNNNNNNNNNNOO","n":["Adams","DenseBigradedModule","Differential","MIN_R","Product","Sseq","SseqProfile","bigraded","classes","coordinates","differential","differential_length","differentials","dimensions","error","first_empty_row","invalid","left","matrices","matrix","min_y","p","page_data","permanent_classes","profile","profile","profile_inverse","source_dim","sseq","target_dim","x","y","DenseBigradedModule","borrow","borrow_mut","defined","deref","deref_mut","dimension","dimensions","drop","from","get_dimension","init","into","max_x","max_y","min_x","min_y","min_y","new","range","set_dimension","try_from","try_into","type_id","Bidegree","BidegreeElement","BidegreeGenerator","BidegreeRange","bidegree","element","generator","iter_s_t","range","Bidegree","add","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","hash","init","into","massey_bidegree","n","n_s","s","s","s_t","serialize","sub","t","t","t_s","to_owned","to_string","try_from","try_into","try_subtract","type_id","zero","BidegreeElement","borrow","borrow_mut","clone","clone_into","degree","degree","deref","deref_mut","drop","fmt","fmt","from","init","into","into_vec","n","new","s","t","to_basis_string","to_owned","to_string","to_string_module","try_from","try_into","type_id","vec","vec","BidegreeGenerator","borrow","borrow_mut","clone","clone_into","default","degree","degree","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","hash","idx","idx","init","into","n","n_s","new","s","s_t","serialize","t","to_owned","to_string","try_from","try_from","try_into","type_id","BidegreeRange","aux","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","init","into","new","restrict","s","s","t","t","to_owned","try_from","try_into","type_id","Differential","add","borrow","borrow_mut","deref","deref_mut","drop","error","evaluate","first_empty_row","from","get_source_target_pairs","inconsistent","init","into","matrix","new","prime","quasi_inverse","reduce_target","set_to_zero","source_dim","target_dim","try_from","try_into","type_id","Adams","MIN_R","Product","Sseq","SseqProfile","add_differential","add_permanent_class","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","classes","classes","clear","complete","defined","deref","deref","deref","deref_mut","deref_mut","deref_mut","differential_length","differential_length","differentials","differentials","differentials_hitting","dimension","drop","drop","drop","extend_differential","extend_page_data","from","from","from","inconsistent","init","init","init","into","into","into","invalid","invalid","left","leibniz","matrices","max_x","max_y","min_x","min_y","multiply","new","p","page_data","page_data","permanent_classes","permanent_classes","profile","profile","profile","profile_inverse","profile_inverse","range","set_dimension","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update_bidegree","write_to_graph","x","y"],"q":[[0,"sseq"],[32,"sseq::bigraded"],[56,"sseq::coordinates"],[65,"sseq::coordinates::bidegree"],[104,"sseq::coordinates::element"],[133,"sseq::coordinates::generator"],[171,"sseq::coordinates::range"],[193,"sseq::differential"],[219,"sseq::sseq"],[301,"core::option"],[302,"core::ops::range"],[303,"core::result"],[304,"core::any"],[305,"core::ops::function"],[306,"core::marker"],[307,"serde::de"],[308,"core::fmt"],[309,"core::fmt"],[310,"serde::ser"],[311,"alloc::string"],[312,"fp::vector::vector_generic"],[313,"algebra::module::free_module"],[314,"algebra::algebra::algebra_trait"],[315,"fp::vector::vector_generic"],[316,"fp::vector::vector_generic"],[317,"fp::prime::primes_generic"],[318,"fp::matrix::subspace"],[319,"alloc::sync"],[320,"bivec"],[321,"core::iter::traits::iterator"],[322,"fp::matrix::subquotient"],[323,"chart"],[324,"core::clone"],[325,"core::ops::function"]],"d":["","","","","","","The direction of the differentials","","The first page of the spectral sequence","","","","x -&gt; y -&gt; r -&gt; differential","","","","x -&gt; y -&gt; validity. A bidegree is invalid if the page_data …","Whether the product acts on the left or not. This affects …","","","","","x -&gt; y -&gt; r -&gt; E_r^{x, y} as a subquotient of the original …","x -&gt; y -&gt; permanent_classes","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","The dimension in a bidegree, None if not yet defined","","Calls <code>U::from(self)</code>.","","","","","","","","This can only be set when bidegrees to the left and bottom …","","","","","","","","","","","Given a function <code>f(s, t)</code>, compute it for every <code>s</code> in …","","Type synonym for (s, t) bidegrees.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Computes the bidegree containing the Massey product of …","","","","Homological degree","","","","","Internal degree","","","","","","Returns difference as a bidegree if the difference in …","","","An element of a bigraded vector space. Most commonly used …","","","","","","Bidegree of the element","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Get the string representation of the element as a linear …","","","An algebra-aware string representation. This assumes that …","","","","","Representing vector","A <em>basis</em> element of a bigraded vector space. Most commonly …","","","","","","","Bidegree of the element","","","","","","","","","","","","Returns the argument unchanged.","","","Position in the canonical basis for this bidegree","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A range of bidegrees, corresponding to all <code>s</code> up to a given …","Auxillary data that <code>t</code> may depend on.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","The maximal value of <code>s</code> in the range.","","The function that gives, for a given value of <code>s</code>, the …","","","","","","Add a differential","","","","","","","This evaluates the differential on <code>source</code>, adding the …","","Returns the argument unchanged.","An iterator of differentials in the form <code>(source, target)</code>","Whether the current set of differentials is inconsistent. …","","Calls <code>U::from(self)</code>.","","","","Find the differential that hits <code>value</code>, and write the …","Given a subspace of the target space, project the target …","","","","","","","","","","","The direction of the differentials","Add a $d_r$ differential from bidegree $(x, y)$, with the …","Returns","","","","","","","","The first page of the spectral sequence","","Whether the calcuations at bidegree (x, y) are complete. …","","","","","","","","","","","x -&gt; y -&gt; r -&gt; differential","","","","","","Ensure <code>self.differentials[x][y][r]</code> is defined. Must call …","Ensure <code>self.page_data[x][y][r]</code> is defined","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Whether there is an inconsistent differential involving …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","x -&gt; y -&gt; validity. A bidegree is invalid if the page_data …","Whether the product acts on the left or not. This affects …","Apply the Leibniz rule to obtain new differentials. The …","","","","","","Compute the product between <code>product</code> and the class <code>class</code> at …","","","","x -&gt; y -&gt; r -&gt; E_r^{x, y} as a subquotient of the original …","","x -&gt; y -&gt; permanent_classes","","","","","","","","","","","","","","","","","","This returns the vec of differentials to draw on each page.","This shifts the sseq horizontally so that the minimum x is …","",""],"i":[0,0,0,36,0,0,0,0,35,0,0,36,35,3,30,30,35,41,41,30,3,35,35,35,36,35,36,30,0,30,41,41,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,36,0,0,0,35,35,46,41,35,46,41,35,35,35,35,35,35,46,41,35,46,41,35,36,46,35,35,35,35,46,41,35,35,35,46,41,35,35,46,41,35,46,41,35,35,35,41,35,41,35,35,35,35,35,35,35,35,35,35,35,36,46,35,36,46,35,35,46,41,35,46,41,35,46,41,35,35,35,35,41,41],"f":"```````````{{bb}b}````````````{{bbb}{{d{bb}}}}`0``````{ce{}{}}0{{fbb}h}{jc{}}0{{fbb}j}`{jl}{cc{}}{{fbb}{{n{j}}}}{{}j}7{fb}000`{{bb}f}{{fb}{{A`{b}}}}{{fbbj}l}{c{{Ab{e}}}{}{}}0{cAd{}}```````{{cAf{Ah{e}}}l{{Al{Af}{{Aj{{A`{b}}}}}}An}An}``{{AfAf}Af}??{AfAf}{{ce}l{}{}}{{}Af}{jc{}}0{c{{Ab{Af}}}B`}{jl}{{AfAf}h}{{ce}h{}{}}00{{AfBb}Bd}0{cc{}}{{Afc}lBf}{{}j}{ce{}{}}{{AfAfAf}Af}{Afb}{{bBh}Af}{AfBh}`{{Bhb}Af}{{Afc}AbBj}{{AfAf}Af}5`47{cBl{}}{c{{Ab{e}}}{}{}}0{{AfAf}{{n{Af}}}}{cAd{}}{{}Af}`<<{BnBn}{{ce}l{}{}}{BnAf}`{jc{}}0{jl}{{BnBb}Bd}0{cc{}}{{}j}{ce{}{}}{BnC`}{Bnb}{{AfC`}Bn}{BnBh}2{BnBl}5{cBl{}}{{Bn{Cb{c}}h}BlCd}{c{{Ab{e}}}{}{}}0{cAd{}}{BnCf}``::{ChCh}{{ce}l{}{}}{{}Ch}{ChAf}`{jc{}}0{c{{Ab{Ch}}}B`}{jl}{{ChCh}h}{{ce}h{}{}}00{{ChBb}Bd}0{{{d{Afj}}}Ch}{cc{}}{{Chc}lBf}{Chj}`{{}j}{ce{}{}}{Chb}{{bBhj}Ch}{{cj}Ch{{Cj{Af}}}}{ChBh}{{Bhbj}Ch}{{Chc}AbBj}56{cBl{}}{c{{Ab{e}}}{}{}}{Bn{{Ab{Chc}}}{}}1{cAd{}}``::{{{Ah{c}}}{{Ah{c}}}{}}{{ce}l{}{}}{jc{}}0{jl}{cc{}}{{}j}{ce{}{}}{{cBhAl}{{Ah{c}}}{}}{{{Ah{c}}Bh}{{Ah{c}}}{}}{{{Ah{c}}}Bh{}}`{{{Ah{c}}Bh}b{}}`4==;`{{ClCf{n{Cf}}}h}55998`{{ClCfCn}l}`8{Cl{{D`{{d{C`C`}}}}}}{Clh}98`{{Dbjj}Cl}{ClDb}{{ClCnCf}l}{{ClDd}l}{Cll}``{c{{Ab{e}}}{}{}}0{cAd{}}`````{{{Df{c}}bbbCfCf}hDh}{{{Df{c}}bbCf}hDh}{ce{}{}}00000{{{Df{c}}}{{Dj{f}}}Dh}`{{{Df{c}}}lDh}{{{Df{c}}bb}hDh}0{jc{}}00000{{bb}b}0{{{Df{c}}bb}{{Dl{Cl}}}Dh}`{{{Df{c}}bb}{{`{{E`{}{{Dn{{d{bCl}}}}}}}}}Dh}{{{Df{c}}bb}jDh}{jl}00{{{Df{c}}bbb}lDh}0{cc{}}008{{}j}00<<<9``{{{Df{c}}bbbCfEb{n{Eb}}}{{n{{d{bbbC`}}}}}Dh}`{{{Df{c}}}bDh}000{{{Df{c}}bbCfEb}{{n{{d{bbC`}}}}}Dh}{{Dbbb}{{Df{c}}}Dh}`{{{Df{c}}bb}{{Dl{Ed}}}Dh}`{{{Df{c}}bb}DdDh}`{{bbb}{{d{bb}}}}0`00{{{Df{c}}b}{{A`{b}}}Dh}{{{Df{c}}bbj}lDh}{c{{Ab{e}}}{}{}}00000{cAd{}}00{{{Df{c}}}lDh}{{{Df{c}}bb}{{Dl{{D`{{D`{Bh}}}}}}}Dh}{{{Df{c}}ebhgi}{{Ab{l}}}DhEf{{E`{}{{Dn{{d{BlEb}}}}}}Eh}{{Ej{e}{{Aj{{Ab{l}}}}}}}}``","c":[],"p":[[1,"i32"],[1,"tuple"],[5,"DenseBigradedModule",32],[1,"bool"],[1,"usize"],[1,"unit"],[6,"Option",301],[5,"Range",302],[6,"Result",303],[5,"TypeId",304],[5,"Bidegree",65],[5,"BidegreeRange",171],[17,"Output"],[10,"Fn",305],[10,"Sync",306],[10,"Deserializer",307],[5,"Formatter",308],[8,"Result",308],[10,"Hasher",309],[1,"u32"],[10,"Serializer",310],[5,"String",311],[5,"BidegreeElement",104],[6,"FpVector",312],[5,"MuFreeModule",313],[10,"MuAlgebra",314],[6,"Slice",312],[5,"BidegreeGenerator",133],[10,"Into",315],[5,"Differential",193],[6,"SliceMut",312],[5,"Vec",316],[5,"ValidPrime",317],[5,"Subspace",318],[5,"Sseq",219],[10,"SseqProfile",219],[5,"Arc",319],[5,"BiVec",320],[17,"Item"],[10,"Iterator",321],[5,"Product",219],[5,"Subquotient",322],[10,"Backend",323],[10,"Clone",324],[10,"FnOnce",305],[5,"Adams",219]],"b":[[80,"impl-Debug-for-Bidegree"],[81,"impl-Display-for-Bidegree"],[114,"impl-Display-for-BidegreeElement"],[115,"impl-Debug-for-BidegreeElement"],[149,"impl-Debug-for-BidegreeGenerator"],[150,"impl-Display-for-BidegreeGenerator"]]}],\
["steenrod",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["tensor",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["unstable_chart",{"doc":"Computes the suspension map between different unstable Ext …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["unstable_suspension",{"doc":"Computes the suspension map between different unstable Ext …","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["yoneda",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);

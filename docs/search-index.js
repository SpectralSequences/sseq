var searchIndex = JSON.parse('{\
"algebra":{"doc":"Types and traits for working with various algebras and …","t":[13,3,13,8,8,4,8,13,13,3,8,8,13,3,13,8,8,3,3,4,4,8,0,10,0,12,12,10,10,12,12,0,0,10,10,10,10,10,12,10,14,12,12,12,10,10,0,10,10,10,12,12,12,10,10,12,12,0,10,0,12,12,10,12,12,0,12,10,10,12,10,10,10,12,12,12,10,10,12,10,0,0,10,12,12,12,12,12,12,12,3,8,3,13,13,4,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,3,8,3,13,13,4,11,10,11,5,5,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,12,12,11,11,12,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,8,8,8,10,10,10,11,11,10,11,11,10,11,11,10,10,10,11,11,11,11,10,11,11,11,11,10,10,10,8,10,10,17,3,17,3,17,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,5,11,11,12,11,11,11,11,11,11,11,12,12,11,12,12,12,12,11,5,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,3,3,8,3,3,6,3,6,3,3,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,12,11,12,12,12,12,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,16,3,8,17,10,5,5,11,11,12,11,11,11,11,11,11,11,11,10,12,11,11,10,14,11,11,12,11,14,12,8,3,3,10,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,12,10,10,11,11,11,11,10,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,13,13,3,4,13,13,13,13,3,4,4,8,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,5,5,5,5,5,5,5,17,3,3,5,12,12,5,12,12,12,12,12,12,12,5,5,3,12,12,3,8,3,3,6,3,6,3,3,12,12,12,12,12,12,12,12,12,12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,16,16,3,8,3,3,13,3,13,4,3,3,3,3,8,3,3,8,3,3,13,8,3,3,3,8,10,10,12,12,12,12,10,10,12,12,12,12,12,12,12,12,12,12,12,10,12,12,12,12,0,0,12,12,12,10,10,10,12,12,0,12,0,10,12,12,12,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,0,0,12,12,0,12,12,12,10,10,12,10,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,0,12,12,12,12,0,12,12,12,0,12,10,10,12,0,12,0,0,12,12,0,10,12,12,12,3,11,12,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,11,11,11,12,11,11,11,11,11,11,11,11,11,3,3,3,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,8,10,11,11,11,11,3,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,12,12,11,11,11,11,12,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,3,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,3,18,3,3,8,3,3,3,3,8,8,3,3,16,16,3,3,8,11,11,10,11,0,0,11,10,12,12,12,12,12,12,12,0,10,0,0,10,10,0,11,0,10,11,12,12,12,11,12,12,12,12,12,12,12,11,12,12,11,11,12,12,12,0,12,12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,10,12,12,12,12,12,0,12,10,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,12,11,11,11,12,11,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,13,4,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,12,12,12,3,8,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,12,11,11,11,11,12,11,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,12,11,12,11,11,11,11,12,11,12,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,12,11,12,11,12,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,12,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,16,8,3,11,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,12,11,11,11,11,11,11,11,11,12,16,8,10,10,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,3,3,11,11,12,11,11,11,11,11,12,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,8,10,16,3,8,10,12,10,12,10,12,12,3,3,5,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,13,13,4,4,13,13,4,13,4,13,13,3,13,13,13,13,13,13,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Adem","AdemAlgebra","AdemAlgebra","AdemAlgebraT","Algebra","AlgebraType","Bialgebra","BorrowAdem","BorrowMilnor","Field","GeneratedAlgebra","JsonAlgebra","Milnor","MilnorAlgebra","MilnorAlgebra","MilnorAlgebraT","PolynomialAlgebra","PolynomialAlgebraMonomial","PolynomialAlgebraTableEntry","SteenrodAlgebra","SteenrodAlgebraBorrow","SteenrodAlgebraT","adem_algebra","adem_algebra","algebra","basis_element_to_index_map","basis_element_to_index_map","basis_element_to_string","basis_table","basis_table","basis_table","change_of_basis","combinatorics","compute_basis","compute_generating_set","coproduct","decompose","decompose_basis_element","degree","dimension","dispatch_algebra","even_basis_table","excess_table","ext","exterior_generators_in_degree","exterior_monomials","field","frobenius_on_generator","generating_relations","generators","generic","generic","index_to_monomial","json_from_basis","json_to_basis","lock","lock","milnor_algebra","milnor_algebra","module","monomial_to_index","multiplication_table","multiply_basis_elements","p","p","pair_algebra","poly","polynomial_generators_in_degree","polynomial_monomials","ppart_table","prefix","prime","prime","prime","profile","qpart_table","repr_ext_generator","repr_poly_generator","sort_order","steenrod_algebra","steenrod_evaluator","steenrod_parser","string_to_generator","unstable","unstable_enabled","valid","0","0","0","0","AdemAlgebra","AdemAlgebraT","AdemBasisElement","Bockstein","P","PorBockstein","adem_algebra","basis_element_to_index_map","basis_table","bocksteins","degree","even_basis_table","excess","excess_table","generic","lock","multiplication_table","p","p_or_sq","ps","sort_order","unstable","unstable_enabled","0","0","adem_algebra","algebra_trait","bialgebra_trait","combinatorics","field","milnor_algebra","pair_algebra","polynomial_algebra","steenrod_algebra","AdemAlgebra","AdemAlgebraT","AdemBasisElement","Bockstein","P","PorBockstein","a_multiply","adem_algebra","adem_algebra","adem_basis_element_excess_sort_order","adem_basis_element_length_sort_order","basis_element_from_index","basis_element_to_index","basis_element_to_index_map","basis_element_to_string","basis_table","beps_pn","bocksteins","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_basis","coproduct","decompose","decompose_basis_element","decompose_basis_element_2","decompose_basis_element_generic","default_filtration_one_products","degree","deref","deref","deref","deref_mut","deref_mut","deref_mut","dimension","dimension_unstable","drop","drop","drop","eq","even_basis_table","excess","excess_table","finalize_element","fmt","fmt","fmt","fmt","from","from","from","generate_basis2","generate_basis_element_to_index_map","generate_basis_even","generate_basis_even_degreen","generate_basis_generic","generate_basis_generic_degreen","generate_excess_table","generate_multiplication_table_2","generate_multiplication_table_2_step","generate_multiplication_table_generic","generate_multiplication_table_generic_step","generating_relations","generator_to_string","generators","generic","hash","init","init","init","into","into","into","iter_filtered","iter_full","json_from_basis","json_to_basis","lock","magic","make_mono_admissible","make_mono_admissible_2","make_mono_admissible_generic","multiplication_table","multiply","multiply_basis_elements","multiply_basis_elements_unstable","new","new_pair_element","p","p_or_sq","prefix","prime","ps","q","shift_vec","sigma_multiply_basis","sort_order","string_to_generator","tail_of_basis_element_to_index","to_owned","to_string","to_string","try_basis_element_to_index","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unstable","unstable_enabled","0","0","Algebra","GeneratedAlgebra","JsonAlgebra","basis_element_to_string","compute_basis","decompose_basis_element","default_filtration_one_products","default_filtration_one_products","dimension","element_to_string","element_to_string","generating_relations","generator_to_string","generator_to_string","generators","json_from_basis","json_to_basis","magic","magic","multiply_basis_element_by_element","multiply_basis_element_by_element","multiply_basis_elements","multiply_element_by_basis_element","multiply_element_by_basis_element","multiply_element_by_element","multiply_element_by_element","prefix","prime","string_to_generator","Bialgebra","coproduct","decompose","MAX_XI_TAU","PartitionIterator","TAU_DEGREES","TruncatedPolynomialMonomialBasis","XI_DEGREES","add_gens_and_calculate_parts","adem_relation_coefficient","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","gen_deg_idx_to_internal_idx","gen_degrees","generators","generators_up_to_degree","gens","inadmissible_pairs","init","init","initial","internal_idx_to_gen_deg","into","into","into_iter","new","new","next","p","partition","parts","parts","parts","parts_by_max","remaining","search","tau_degrees","try_from","try_from","try_into","try_into","type_id","type_id","xi_degrees","Field","basis_element_to_string","borrow","borrow_mut","compute_basis","coproduct","decompose","default_filtration_one_products","deref","deref_mut","dimension","drop","element_to_string","fmt","from","init","into","multiply_basis_elements","new","prime","prime","to_string","try_from","try_into","type_id","M","Matrix2D","MilnorAlgebra","MilnorAlgebraT","MilnorBasisElement","MilnorProfile","PPart","PPartAllocation","PPartEntry","PPartMultiplier","QPart","a_multiply","ans","basis_element_from_index","basis_element_to_index","basis_element_to_index_map","basis_element_to_string","basis_table","beps_pn","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_into","cols","cols","compute_basis","compute_ppart","compute_qpart","coproduct","decompose","decompose_basis_element","decompose_basis_element_ppart","decompose_basis_element_qpart","default","default","default","default","default_filtration_one_products","degree","degree","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diag_num","diagonal","diagonal","dimension","drop","drop","drop","drop","drop","drop","drop","eq","finalize_element","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_p","generate_basis_2","generate_basis_generic","generating_relations","generator_to_string","generators","generic","generic","hash","increment_p_part","index","index_mut","init","init","init","init","init","init","init","init","inner","into","into","into","into","into","into","into","into_allocation","into_iter","is_trivial","json_from_basis","json_to_basis","lock","m","magic","milnor_algebra","multiply","multiply_basis_by_element_with_allocation","multiply_basis_elements","multiply_element_by_basis_with_allocation","multiply_elements_with_allocation","multiply_qpart","multiply_with_allocation","new","new_from_allocation","new_pair_element","next","next_val","p","p","p_part","p_part","p_part","ppart_table","prefix","prime","prime","profile","q","q_part","q_part","q_part","qpart_table","r","reset","rows","sigma_multiply_basis","string_to_generator","to_owned","to_owned","to_string","to_string","to_string","truncated","try_basis_element_to_index","try_beps_pn","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","with_capacity","with_capacity","AY_CACHE","Element","MilnorPairElement","PairAlgebra","TWO","a_multiply","a_y_cached","a_y_inner","borrow","borrow_mut","degree","deref","deref_mut","drop","finalize_element","finalize_element","from","init","into","new_pair_element","ones","sigma_multiply","sigma_multiply","sigma_multiply_basis","sub","try_from","try_into","twos","type_id","unsub","ys","PolynomialAlgebra","PolynomialAlgebraMonomial","PolynomialAlgebraTableEntry","basis_table","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compute_basis_step","compute_basis_step","compute_generating_set","default","degree","deref","deref","deref_mut","deref_mut","drop","drop","eq","ext","exterior_generators_in_degree","exterior_monomials","fmt","fmt","frobenius_monomial","frobenius_monomial","frobenius_on_generator","from","from","hash","index_to_monomial","index_to_monomial","index_to_monomial","init","init","into","into","max_computed_degree","max_computed_degree","min_degree","min_degree","monomial_to_index","monomial_to_index","monomial_to_index","multiply_monomial_by_polynomial","multiply_monomial_by_polynomial","multiply_monomials","multiply_monomials","multiply_polynomial_by_monomial","multiply_polynomial_by_monomial","multiply_polynomials","multiply_polynomials","ne","new","new","poly","polynomial_generators_in_degree","polynomial_monomials","prime","repr_ext_generator","repr_poly_generator","set_monomial_degree","set_monomial_degree","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","valid","Adem","AdemAlgebra","AlgebraSpec","AlgebraType","BorrowAdem","BorrowMilnor","Milnor","MilnorAlgebra","MilnorProfileOption","SteenrodAlgebra","SteenrodAlgebraBorrow","SteenrodAlgebraT","a_multiply","algebra","basis_element_to_string","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_basis","coproduct","decompose","decompose_basis_element","default_filtration_one_products","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","dimension","dispatch_steenrod","drop","drop","drop","drop","drop","element_to_string","eq","finalize_element","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_json","from_str","generating_relations","generator_to_string","generators","init","init","init","init","init","into","into","into","into","into","json_from_basis","json_to_basis","magic","multiply_basis_element_by_element","multiply_basis_elements","multiply_element_by_basis_element","multiply_element_by_element","new","new_pair_element","p","p_part","prefix","prime","profile","q_part","sigma_multiply","sigma_multiply_basis","steenrod_algebra","steenrod_algebra","string_to_generator","to_json","to_owned","to_string","to_string","truncated","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","adem_plist","adem_q","adem_to_milnor","adem_to_milnor_on_basis","milnor_to_adem","milnor_to_adem_on_basis","milnor_to_adem_on_basis_2","milnor_to_adem_on_basis_generic","MAX_XI_TAU","PartitionIterator","TruncatedPolynomialMonomialBasis","adem_relation_coefficient","gen_degrees","gens","inadmissible_pairs","initial","p","partition","parts","parts","parts_by_max","remaining","tau_degrees","xi_degrees","Field","prime","M","MilnorAlgebra","MilnorAlgebraT","MilnorBasisElement","MilnorProfile","PPart","PPartAllocation","PPartEntry","PPartMultiplier","QPart","ans","basis_element_to_index_map","basis_table","cols","degree","degree","diag_num","diagonal","diagonal","generic","init","lock","m","milnor_algebra","p","p","p_part","p_part","p_part","ppart_table","profile","q_part","q_part","q_part","qpart_table","r","rows","truncated","Algebra","Algebra","BCp","BoundedModule","Dickson2","FDModule","FDModule","FPModule","FPModule","FiniteModule","FreeModule","FreeUnstableModule","HomModule","KFpn","Module","ModuleFailedRelationError","OperationGeneratorPair","PolynomialAlgebraModule","QuotientModule","RealProjectiveSpace","RealProjectiveSpace","SteenrodModule","SumModule","TensorModule","TruncatedModule","ZeroModule","act_on_basis","action_table","action_table_field","action_table_field","action_table_field","actions","algebra","algebra","algebra","algebra","algebra","algebra","algebra","algebra","algebra","algebra","algebra","basis_element_to_opgen","basis_element_to_opgen","basis_element_to_string","basis_list","basis_table_field","basis_table_field","basis_table_field","bcp","block_structure","block_structures","block_structures","block_structures","bockstein_exterior_generator_to_monomial","bockstein_polynomial_generator_to_monomial","bockstein_table","bockstein_table_field","bockstein_table_field","bounded_module","clear_bottom","dickson2","dimension","exterior_monomials_field","exterior_monomials_field","exterior_monomials_field","finite_dimensional_module","finite_module","finitely_presented_module","free_module","free_unstable_module","frobenius_table","gen_deg_idx_to_internal_idx","gen_deg_idx_to_internal_idx","gen_names","gen_names","gen_names","generator_degree","generator_index","generator_to_index","generator_to_index","generators","graded_dimension","hom_module","homomorphism","index_table","inverse_frobenius_table","kfpn","left","map","max","max_computed_degree","max_degree","min","min_degree","min_degree","min_degree","min_degree","min_degree","module","module","module_trait","modules","n","n","name","name","name","name","num_gens","num_gens","operation_degree","operation_index","polynomial_algebra_module","polynomial_monomials_field","polynomial_monomials_field","polynomial_monomials_field","quadratic_terms_field","quotient_module","relation","relations","right","rpn","source","sq_exterior_generator_to_monomial","sq_polynomial_generator_to_monomial","subspaces","sum_module","target","tensor_module","truncated_module","truncation","value","zero_module","zero_module","0","0","0","BCp","action_table","action_table_field","algebra","algebra","basis_table","basis_table_field","bockstein_exterior_generator_to_monomial","bockstein_polynomial_generator_to_monomial","bockstein_table","bockstein_table_field","borrow","borrow_mut","compute_generating_set","deref","deref_mut","drop","exterior_generators_in_degree","exterior_monomials","exterior_monomials_field","fmt","frobenius_on_generator","from","init","into","is_two_times_power_of_p","new","polynomial_generators_in_degree","polynomial_monomials","polynomial_monomials_field","prime","repr_ext_generator","repr_poly_generator","sq_exterior_generator_to_monomial","sq_polynomial_generator_to_monomial","to_string","try_from","try_into","type_id","BlockStart","BlockStructure","GeneratorBasisEltPair","add_block","basis_element_to_block_idx","basis_index","block_size","block_start_index","block_starts","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","generator_basis_elt_to_index","generator_degree","generator_index","generator_to_block","index_to_generator_basis_elt","init","init","init","into","into","into","new","total_dimension","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BoundedModule","max_degree","to_fd_module","to_fd_module","total_dimension","total_dimension","Dickson2","action_table","action_table_field","adem_algebra","algebra","algebra","basis_table","basis_table_field","bockstein_exterior_generator_to_monomial","bockstein_polynomial_generator_to_monomial","bockstein_table","borrow","borrow_mut","compute_generating_set","deref","deref_mut","drop","exterior_generators_in_degree","exterior_monomials","exterior_monomials_field","fmt","frobenius_on_generator","from","init","into","klfrob","n","new","polynomial_generators_in_degree","polynomial_monomials","polynomial_monomials_field","prime","quadratic_terms","quadratic_terms_field","repr_ext_generator","repr_poly_generator","sq_exterior_generator_to_monomial","sq_polynomial_generator_to_monomial","to_string","try_from","try_into","type_id","FiniteDimensionalModule","act_on_basis","act_on_basis_borrow","action","action_mut","actions","actions_to_json","add_generator","algebra","algebra","allocate_actions","basis_element_to_string","borrow","borrow_mut","borrow_output","check_validity","clone","clone_into","compute_basis","deref","deref_mut","dimension","drop","eq","extend_actions","fmt","from","from_json","gen_names","gens_to_json","graded_dimension","init","into","is_unit","max_computed_degree","max_degree","min_degree","minimal_actions_to_json","module_gens_from_json","name","new","parse_action","parse_element","set_action","set_action_vector","set_basis_element_name","string_to_basis_element","take_element","test_equal","to_json","to_minimal_json","to_owned","to_string","try_from","try_into","type_id","zero_module","FDModule","FPModule","FiniteModule","RealProjectiveSpace","act","act_by_element","act_on_basis","act_on_basis_borrow","algebra","as_fd_module","as_fp_module","as_real_projective_space","basis_element_to_string","borrow","borrow_mut","borrow_output","compute_basis","deref","deref_mut","dimension","dispatch","drop","eq","fmt","fp_idx_to_gen_idx","from","from","from","from","from_json","gen_idx_to_fp_idx","generators","init","into","into_fd_module","into_fp_module","into_real_projective_space","is_fd_module","is_fp_module","is_real_projective_space","is_unit","max_computed_degree","max_degree","min_degree","ne","prime","to_json","to_string","try_from","try_into","type_","type_id","zero_module","0","0","0","FPMIndexTable","FinitelyPresentedModule","act_on_basis","add_generators","add_relations","algebra","basis_element_to_string","borrow","borrow","borrow_mut","borrow_mut","compute_basis","deref","deref","deref_mut","deref_mut","dimension","drop","drop","eq","fmt","fp_idx_to_gen_idx","fp_idx_to_gen_idx","fp_idx_to_gen_idx","from","from","from_json","gen_idx_to_fp_idx","gen_idx_to_fp_idx","gen_idx_to_fp_idx","generators","generators","generators","index_table","init","init","into","into","map","max_computed_degree","min_degree","min_degree","module_gens_from_json","name","new","relations","relations_to_json","to_json","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","FreeModule","OperationGeneratorPair","act","act_on_basis","add_generators","algebra","algebra","basis_element_to_opgen","basis_element_to_string","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","dimension","drop","drop","element_to_json","element_to_string_pretty","extend_by_zero","extend_table_entries","fmt","fmt","from","from","gen_deg_idx_to_internal_idx","gen_names","gen_names","generator_degree","generator_index","generator_offset","generator_to_index","generator_to_internal_index","get_degrees_with_gens","get_max_generator_degree","index_to_op_gen","init","init","internal_generator_offset","into","into","iter_slices","max_computed_degree","max_table_degree","min_degree","min_degree","name","new","num_gens","number_of_gens_in_degree","operation_degree","operation_generator_pair_to_idx","operation_generator_to_index","operation_index","slice_vector","slice_vector_mut","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","FreeUnstableModule","act_on_basis","add_generators","adem_algebra","algebra","algebra","basis_element_to_opgen","basis_element_to_string","borrow","borrow_mut","deref","deref_mut","dimension","drop","element_to_json","extend_by_zero","extend_table_entries","fmt","from","gen_deg_idx_to_internal_idx","gen_names","generator_offset","generator_to_index","get_degrees_with_gens","get_max_generator_degree","index_to_op_gen","init","into","max_computed_degree","max_computed_degree","max_table_degree","min_degree","min_degree","name","new","num_gens","number_of_gens_in_degree","operation_generator_pair_to_idx","operation_generator_to_index","to_string","try_from","try_into","type_id","HomModule","act_on_basis","algebra","algebra","basis_element_to_string","block_structures","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","element_to_homomorphism","evaluate_basis_map_on_element","fmt","from","init","into","max_computed_degree","min_degree","new","source","source","target","target","to_string","try_from","try_into","type_id","BoundedModuleHomomorphism","CUSTOM_QI","CompositionHomomorphism","FPModuleHomomorphism","FPModuleT","FiniteModuleHomomorphism","FreeModuleHomomorphism","GenericZeroHomomorphism","HomPullback","IdentityHomomorphism","ModuleHomomorphism","QuotientHomomorphism","QuotientHomomorphismSource","Source","Target","TruncatedHomomorphism","TruncatedHomomorphismSource","ZeroHomomorphism","apply","apply_quasi_inverse","apply_to_basis_element","auxiliary_data","bounded_module_homomorphism","composition_homomorphism","compute_auxiliary_data_through_degree","degree_shift","degree_shift","degree_shift","degree_shift","f","f","f","f","finite_module_homomorphism","fp_idx_to_gen_idx","fp_module_homomorphism","free_module_homomorphism","gen_idx_to_fp_idx","generators","generic_zero_homomorphism","get_matrix","hom_pullback","identity_homomorphism","image","images","images","images","kernel","kernels","kernels","kernels","left","map","map","matrices","min_degree","min_degree","outputs","prime","quasi_inverse","quasi_inverses","quasi_inverses","quasi_inverses","quotient_homomorphism","right","s","s","s","s","source","source","source","source","source","source","source","t","t","t","t","target","target","target","target","target","target","truncated_homomorphism","underlying_map","zero_homomorphism","BoundedModuleHomomorphism","apply_to_basis_element","borrow","borrow_mut","clone","clone_into","compute_auxiliary_data_through_degree","degree_shift","degree_shift","deref","deref_mut","drop","from","from","from_matrices","identity_homomorphism","image","images","init","into","kernel","kernels","matrices","new","quasi_inverse","quasi_inverses","replace_source","replace_target","source","source","target","target","to_owned","try_from","try_into","type_id","zero_homomorphism","CompositionHomomorphism","apply_to_basis_element","borrow","borrow_mut","degree_shift","deref","deref_mut","drop","from","init","into","left","new","right","source","target","try_from","try_into","type_id","FD","FMHI","FP","FiniteModuleHomomorphism","RP","apply_to_basis_element","borrow","borrow","borrow_mut","borrow_mut","compute_auxiliary_data_through_degree","degree_shift","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from","from","identity_homomorphism","image","init","init","into","into","kernel","map","quasi_inverse","source","source","target","target","try_from","try_from","try_into","try_into","type_id","type_id","zero_homomorphism","0","0","0","FPModuleHomomorphism","FPModuleT","apply_to_basis_element","borrow","borrow_mut","degree_shift","deref","deref_mut","drop","fp_idx_to_gen_idx","from","gen_idx_to_fp_idx","generators","identity_homomorphism","init","into","source","source","target","try_from","try_into","type_id","underlying_map","zero_homomorphism","FreeModuleHomomorphism","add_generators_from_big_vector","add_generators_from_matrix_rows","add_generators_from_rows","apply_to_basis_element","apply_to_generator","borrow","borrow_mut","compose","compute_auxiliary_data_through_degree","degree_shift","degree_shift","degree_shift","deref","deref_mut","drop","extend_by_zero","from","hom_k","image","images","init","into","kernel","kernels","min_degree","min_degree","new","next_degree","output","outputs","quasi_inverse","quasi_inverses","set_image","set_kernel","set_quasi_inverse","source","source","target","target","try_from","try_into","type_id","GenericZeroHomomorphism","apply_to_basis_element","borrow","borrow_mut","degree_shift","degree_shift","deref","deref_mut","drop","from","init","into","new","source","source","target","target","try_from","try_into","type_id","zero_homomorphism","HomPullback","apply_to_basis_element","borrow","borrow_mut","compute_auxiliary_data_through_degree","degree_shift","deref","deref_mut","drop","from","image","images","init","into","kernel","kernels","map","min_degree","new","quasi_inverse","quasi_inverses","source","source","target","target","try_from","try_into","type_id","QuotientHomomorphism","QuotientHomomorphismSource","apply_to_basis_element","apply_to_basis_element","borrow","borrow","borrow_mut","borrow_mut","degree_shift","degree_shift","deref","deref","deref_mut","deref_mut","drop","drop","f","f","from","from","init","init","into","into","new","new","s","s","source","source","t","t","target","target","try_from","try_from","try_into","try_into","type_id","type_id","TruncatedHomomorphism","TruncatedHomomorphismSource","apply_to_basis_element","apply_to_basis_element","borrow","borrow","borrow_mut","borrow_mut","compute_auxiliary_data_through_degree","compute_auxiliary_data_through_degree","degree_shift","degree_shift","deref","deref","deref_mut","deref_mut","drop","drop","f","f","from","from","image","image","init","init","into","into","kernel","kernel","new","new","quasi_inverse","quasi_inverse","s","s","source","source","t","t","target","target","truncated_degree","truncated_degree","try_from","try_from","try_into","try_into","type_id","type_id","KFpn","action_on_generator_helper","action_table","action_table_field","adem_algebra","algebra","algebra","basis_table","basis_table_field","bockstein_exterior_generator_to_monomial","bockstein_exterior_generator_to_polynomial","bockstein_polynomial_generator_to_monomial","bockstein_polynomial_generator_to_polynomial","bockstein_table","bockstein_table_field","borrow","borrow_mut","compute_generating_set","deref","deref_mut","drop","exterior_generators_in_degree","exterior_monomials","exterior_monomials_field","fmt","frobenius_on_generator","frobenius_table","from","init","into","inverse_frobenius_table","n","new","polynomial_generators_in_degree","polynomial_monomials","polynomial_monomials_field","prime","repr_ext_generator","repr_poly_generator","sq_exterior_generator_to_monomial","sq_exterior_generator_to_polynomial","sq_polynomial_generator_to_monomial","sq_polynomial_generator_to_polynomial","to_string","try_from","try_into","type_id","Algebra","Module","ModuleFailedRelationError","act","act","act_by_element","act_by_element","act_by_element_on_basis","act_by_element_on_basis","act_on_basis","act_on_basis_borrow","act_on_basis_borrow","algebra","basis_element_to_string","basis_string_list","basis_string_list","borrow","borrow_mut","borrow_output","borrow_output","check_relation","check_relation","check_relations","check_relations","compute_basis","compute_basis","deref","deref_mut","dimension","drop","element_to_string","element_to_string","fmt","fmt","from","init","into","is_unit","is_unit","max_computed_degree","min_degree","prime","prime","relation","test_relations","test_relations","to_string","truncate_to_fd_module","truncate_to_fd_module","try_from","try_into","type_id","value","Algebra","PolynomialAlgebraModule","action_table","algebra","bockstein_exterior_generator_to_monomial","bockstein_exterior_generator_to_polynomial","bockstein_exterior_generator_to_polynomial","bockstein_monomial_to_polynomial","bockstein_monomial_to_polynomial","bockstein_on_basis","bockstein_on_basis","bockstein_polynomial_generator_to_monomial","bockstein_polynomial_generator_to_polynomial","bockstein_polynomial_generator_to_polynomial","bockstein_polynomial_to_polynomial","bockstein_polynomial_to_polynomial","bockstein_table","bottom_truncation","bottom_truncation","compute_action_table","compute_action_table","compute_action_table_ext_case","compute_action_table_ext_case","compute_action_table_poly_case","compute_action_table_poly_case","compute_bockstein_table","compute_bockstein_table","sq_exterior_generator_to_monomial","sq_exterior_generator_to_polynomial","sq_exterior_generator_to_polynomial","sq_monomial_to_polynomial","sq_monomial_to_polynomial","sq_on_basis","sq_on_basis","sq_polynomial_generator_to_monomial","sq_polynomial_generator_to_polynomial","sq_polynomial_generator_to_polynomial","sq_polynomial_to_polynomial","sq_polynomial_to_polynomial","top_truncation","top_truncation","QuotientModule","act_on_basis","act_on_original_basis","algebra","basis_element_to_string","basis_list","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","flush","fmt","from","init","into","max_computed_degree","max_degree","min_degree","module","new","old_basis_to_new","quotient","quotient_all","quotient_basis_elements","quotient_vectors","reduce","subspaces","to_string","try_from","try_into","type_id","RPSpec","RealProjectiveSpace","act_on_basis","algebra","algebra","basis_element_to_string","borrow","borrow","borrow_mut","borrow_mut","clear_bottom","clear_bottom","coef_adem","coef_milnor","deref","deref","deref_mut","deref_mut","deserialize","dimension","drop","drop","eq","fmt","fmt","from","from","from_json","init","init","into","into","max","max","max_computed_degree","max_degree","min","min","min_degree","new","to_json","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","SumModule","act_on_basis","algebra","algebra","basis_element_to_string","block_structures","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","fmt","from","get_module_num","init","into","max_computed_degree","max_degree","min_degree","min_degree","modules","new","offset","to_string","try_from","try_into","type_id","zero_module","TensorModule","act","act_helper","act_on_basis","algebra","basis_element_to_string","block_structures","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","fmt","from","init","into","left","max_computed_degree","max_degree","min_degree","new","offset","right","seek_module_num","to_string","try_from","try_into","type_id","zero_module","TruncatedModule","act_on_basis","algebra","basis_element_to_string","borrow","borrow_mut","compute_basis","deref","deref_mut","dimension","drop","fmt","from","init","into","max_computed_degree","max_degree","min_degree","module","new","to_string","truncation","try_from","try_into","type_id","ZeroModule","zero_module","Element","MilnorPairElement","PairAlgebra","a_multiply","degree","new_pair_element","ones","sigma_multiply_basis","twos","ys","DegreeError","UnknownBasisElementError","bockstein_or_sq_to_adem_basis_elt","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","evaluate_algebra_adem","evaluate_algebra_milnor","evaluate_algebra_tree","evaluate_algebra_tree_helper","evaluate_basis_element","evaluate_module","evaluate_module_basis_element","evaluate_module_tree","evaluate_module_tree_helper","evaluate_p_or_b_list","fmt","fmt","fmt","fmt","from","from","init","init","into","into","name","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","AList","Act","AlgebraBasisElt","AlgebraParseNode","BasisElt","Bockstein","BocksteinOrSq","ModuleBasisElt","ModuleParseNode","P","PList","ParseError","Product","Q","Scalar","Sq","Sum","Sum","algebra_expr","algebra_factor","algebra_generator","algebra_parens","algebra_term","bockstein_b","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comma_separated_integer_list","comma_separated_sequence","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","digits","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","info","init","init","init","init","init","into","into","into","into","into","module_expr","module_factor","module_generator","module_parens","module_term","parse_algebra","parse_module","scalar","space_separated_bockstein_or_sq_list","space_separated_bockstein_or_sq_sequence","space_separated_integer_list","space_separated_sequence","sq_digits","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","1","1","0","0","0","0","1","1"],"q":["algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::SteenrodAlgebra","","algebra::SteenrodAlgebraBorrow","","algebra::adem_algebra","","","","","","","","","","","","","","","","","","","","","","","algebra::adem_algebra::PorBockstein","","algebra::algebra","","","","","","","","","algebra::algebra::adem_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::adem_algebra::PorBockstein","","algebra::algebra::algebra_trait","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::bialgebra_trait","","","algebra::algebra::combinatorics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::field","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::milnor_algebraalgebra::algebra::pair_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::polynomial_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::steenrod_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::algebra::steenrod_algebra::SteenrodAlgebra","","algebra::algebra::steenrod_algebra::SteenrodAlgebraBorrow","","algebra::change_of_basis","","","","","","","","algebra::combinatorics","","","","","","","","","","","","","","","","algebra::field","","algebra::milnor_algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::FiniteModule","","","algebra::module::bcp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::block_structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::bounded_module","","","","","","algebra::module::dickson2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::finite_dimensional_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::finite_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::finite_module::FiniteModule","","","algebra::module::finitely_presented_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::free_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::free_unstable_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::hom_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::bounded_module_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::composition_homomorphism","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::finite_module_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::finite_module_homomorphism::FMHI","","","algebra::module::homomorphism::fp_module_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::free_module_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::generic_zero_homomorphism","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::hom_pullback","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::quotient_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::homomorphism::truncated_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::kfpn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::module_trait","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::polynomial_algebra_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::quotient_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::rpn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::sum_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::tensor_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::truncated_module","","","","","","","","","","","","","","","","","","","","","","","","","algebra::module::zero_module","","algebra::pair_algebra","","","","","","","","","","algebra::steenrod_evaluator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::steenrod_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algebra::steenrod_parser::AlgebraBasisElt","","","","algebra::steenrod_parser::AlgebraParseNode","","","","","","algebra::steenrod_parser::BocksteinOrSq","algebra::steenrod_parser::ModuleParseNode","","","",""],"d":["","An <code>Algebra</code> implementing the Steenrod algebra, using the …","","An algebra that can be viewed as an Adem algebra.","A graded algebra over $\\\\mathbb{F}_p$.","","An <code>Algebra</code> equipped with a coproduct operation that makes …","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","An <code>Algebra</code> equipped with a distinguished presentation.","","","","","","","","","","","","The Steenrod algebra using the Adem basis.","","Traits describing algebras, and implementations thereof …","degree -&gt; AdemBasisElement -&gt; index","","Converts a basis element into a string for display.","","degree -&gt; index -&gt; AdemBasisElement","","","","Computes basis elements up to and including <code>degree</code>.","","Computes a coproduct $\\\\Delta(x)$, expressed as","Decomposes an element of the algebra into a product of …","Decomposes an element into generators.","","Returns the dimension of the algebra in degree <code>degree</code>.","","","","","","","Finite fields over a prime.","","Returns relations that the algebra wants checked to ensure …","Return generators in <code>degree</code>.","","","","Converts a basis element into JSON.","Parses a basis element from JSON.","","","","","","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","Computes the product <code>r * s</code> of two basis elements, and adds …","","","This implements the notion of a split pair algebra in the …","","","","","A name for the algebra to use in serialization operations.","Returns the prime the algebra is over.","","","","","","","","","","","Parse <code>input</code> into a generator.","","","","","","","","An <code>Algebra</code> implementing the Steenrod algebra, using the …","An algebra that can be viewed as an Adem algebra.","An Adem basis element for the Steenrod algebra.","","","A Steenrod power $P^i$, or a Bockstein $\\\\beta^\\\\varepsilon$.","","degree -&gt; AdemBasisElement -&gt; index","degree -&gt; index -&gt; AdemBasisElement","A bitset of which $\\\\beta$ Bocksteins are in the element’…","The degree of the element.","","The excess (i.e., distance from this element being …","","","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","","Whether to denote the generators as powers $P^i$ or …","A list of which Steenrod powers are in the element’s …","","","","","","The Steenrod algebra using the Adem basis.","","","","Finite fields over a prime.","","This implements the notion of a split pair algebra in the …","","","An <code>Algebra</code> implementing the Steenrod algebra, using the …","An algebra that can be viewed as an Adem algebra.","An Adem basis element for the Steenrod algebra.","","","A Steenrod power $P^i$, or a Bockstein $\\\\beta^\\\\varepsilon$.","","","","","","","","degree -&gt; AdemBasisElement -&gt; index","","degree -&gt; index -&gt; AdemBasisElement","","A bitset of which $\\\\beta$ Bocksteins are in the element’…","","","","","","","","","","","","","","","","The degree of the element.","","","","","","","","","","","","","","The excess (i.e., distance from this element being …","","","","","","","","","","","","","","","","","","","","This function expresses $Sq^x$ (current) in terms of the …","We return Adem relations $b^2 = 0$, $P^i P^j = \\\\cdots$ for …","","","","","","","","","","","Returns an iterator over the element’s decomposition.","","","","","","","Reduce a Steenrod monomial at the prime 2.","","degree -&gt; first square -&gt; admissible sequence idx -&gt; result","","","","Constructs a new <code>AdemAlgebra</code>.","","","Whether to denote the generators as powers $P^i$ or …","","","A list of which Steenrod powers are in the element’s …","","Shifts a <code>Vec</code>’s elements back by <code>offset</code>.","","","","","","","","","","","","","","","","","","","","","","A graded algebra over $\\\\mathbb{F}_p$.","An <code>Algebra</code> equipped with a distinguished presentation.","","Converts a basis element into a string for display.","Computes basis elements up to and including <code>degree</code>.","Decomposes an element into generators.","Returns a list of filtration-one elements in $Ext(k, k)$.","Returns a list of filtration-one elements in $Ext(k, k)$.","Returns the dimension of the algebra in degree <code>degree</code>.","Converts a general element into a string for display.","Converts a general element into a string for display.","Returns relations that the algebra wants checked to ensure …","Returns the name of a generator.","Returns the name of a generator.","Return generators in <code>degree</code>.","Converts a basis element into JSON.","Parses a basis element from JSON.","A magic constant used to identify the algebra in save …","A magic constant used to identify the algebra in save …","Computes the product <code>r * s</code> of a basis element <code>r</code> and a …","Computes the product <code>r * s</code> of a basis element <code>r</code> and a …","Computes the product <code>r * s</code> of two basis elements, and adds …","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of a general element <code>r</code> and a …","Computes the product <code>r * s</code> of two general elements, and …","Computes the product <code>r * s</code> of two general elements, and …","A name for the algebra to use in serialization operations.","Returns the prime the algebra is over.","Parse <code>input</code> into a generator.","An <code>Algebra</code> equipped with a coproduct operation that makes …","Computes a coproduct $\\\\Delta(x)$, expressed as","Decomposes an element of the algebra into a product of …","","","If p is the nth prime, then <code>TAU_DEGREES[n][i]</code> is the …","","If p is the nth prime, then <code>XI_DEGREES[n][i - 1]</code> is the …","","","","","","","","","","","","","","","","index ==&gt; degree","","","degree =&gt; (first_index, number_of_gens)","","","","","","","","","","","","","","","","","degree =&gt; max_part =&gt; list of partitions with maximum part …","","","","","","","","","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","","","","","","","","","","","","","","","","","","Returns a new <code>Field</code> over the given prime <code>p</code>.","","","","","","","","","","","","","","The parts of a PPartMultiplier that involve heap …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assert that <code>elt</code> is in the image of the differential. Drop …","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the new element is not within the bounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This compute the first l &gt; k such that (sum + l) choose l …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","We have a matrix of the form | s₁  s₂  s₃ …","","This creates a PPartAllocation with enough capacity to …","","An element in the cohomological degree zero part of the …","","A lift of an algebra to a split pair algebra. See module …","","Compute $A(r, s)$ and write the result to <code>result</code>.","Compute $A(Sq(R), Y_{k, l})$ where $a = Sq(R)$. This …","Actually computes $A(a, Y_{k, l})$ and returns the result.","","","","","","","Assert that <code>elt</code> is in the image of the differential. Drop …","Assert that <code>elt</code> is in the image of the differential. Drop …","","","","Create a new zero element in the given degree.","","Same as <code>PairAlgebra::sigma_multiply_basis</code> but with …","Same as <code>PairAlgebra::sigma_multiply_basis</code> but with …","Given $r, s \\\\in \\\\pi_0(A)$, compute $\\\\sigma(r) \\\\sigma(s)$ …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","index ==&gt; degree","degree =&gt; (first_index, number_of_gens)","","","","","","","degree =&gt; max_part =&gt; list of partitions with maximum part …","","","","$\\\\mathbb{F}_p$, viewed as an <code>Algebra</code> over itself.","","","","","","","","The parts of a PPartMultiplier that involve heap …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A free module.","","","","","","","","Given a module <code>module</code>, this is the quotient of <code>module</code> by a …","This is $\\\\mathbb{RP}_{\\\\mathrm{min}}^{\\\\mathrm{max}}$. The …","","","","","A module M where we quotient out everything above degree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","degree -&gt; internal index of first generator in degree","","","","","","","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","","","","","","","","","","","","The maximum <code>t</code> for which the module is defined at <code>t</code>.","<code>max_degree</code> is the a degree such that if t &gt; <code>max_degree</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>max_degree</code> is the a degree such that if t &gt; <code>max_degree</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function will panic if you call it with input such …","This function will panic if you call it with input such …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether act_on_basis_borrow is available.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A free module.","","","","","","","","","","","","","","","","","","","","","","","A version of element_to_string that names the generator as …","","","","","","","degree -&gt; internal index of first generator in degree","","","","","Given a generator <code>(gen_deg, gen_idx)</code>, find the first index …","degree -&gt; internal_gen_idx -&gt; the offset of the generator …","","","","","","","Given a generator <code>(gen_deg, gen_idx)</code>, find the first index …","","","Given an element in a degree, iterate through the slices …","","","","","","","","","","","","","Given a vector that represents an element in degree <code>degree</code>…","Given a vector that represents an element in degree <code>degree</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A composition of two module homomorphisms. This has a more …","","","","","","Given a map <code>map</code>: A -&gt; B and <code>source</code> = Hom(B, X), <code>target</code> = …","","Each <code>ModuleHomomorphism</code> may come with auxiliary data, …","","","","","","","","","","Calling this function when …","Compute the auxiliary data associated to the homomorphism …","","","","","","degree shift, such that ouptut_degree = input_degree - …","","","","","","","","","","","","","Write the matrix of the homomorphism at input degree <code>degree</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function replaces the source of the …","See <code>replace_source</code>","","","","","","","","","","A composition of two module homomorphisms. This has a more …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A MatrixSlice will do but there is no applicaiton of this …","","","","","","","","","","degree shift, such that ouptut_degree = input_degree - …","","","","","","Given f: M -&gt; N, compute the dual f*: Hom(N, k) -&gt; Hom(M, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a map <code>map</code>: A -&gt; B and <code>source</code> = Hom(B, X), <code>target</code> = …he length of <code>input</code> is at most the dimension of the module …","The length of <code>input</code> is at most the dimension of the module …","","","","","","Returns a borrow of the value of the corresponding action …","Returns a borrow of the value of the corresponding action …","","","","","","","Whether act_on_basis_borrow is available.","Whether act_on_basis_borrow is available.","op1(op2(x)) - (op1*op2)(x)","op1(op2(x)) - (op1*op2)(x)","Input: degree through which to check. Output: Vec of …","Input: degree through which to check. Output: Vec of …","","","","","","","","","","","","","","Whether this is the unit module.","Whether this is the unit module.","The maximum <code>t</code> for which the module is defined at <code>t</code>.","","","","","","","","This truncates the module to <code>max_dim</code> and represents it as …","This truncates the module to <code>max_dim</code> and represents it as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a module <code>module</code>, this is the quotient of <code>module</code> by a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is $\\\\mathbb{RP}_{\\\\mathrm{min}}^{\\\\mathrm{max}}$. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>max_degree</code> is the a degree such that if t &gt; <code>max_degree</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A module M where we quotient out everything above degree …","","","","","","","","","","","","","","","","","","","","","","","","","","","An element in the cohomological degree zero part of the …","","A lift of an algebra to a split pair algebra. See module …","Compute $A(r, s)$ and write the result to <code>result</code>.","","Create a new zero element in the given degree.","","Given $r, s \\\\in \\\\pi_0(A)$, compute $\\\\sigma(r) \\\\sigma(s)$ …i":[1,0,2,0,0,0,0,3,3,0,0,0,1,0,2,0,0,0,0,0,0,0,0,4,0,5,6,7,8,5,6,0,0,7,8,9,9,10,11,7,0,5,5,11,8,8,0,8,10,10,5,6,12,13,13,5,6,0,14,0,12,5,7,5,6,0,11,8,8,6,13,7,8,15,6,6,8,8,5,16,0,0,10,5,5,11,17,18,19,20,0,0,0,21,21,0,4,5,5,22,22,5,22,5,5,5,5,5,22,22,5,5,5,23,24,0,0,0,0,0,0,0,0,0,0,0,0,21,21,0,5,4,5,0,0,5,5,5,5,5,5,22,5,22,21,5,22,21,22,22,5,5,5,5,5,5,5,22,5,22,21,5,22,21,5,5,5,22,21,22,5,22,5,5,5,22,22,21,5,22,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,22,5,22,21,5,22,21,22,22,5,5,5,5,5,5,5,5,5,5,5,5,5,5,22,5,5,22,5,0,5,5,5,5,22,5,22,5,5,22,21,5,22,21,5,22,21,5,5,23,24,0,0,0,7,7,10,7,7,7,7,7,10,10,10,10,13,13,7,7,7,7,7,7,7,7,7,13,7,10,0,9,9,0,0,0,0,0,25,0,25,26,25,26,25,26,25,26,25,26,25,26,25,25,25,25,25,0,25,26,26,25,25,26,26,25,26,26,25,26,25,25,26,25,26,26,0,25,26,25,26,25,26,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,27,0,0,0,0,0,0,0,0,0,0,6,27,6,6,6,6,6,6,28,6,27,29,30,31,32,28,6,27,29,30,31,32,29,30,29,30,30,27,31,6,6,6,6,6,6,6,6,29,30,31,32,6,29,30,28,6,27,29,30,31,32,28,6,27,29,30,31,32,27,27,32,6,28,6,27,29,30,31,32,30,6,6,30,30,31,31,28,6,27,29,30,31,32,30,6,6,6,6,6,6,6,30,6,31,31,28,6,27,29,30,31,32,27,31,28,6,27,29,30,31,32,27,27,28,6,6,6,32,6,14,6,6,6,6,6,6,6,6,27,6,27,27,6,27,28,30,32,6,6,6,27,6,6,28,29,30,6,27,31,27,6,6,29,30,6,30,31,28,6,6,28,6,27,29,30,31,32,28,6,27,29,30,31,32,28,6,27,29,30,31,32,27,31,32,0,33,0,0,0,33,0,0,34,34,34,34,34,34,33,33,34,34,34,33,34,33,33,33,0,34,34,34,34,0,34,0,0,0,8,11,12,11,12,11,11,8,8,8,12,11,11,12,11,12,11,12,11,11,8,8,11,11,8,8,8,11,12,11,8,8,12,11,12,11,12,8,8,8,8,8,8,12,8,8,8,8,8,8,8,8,11,11,12,11,8,8,8,8,8,8,8,11,11,11,12,11,12,11,12,11,1,2,0,0,3,3,1,2,0,0,0,0,2,35,2,3,2,1,36,35,3,2,1,36,35,1,1,2,2,2,2,2,3,2,1,36,35,3,2,1,36,35,36,35,2,0,3,2,1,36,35,2,1,2,2,1,1,36,35,3,2,2,2,1,36,35,2,1,2,2,2,3,2,1,36,35,3,2,1,36,35,2,2,2,2,2,2,2,2,2,35,36,2,2,35,36,2,2,16,2,2,2,1,2,1,36,3,2,1,1,36,35,3,2,1,36,35,3,2,1,36,35,17,18,19,20,0,0,0,0,0,0,0,0,0,0,0,0,25,25,0,26,25,26,25,26,25,26,0,0,0,15,27,0,0,0,0,0,0,0,0,0,27,6,6,27,29,30,27,27,32,6,27,6,32,14,6,27,28,30,32,6,6,28,29,30,6,27,27,28,37,38,0,0,0,0,39,0,39,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,37,38,40,41,42,43,37,38,43,44,45,40,41,46,47,42,48,44,46,37,49,40,41,42,0,0,47,48,50,38,38,38,40,42,0,45,0,37,40,41,42,0,0,0,0,0,42,44,46,43,44,46,51,51,44,46,52,43,0,0,52,42,0,50,52,45,37,53,45,37,52,44,46,48,49,54,0,48,41,42,43,52,44,46,44,46,51,51,0,40,41,42,41,0,55,52,50,0,47,38,38,49,0,47,0,0,54,55,0,56,57,58,59,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,60,60,61,62,62,60,61,60,62,61,60,62,61,60,62,61,60,62,61,60,62,61,60,62,61,60,62,60,61,61,60,60,61,60,62,61,60,62,60,60,61,60,62,61,60,62,61,60,62,0,53,53,53,53,53,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,39,39,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,57,58,59,0,0,52,52,52,52,52,63,52,63,52,52,63,52,63,52,52,63,52,52,52,52,52,63,63,52,52,52,52,63,52,52,52,52,63,52,63,52,52,52,52,52,52,52,52,52,52,52,52,63,52,63,52,63,52,52,0,0,44,44,44,44,44,44,44,44,51,44,51,51,51,44,51,44,51,44,44,51,44,44,44,44,44,51,44,51,44,44,44,51,51,44,44,44,44,44,44,44,51,44,44,51,44,44,44,44,44,44,44,44,44,51,44,44,51,44,44,51,44,44,51,44,51,44,51,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,64,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,64,64,64,64,0,0,64,64,65,66,67,68,69,70,71,0,72,0,0,72,72,0,64,0,73,64,65,66,74,64,65,66,74,75,76,74,65,64,66,66,64,64,65,66,74,0,75,68,69,70,71,64,65,76,77,66,67,74,68,69,70,71,64,65,76,66,67,74,0,77,78,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,79,0,79,0,79,76,79,76,79,76,76,76,79,76,79,76,79,76,79,76,76,76,76,76,79,76,79,76,76,76,76,76,76,76,76,79,76,79,76,79,76,76,80,81,82,0,0,77,77,77,77,77,77,77,72,77,72,72,77,77,77,77,77,77,77,77,77,77,77,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,0,0,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,70,71,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,37,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,55,55,37,37,37,37,37,37,37,37,55,55,37,55,37,37,55,55,55,55,55,37,37,37,37,37,37,55,37,37,55,37,37,55,55,55,55,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,45,45,45,45,45,83,45,83,45,83,0,0,45,83,45,83,83,45,45,83,45,45,83,45,83,45,45,83,45,83,45,83,45,45,45,83,45,45,45,45,45,83,45,83,45,83,45,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,56,33,0,0,33,34,33,34,33,34,34,0,0,0,84,85,84,85,84,85,84,85,84,85,0,0,0,0,0,0,0,0,0,0,84,84,85,85,84,85,84,85,84,85,85,84,85,84,85,84,85,84,85,86,87,0,0,88,89,0,87,0,86,86,0,88,86,88,89,88,87,0,0,0,0,0,0,86,88,87,89,90,86,88,87,89,90,86,88,87,89,86,88,87,89,0,0,86,88,87,89,90,86,88,87,89,90,90,0,86,88,87,89,90,86,88,87,89,90,90,86,88,87,89,90,90,86,88,87,89,90,86,88,87,89,90,0,0,0,0,0,0,0,0,0,0,0,0,0,86,88,87,89,90,86,88,87,89,90,86,88,87,89,90,86,88,87,89,90,91,92,93,94,95,96,97,98,95,96,99,100,101,102,100,101],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ademalgebra",3]],null,null,null,[[["i32",15],["usize",15]],["string",3]],[[],["oncevec",3]],null,null,null,null,[[["i32",15]]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],null,[[["i32",15],["i32",15]],["usize",15]],null,null,null,null,[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[["i32",15],["usize",15]],["option",4,[["usize",15]]]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15]],["vec",3,[["usize",15]]]],null,null,null,[[["i32",15],["usize",15]],["value",4]],[[["value",4]],["result",6]],null,null,null,[[],["milnoralgebra",3]],null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15]]],null,null,null,null,[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[],["str",15]],[[],["validprime",3]],[[],["validprime",3]],null,null,null,[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]]],null,[[],["steenrodalgebraborrow",4]],null,null,[[["str",15]],["iresult",6,[["str",15]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ademalgebra",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],[[],["ademalgebra",3]],[[],["ademalgebra",3]],[[["adembasiselement",3],["adembasiselement",3]],["ordering",4]],[[["adembasiselement",3],["adembasiselement",3]],["ordering",4]],[[["i32",15],["usize",15]],["adembasiselement",3]],[[["adembasiselement",3]],["usize",15]],null,[[["i32",15],["usize",15]],["string",3]],null,[[["u32",15],["u32",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["adembasiselement",3]],[[]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[],["vec",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["i32",15]],["usize",15]],[[["i32",15],["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],null,null,null,[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15],["usize",15]],["fpvector",4]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15],["usize",15]],["fpvector",4]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["usize",15]]]],null,[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["usize",15]],["value",4]],[[["value",4]],["result",6]],null,[[],["u16",15]],[[["slicemut",4],["u32",15],["adembasiselement",3],["i32",15],["bool",15]]],[[["slicemut",4],["adembasiselement",3],["i32",15],["i32",15],["i32",15],["bool",15],["bool",15]]],[[["slicemut",4],["u32",15],["adembasiselement",3],["i32",15],["i32",15],["i32",15],["bool",15],["bool",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15],["bool",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15]]],[[["validprime",3],["bool",15],["bool",15],["bool",15]]],[[["i32",15]]],null,null,[[],["str",15]],[[],["validprime",3]],null,[[],["i32",15]],[[["vec",3],["isize",15]]],[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],null,[[["str",15]],["iresult",6,[["str",15]]]],[[["adembasiselement",3],["u32",15],["u32",15]],["usize",15]],[[]],[[],["string",3]],[[],["string",3]],[[["adembasiselement",3]],["option",4,[["usize",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["i32",15],["usize",15]],["string",3]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[["i32",15],["i32",15]],["usize",15]],[[["i32",15],["slice",4]],["string",3]],[[["i32",15],["slice",4]],["string",3]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["usize",15]]]],[[["i32",15],["usize",15]],["value",4]],[[["value",4]],["result",6]],[[],["u16",15]],[[],["u16",15]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4],["i32",15]]],[[],["str",15]],[[],["validprime",3]],[[["str",15]],["iresult",6,[["str",15]]]],null,[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],null,null,null,null,null,[[["i32",15],["usize",15]]],[[["validprime",3],["u32",15],["u32",15],["u32",15],["u32",15],["u32",15]],["u32",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["i32",15],["usize",15]],["usize",15]],null,[[["i32",15]],["usize",15]],[[["i32",15]],["usize",15]],null,[[["validprime",3],["bool",15],["i32",15]],["vec",3]],[[],["usize",15]],[[],["usize",15]],null,[[["usize",15]]],[[]],[[]],[[]],[[["validprime",3]]],[[["i32",15],["u32",15]]],[[],["option",4]],null,null,[[["i32",15]],["vec",3]],null,null,null,null,[[],["bool",15]],[[["validprime",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["validprime",3]]],null,[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15],["slice",4]],["string",3]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15]]],[[["validprime",3]]],[[],["validprime",3]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],null,[[["i32",15],["usize",15]],["milnorbasiselement",3]],[[["milnorbasiselement",3]],["usize",15]],null,[[["i32",15],["usize",15]],["string",3]],null,[[["u32",15],["ppartentry",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["qpart",3]],[[],["milnorbasiselement",3]],[[]],[[]],[[]],null,null,[[["i32",15]]],[[["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[],["qpart",3]],[[],["milnorbasiselement",3]],[[],["matrix2d",3]],[[],["ppartallocation",3]],[[],["vec",3]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[["i32",15],["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ppart",6],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["usize",15]]]],[[],["bool",15]],null,[[]],[[["ppart",6]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ppartallocation",3]],[[]],[[],["bool",15]],[[["i32",15],["usize",15]],["value",4]],[[["value",4]],["result",6]],null,null,[[],["u16",15]],[[],["milnoralgebra",3]],[[["slicemut",4],["u32",15],["milnorbasiselement",3],["milnorbasiselement",3]]],[[["slicemut",4],["u32",15],["milnorbasiselement",3],["i32",15],["slice",4],["ppartallocation",3]],["ppartallocation",3]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["milnorbasiselement",3],["ppartallocation",3]],["ppartallocation",3]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4],["ppartallocation",3]],["ppartallocation",3]],[[["milnorbasiselement",3],["u32",15]],["vec",3]],[[["slicemut",4],["u32",15],["milnorbasiselement",3],["milnorbasiselement",3],["ppartallocation",3]],["ppartallocation",3]],[[["validprime",3]]],[[["validprime",3],["ppart",6],["ppart",6],["ppartallocation",3],["u32",15],["i32",15]]],[[["i32",15]]],[[],["option",4,[["u32",15]]]],[[["ppartentry",6],["ppartentry",6],["ppartentry",6]],["ppartentry",6]],null,null,null,null,null,null,[[],["str",15]],[[],["validprime",3]],[[],["validprime",3]],null,[[],["i32",15]],null,null,null,null,null,[[["usize",15],["usize",15]]],null,[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["str",15]],["iresult",6,[["str",15]]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[["milnorbasiselement",3]],["option",4,[["usize",15]]]],[[["u32",15],["ppartentry",6]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[["usize",15],["usize",15]]],[[["usize",15]]],null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],[[["milnoralgebra",3],["milnorelt",3],["usize",15],["usize",15]]],[[["milnoralgebra",3],["milnorelt",3],["usize",15],["usize",15]],["fpvector",4]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[["i32",15]]],null,[[["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],null,[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],null,null,null,null,null,[[],["oncevec",3]],[[]],[[]],[[]],[[]],[[],["polynomialalgebramonomial",3]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[],["polynomialalgebratableentry",3]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["polynomialalgebramonomial",3]],["bool",15]],null,[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["fpvector",4],["fpvector",4]]],[[["fpvector",4],["fpvector",4]]],[[["i32",15],["usize",15]],["option",4,[["usize",15]]]],[[]],[[]],[[]],[[["i32",15],["usize",15]],["polynomialalgebramonomial",3]],[[["i32",15],["usize",15]],["polynomialalgebramonomial",3]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["polynomialalgebramonomial",3]],["usize",15]],[[["polynomialalgebramonomial",3]],["usize",15]],null,[[["fpvector",4],["u32",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4]]],[[["fpvector",4],["u32",15],["polynomialalgebramonomial",3],["i32",15],["fpvector",4]]],[[["polynomialalgebramonomial",3],["polynomialalgebramonomial",3]],["option",4,[["u32",15]]]],[[["polynomialalgebramonomial",3],["polynomialalgebramonomial",3]],["option",4,[["u32",15]]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4],["polynomialalgebramonomial",3]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4],["polynomialalgebramonomial",3]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4],["i32",15],["fpvector",4]]],[[["fpvector",4],["u32",15],["i32",15],["fpvector",4],["i32",15],["fpvector",4]]],[[["polynomialalgebramonomial",3]],["bool",15]],[[["validprime",3]]],[[]],null,[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],[[],["validprime",3]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15]]],[[["polynomialalgebramonomial",3],["i32",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],null,[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["algebratype",4]],[[]],[[["i32",15]]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[["i32",15],["usize",15]],["vec",3]],[[],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["i32",15],["i32",15]],["usize",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["slice",4]],["string",3]],[[["algebratype",4]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["ademalgebra",3]],["steenrodalgebra",4]],[[["milnoralgebra",3]],["steenrodalgebra",4]],[[]],[[]],[[]],[[["value",4],["algebratype",4]],["result",6,[["steenrodalgebra",4]]]],[[["str",15]],["result",4]],[[["i32",15]],["vec",3,[["vec",3]]]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["usize",15]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["usize",15]],["value",4]],[[["value",4]],["result",6]],[[],["u16",15]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15],["i32",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4],["i32",15]]],[[["validprime",3],["algebratype",4]]],[[["i32",15]]],null,null,[[],["str",15]],[[],["validprime",3]],null,null,[[["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["steenrodalgebraborrow",4]],[[],["steenrodalgebraborrow",4]],[[["str",15]],["iresult",6,[["str",15]]]],[[["value",4]]],[[]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["ademalgebra",3],["milnoralgebra",3],["fpvector",4],["u32",15],["i32",15],["ppart",6]]],[[["ademalgebra",3],["milnoralgebra",3],["fpvector",4],["u32",15],["u32",15]]],[[["ademalgebra",3],["milnoralgebra",3],["fpvector",4],["u32",15],["i32",15],["fpvector",4]]],[[["ademalgebra",3],["milnoralgebra",3],["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[["ademalgebra",3],["milnoralgebra",3],["fpvector",4],["u32",15],["i32",15],["fpvector",4]]],[[["ademalgebra",3],["milnoralgebra",3],["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[["ademalgebra",3],["milnoralgebra",3],["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[["ademalgebra",3],["milnoralgebra",3],["fpvector",4],["u32",15],["i32",15],["usize",15]]],null,null,null,[[["validprime",3],["u32",15],["u32",15],["u32",15],["u32",15],["u32",15]],["u32",15]],null,null,[[["validprime",3],["bool",15],["i32",15]],["vec",3]],null,null,null,null,null,null,null,[[["validprime",3]]],[[["validprime",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["milnoralgebra",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["oncevec",3]],null,null,null,null,[[],["arc",3]],[[],["arc",3]],null,null,null,null,null,null,null,null,null,null,null,[[["i32",15],["usize",15]],["string",3]],null,null,null,null,null,null,null,null,null,[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[],["oncevec",3]],null,null,null,null,null,[[["i32",15]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["i32",15]],[[],["i32",15]],null,[[],["i32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],null,null,null,null,null,null,null,null,[[["arc",3],["i32",15]]],null,null,null,null,[[],["oncevec",3]],null,[[],["arc",3]],null,[[],["oncevec",3]],null,[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[],["oncevec",3]],null,[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[["formatter",3]],["result",6]],[[["i32",15],["usize",15]],["option",4,[["usize",15]]]],[[]],[[],["usize",15]],[[]],[[["i32",15],["bool",15],["i32",15]],["bool",15]],[[["arc",3]]],[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[],["validprime",3]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["slice",4]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["i32",15],["usize",15],["usize",15]],["usize",15]],null,null,[[["i32",15],["usize",15]],["blockstart",3]],[[["usize",15]],["generatorbasiseltpair",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["bivec",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["i32",15]],[[],["fdmodule",3]],[[],["fdmodule",3]],[[],["usize",15]],[[],["usize",15]],null,[[],["oncevec",3]],null,[[],["ademalgebra",3]],[[],["arc",3]],null,[[],["oncevec",3]],null,[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[],["oncevec",3]],[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[["formatter",3]],["result",6]],[[["i32",15],["usize",15]],["option",4,[["usize",15]]]],[[]],[[],["usize",15]],[[]],[[["i32",15]],["option",4]],null,[[["arc",3],["i32",15]]],[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[],["validprime",3]],[[["i32",15]],["option",4]],null,[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],null,[[],["value",4]],[[["i32",15],["string",3]]],[[],["arc",3]],null,[[["arc",3],["bivec",3]],["bivec",3,[["bivec",3,[["vec",3,[["vec",3,[["fpvector",4]]]]]]]]]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[],["bool",15]],[[["i32",15],["i32",15]],["result",4,[["modulefailedrelationerror",3]]]],[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[],["bool",15]],[[["i32",15],["i32",15]]],[[["formatter",3]],["result",6]],[[]],[[["arc",3],["value",4]],["result",6]],null,[[],["value",4]],null,[[],["usize",15]],[[]],[[],["bool",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["value",4]],[[["value",4]]],null,[[["arc",3],["string",3],["bivec",3,[["usize",15]]]]],[[["hashmap",6],["str",15],["bool",15]],["result",6]],[[["str",15],["i32",15],["slicemut",4]],["result",6]],[[["i32",15],["usize",15],["i32",15],["usize",15],["vec",3,[["u32",15]]]]],[[["i32",15],["usize",15],["i32",15],["usize",15],["fpvector",4]]],[[["i32",15],["usize",15],["string",3]]],[[["str",15]],["option",4]],[[["str",15]],["iresult",6,[["str",15]]]],[[],["result",4,[["string",3]]]],[[["value",4]]],[[],["value",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],[[],["arc",3]],[[],["option",4,[["fdmodule",3]]]],[[],["option",4,[["fpmodule",3]]]],[[],["option",4,[["realprojectivespace",3]]]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[],["bool",15]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],null,[[["usize",15]]],[[["finitemodule",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["i32",15],["usize",15]],["usize",15]],[[["fdmodule",3,[["steenrodalgebra",4]]]]],[[["fpmodule",3,[["steenrodalgebra",4]]]]],[[]],[[["realprojectivespace",3,[["steenrodalgebra",4]]]]],[[["arc",3,[["steenrodalgebra",4]]],["value",4]],["result",6]],[[["i32",15],["usize",15]],["isize",15]],[[],["arc",3,[["freemodule",3,[["steenrodalgebra",4]]]]]],[[],["usize",15]],[[]],[[],["option",4,[["fdmodule",3,[["steenrodalgebra",4]]]]]],[[],["option",4,[["fpmodule",3,[["steenrodalgebra",4]]]]]],[[],["option",4,[["realprojectivespace",3,[["steenrodalgebra",4]]]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["finitemodule",4]],["bool",15]],[[],["validprime",3]],[[["value",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["str",15]],[[],["typeid",3]],[[["arc",3,[["steenrodalgebra",4]]],["i32",15]]],null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["vec",3,[["string",3]]]]],[[["i32",15],["matrix",3]]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["i32",15],["usize",15]],["usize",15]],[[["i32",15],["usize",15]],["usize",15]],null,[[]],[[]],[[["arc",3],["value",4]],["result",6]],[[["i32",15],["usize",15]],["isize",15]],[[["i32",15],["usize",15]],["isize",15]],null,[[],["arc",3,[["freemodule",3]]]],[[],["arc",3,[["freemodule",3]]]],null,null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[],["i32",15]],[[],["i32",15]],null,[[["value",4]]],null,[[["arc",3],["string",3],["i32",15]]],null,[[],["value",4]],[[["value",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["option",4,[["vec",3,[["string",3]]]]]]],[[],["arc",3]],null,null,[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],[[],["operationgeneratorpair",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["slice",4]],["value",4]],[[["u32",15],["i32",15],["slice",4]],["string",3]],[[["i32",15]]],[[["i32",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[],["oncebivec",3]],null,null,null,[[["i32",15],["i32",15],["usize",15]],["usize",15]],null,[[["i32",15],["usize",15]],["usize",15]],[[["i32",15]],["vec",3,[["i32",15]]]],[[],["i32",15]],[[["i32",15],["usize",15]],["operationgeneratorpair",3]],[[],["usize",15]],[[],["usize",15]],[[["i32",15],["usize",15]],["usize",15]],[[]],[[]],[[["i32",15],["slice",4]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,null,[[["arc",3],["string",3],["i32",15]]],null,[[["i32",15]],["usize",15]],null,[[["operationgeneratorpair",3]],["usize",15]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["usize",15]],null,[[["i32",15],["i32",15],["usize",15],["slice",4]],["slice",4]],[[["i32",15],["i32",15],["usize",15],["slicemut",4]],["slicemut",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["option",4,[["vec",3,[["string",3]]]]]]],[[],["ademalgebra",3]],[[],["arc",3]],null,null,[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15],["slice",4]],["value",4]],[[["i32",15]]],[[["i32",15]]],[[["formatter",3]],["result",6]],[[]],null,null,[[["i32",15],["i32",15],["usize",15]],["usize",15]],null,[[["i32",15]],["vec",3,[["i32",15]]]],[[],["i32",15]],[[["i32",15],["usize",15]],["operationgeneratorpair",3]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,null,[[["arc",3],["string",3],["i32",15]]],null,[[["i32",15]],["usize",15]],[[["operationgeneratorpair",3]],["usize",15]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["usize",15]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],null,[[["i32",15],["usize",15]],["string",3]],null,[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15],["slice",4]],["freemodulehomomorphism",3]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[["arc",3,[["freemodule",3]]],["arc",3]]],[[],["arc",3,[["freemodule",3]]]],null,[[],["arc",3]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4]]],[[["slicemut",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["i32",15]]],null,null,[[["i32",15]]],[[],["i32",15]],null,null,null,null,null,null,null,null,[[["i32",15],["usize",15]],["usize",15]],null,null,[[["i32",15],["usize",15]],["isize",15]],[[],["arc",3,[["freemodule",3]]]],null,[[["matrixslicemut",3],["i32",15]]],null,[[["arc",3]]],[[["i32",15]],["option",4,[["subspace",3]]]],null,null,null,[[["i32",15]],["option",4,[["subspace",3]]]],null,null,null,null,null,null,null,[[],["i32",15]],null,null,[[],["validprime",3]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,null,null,null,null,null,null,null,null,[[],["arc",3]],null,null,null,null,null,null,null,null,null,null,[[],["arc",3]],null,null,null,null,null,null,null,[[["arc",3],["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[],["i32",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["arc",3],["arc",3],["i32",15],["bivec",3,[["matrix",3]]]]],[[["arc",3]]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["usize",15]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,null,[[["arc",3],["arc",3],["i32",15]]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,[[["arc",3,[["boundedmodule",8]]]],["boundedmodulehomomorphism",3,[["boundedmodule",8]]]],[[["arc",3,[["boundedmodule",8]]]],["boundedmodulehomomorphism",3,[["boundedmodule",8]]]],[[],["arc",3]],null,[[],["arc",3]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,[[["freemodulehomomorphism",3]]],null,[[],["arc",3]],[[],["arc",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["boundedmodulehomomorphism",3,[["finitemodule",4]]]]],[[["fpmodulehomomorphism",3,[["finitemodule",4]]]]],[[["arc",3,[["finitemodule",4]]]]],[[["i32",15]],["option",4,[["subspace",3]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[["i32",15]],["option",4,[["quasiinverse",3]]]],[[],["arc",3]],null,[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["arc",3,[["finitemodule",4]]],["arc",3],["i32",15]]],null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["usize",15]],["usize",15]],[[]],[[["i32",15],["usize",15]],["isize",15]],[[],["arc",3,[["freemodule",3]]]],[[["arc",3]]],[[],["usize",15]],[[]],[[],["arc",3]],null,[[],["arc",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["arc",3],["arc",3],["i32",15]]],null,[[["i32",15],["slice",4]]],[[["i32",15],["matrixslicemut",3]]],[[["i32",15],["vec",3,[["fpvector",4]]]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["fpvector",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[],["compositionhomomorphism",3,[["modulehomomorphism",8]]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]]],[[]],[[["i32",15]],["vec",3,[["vec",3,[["u32",15]]]]]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["usize",15]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["i32",15]],null,[[["arc",3,[["freemodule",3]]],["arc",3],["i32",15]]],[[],["i32",15]],[[["i32",15],["usize",15]],["fpvector",4]],null,[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,[[["i32",15],["option",4,[["subspace",3]]]]],[[["i32",15],["option",4,[["subspace",3]]]]],[[["i32",15],["option",4,[["quasiinverse",3]]]]],[[],["arc",3]],null,[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[],["i32",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["arc",3],["arc",3],["i32",15]]],[[],["arc",3]],null,[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[["i32",15]]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["usize",15]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],null,null,[[],["i32",15]],[[["arc",3,[["hommodule",3]]],["arc",3,[["hommodule",3]]],["arc",3,[["freemodulehomomorphism",3,[["freemodule",3]]]]]]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,[[],["arc",3]],null,[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["arc",3],["arc",3,[["quotientmodule",3]]],["arc",3,[["quotientmodule",3]]]]],[[["arc",3],["arc",3,[["quotientmodule",3]]],["arc",3]]],null,null,[[],["arc",3]],[[],["arc",3]],null,null,[[],["arc",3]],[[],["arc",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],[[["i32",15]],["option",4,[["subspace",3]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["i32",15]],["option",4,[["subspace",3]]]],[[["i32",15]],["option",4,[["subspace",3]]]],[[["arc",3],["arc",3,[["truncatedmodule",3]]],["arc",3,[["truncatedmodule",3]]]]],[[["arc",3],["arc",3,[["truncatedmodule",3]]],["arc",3]]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,null,[[],["arc",3]],[[],["arc",3]],null,null,[[],["arc",3]],[[],["arc",3]],[[],["i32",15]],[[],["i32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["slicemut",4],["u32",15],["u32",15],["u32",15],["i32",15],["usize",15]]],[[],["oncevec",3]],null,[[],["ademalgebra",3]],[[],["arc",3]],null,[[],["oncevec",3]],null,[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[],["oncevec",3]],null,[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[["formatter",3]],["result",6]],[[["i32",15],["usize",15]],["option",4,[["usize",15]]]],null,[[]],[[],["usize",15]],[[]],null,null,[[["arc",3],["i32",15]]],[[["i32",15]],["usize",15]],[[],["truncatedpolynomialmonomialbasis",3]],null,[[],["validprime",3]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["usize",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],[[["i32",15]],["vec",3,[["string",3]]]],[[["i32",15]],["vec",3,[["string",3]]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["fpvector",4],["fpvector",4],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["fpvector",4],["fpvector",4],["i32",15],["usize",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15]],["vec",3]],[[["i32",15]],["vec",3]],[[["i32",15]]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15],["slice",4]],["string",3]],[[["i32",15],["slice",4]],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["i32",15]],[[],["i32",15]],[[],["validprime",3]],[[],["validprime",3]],null,[[["i32",15],["usize",15]]],[[["i32",15],["usize",15]]],[[],["string",3]],[[["arc",3],["i32",15]],["fdmodule",3]],[[["arc",3],["i32",15]],["fdmodule",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["oncevec",3]],[[],["arc",3]],[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["polynomialalgebramonomial",3]]],[[["slicemut",4],["u32",15],["polynomialalgebramonomial",3]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4]]],[[],["oncevec",3]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]]],[[["i32",15]]],[[["i32",15],["polynomialalgebramonomial",3],["usize",15],["fpvector",4],["fpvector",4],["fpvector",4]],["fpvector",4]],[[["i32",15],["polynomialalgebramonomial",3],["usize",15],["fpvector",4],["fpvector",4],["fpvector",4]],["fpvector",4]],[[["i32",15],["polynomialalgebramonomial",3],["usize",15],["fpvector",4],["fpvector",4],["fpvector",4]],["fpvector",4]],[[["i32",15],["polynomialalgebramonomial",3],["usize",15],["fpvector",4],["fpvector",4],["fpvector",4]],["fpvector",4]],[[["i32",15]]],[[["i32",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["polynomialalgebramonomial",3]]],[[["slicemut",4],["u32",15],["i32",15],["polynomialalgebramonomial",3]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["usize",15]]],[[["polynomialalgebramonomial",3],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["i32",15],["slice",4]]],[[],["i32",15]],[[],["i32",15]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],null,[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["i32",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,[[["arc",3]]],[[["i32",15],["slicemut",4],["slice",4]]],[[["i32",15],["slice",4]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15],["vec",3,[["fpvector",4]]]]],[[["i32",15],["slicemut",4]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],null,[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],null,null,[[["ademalgebra",3],["i32",15],["usize",15],["i32",15]],["bool",15]],[[["milnoralgebra",3],["i32",15],["usize",15],["i32",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["arc",3],["value",4]],["result",6]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,[[],["i32",15]],[[],["i32",15]],null,null,[[],["i32",15]],[[["arc",3],["i32",15],["option",4,[["i32",15]]],["bool",15]]],[[["value",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],null,[[["i32",15],["usize",15]],["string",3]],null,[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["i32",15],["usize",15]],["usize",15]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,null,[[["arc",3],["vec",3,[["arc",3]]],["i32",15]]],[[["i32",15],["usize",15]],["usize",15]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],null,[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],null,[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["arc",3],["arc",3]]],[[["i32",15],["i32",15]],["usize",15]],null,[[["i32",15],["usize",15]],["i32",15]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arc",3],["i32",15]]],null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[],["arc",3]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,[[["arc",3],["i32",15]]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["arc",3],["i32",15]]],null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15]]],null,[[["i32",15]]],null,[[["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],null,null,null,null,[[["bocksteinorsq",4],["i32",15]],["adembasiselement",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["ademalgebra",3],["milnoralgebra",3],["str",15]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["str",15]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["algebraparsenode",4]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["option",4,[["i32",15]]],["algebraparsenode",4]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["option",4,[["i32",15]]],["algebrabasiselt",4]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["hashmap",6],["str",15]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["hashmap",6],["option",4,[["i32",15]]],["string",3]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["hashmap",6],["moduleparsenode",4]],["result",6]],[[["ademalgebra",3],["milnoralgebra",3],["hashmap",6],["option",4,[["i32",15]]],["moduleparsenode",4]],["result",6]],[[["ademalgebra",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["iresult",6,[["str",15],["algebraparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["algebraparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["algebraparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["algebraparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["algebraparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["bocksteinorsq",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["algebrabasiselt",4]],[[],["algebraparsenode",4]],[[],["moduleparsenode",4]],[[],["bocksteinorsq",4]],[[]],[[]],[[]],[[]],[[["str",15]],["iresult",6,[["str",15],["vec",3,[["",26,[["fromstr",8],["copy",8]]]]]]]],[[["str",15]],["iresult",6,[["str",15],["vec",3,[["",26,[["fromstr",8],["copy",8]]]]]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["str",15]],[[["str",15]],["iresult",6,[["str",15],["",26,[["fromstr",8],["copy",8]]]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["iresult",6,[["str",15],["moduleparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["moduleparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["moduleparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["moduleparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["moduleparsenode",4]]]],[[["str",15]],["result",4,[["algebraparsenode",4],["parseerror",3]]]],[[["str",15]],["result",4,[["moduleparsenode",4],["parseerror",3]]]],[[["str",15]],["iresult",6,[["str",15],["algebraparsenode",4]]]],[[["str",15]],["iresult",6,[["str",15],["vec",3,[["bocksteinorsq",4]]]]]],[[["str",15]],["iresult",6,[["str",15],["vec",3,[["bocksteinorsq",4]]]]]],[[["str",15]],["iresult",6,[["str",15],["vec",3,[["",26,[["fromstr",8],["copy",8]]]]]]]],[[["str",15]],["iresult",6,[["str",15],["vec",3,[["",26,[["fromstr",8],["copy",8]]]]]]]],[[["str",15]],["iresult",6,[["str",15],["bocksteinorsq",4]]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"AlgebraType"],[4,"SteenrodAlgebra"],[4,"SteenrodAlgebraBorrow"],[8,"AdemAlgebraT"],[3,"AdemAlgebra"],[3,"MilnorAlgebra"],[8,"Algebra"],[8,"PolynomialAlgebra"],[8,"Bialgebra"],[8,"GeneratedAlgebra"],[3,"PolynomialAlgebraMonomial"],[3,"PolynomialAlgebraTableEntry"],[8,"JsonAlgebra"],[8,"MilnorAlgebraT"],[3,"Field"],[8,"SteenrodAlgebraT"],[13,"AdemAlgebra"],[13,"MilnorAlgebra"],[13,"BorrowAdem"],[13,"BorrowMilnor"],[4,"PorBockstein"],[3,"AdemBasisElement"],[13,"P"],[13,"Bockstein"],[3,"TruncatedPolynomialMonomialBasis"],[3,"PartitionIterator"],[3,"PPartMultiplier"],[3,"MilnorProfile"],[3,"QPart"],[3,"MilnorBasisElement"],[3,"Matrix2D"],[3,"PPartAllocation"],[8,"PairAlgebra"],[3,"MilnorPairElement"],[3,"AlgebraSpec"],[3,"MilnorProfileOption"],[8,"Module"],[8,"PolynomialAlgebraModule"],[4,"FiniteModule"],[3,"BCp"],[3,"Dickson2"],[3,"KFpn"],[3,"FiniteDimensionalModule"],[3,"FreeModule"],[3,"RealProjectiveSpace"],[3,"FreeUnstableModule"],[3,"HomModule"],[3,"SumModule"],[3,"QuotientModule"],[3,"TensorModule"],[3,"OperationGeneratorPair"],[3,"FinitelyPresentedModule"],[8,"BoundedModule"],[3,"TruncatedModule"],[3,"ModuleFailedRelationError"],[8,"ZeroModule"],[13,"FDModule"],[13,"FPModule"],[13,"RealProjectiveSpace"],[3,"BlockStructure"],[3,"GeneratorBasisEltPair"],[3,"BlockStart"],[3,"FPMIndexTable"],[8,"ModuleHomomorphism"],[3,"BoundedModuleHomomorphism"],[3,"FreeModuleHomomorphism"],[3,"GenericZeroHomomorphism"],[3,"QuotientHomomorphism"],[3,"QuotientHomomorphismSource"],[3,"TruncatedHomomorphism"],[3,"TruncatedHomomorphismSource"],[8,"FPModuleT"],[8,"IdentityHomomorphism"],[3,"HomPullback"],[3,"CompositionHomomorphism"],[3,"FiniteModuleHomomorphism"],[3,"FPModuleHomomorphism"],[8,"ZeroHomomorphism"],[4,"FMHI"],[13,"FD"],[13,"FP"],[13,"RP"],[3,"RPSpec"],[3,"DegreeError"],[3,"UnknownBasisElementError"],[4,"AlgebraBasisElt"],[4,"ModuleParseNode"],[4,"AlgebraParseNode"],[4,"BocksteinOrSq"],[3,"ParseError"],[13,"AList"],[13,"PList"],[13,"P"],[13,"Q"],[13,"Product"],[13,"Sum"],[13,"BasisElt"],[13,"Scalar"],[13,"Sq"],[13,"Act"],[13,"Sum"],[13,"ModuleBasisElt"]]},\
"algebra_dim":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"bivec":{"doc":"","t":[3,8,24,8,16,16,8,8,3,3,16,16,8,24,16,16,16,16,16,16,16,8,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,12,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,10,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,8,13,8,14,3,3,3,3,3,8,3,3,13,8,8,8,8,6,13,8,8,8,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,10,10,10,10,10,10,10,10,10,11,11,11,11,11,12,12,12,12,5,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,10,11,11],"n":["BiVec","Deserialize","Deserialize","Deserializer","Error","Error","Index","IndexMut","Iter","IterMut","Ok","Output","Serialize","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","_marker","_marker","advance_back_by","advance_back_by","advance_by","advance_by","all","all","any","any","as_ref","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collect_map","collect_seq","collect_str","count","count","data","default","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","end","end","eq","extend_negative","extend_with","find","find","find_map","find_map","fmt","fmt","fmt","fmt","for_each","for_each","from","from","from","from_vec","get","index","index","index_mut","index_mut","into","into","into","into_iter","into_iter","into_iter_enum","into_slice","into_vec","is_empty","is_empty","is_empty","is_human_readable","is_human_readable","is_sorted_by","iter","iter_enum","iter_mut","iter_mut_enum","last","last","last","len","len","len","max_degree","min_degree","min_degree","ne","new","next","next","next_back","next_back","nth","nth","nth_back","nth_back","position","position","ptr","ptr","push","range","reserve","rposition","rposition","serialize","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","size_hint","size_hint","split_borrow_mut","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","align","alternate","args","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone_into","clone_into","cmp","custom","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","empty_name","entries","entries","entries","entry","entry","entry","eq","field","field","fields","fill","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","has_fields","has_fields","has_key","hash","inner","inner","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","pieces","precision","precision","result","result","result","serialize","sign_aware_zero_pad","sign_minus","sign_plus","state","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str"],"q":["bivecbivec::fmtd":["A BiVec is like a Vec, except we allow indices to be …","A <strong>data structure</strong> that can be deserialized from any data …","","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","Immutable slice iterator","Mutable slice iterator.","The output type produced by this <code>Serializer</code> during …","The returned type after indexing.","A <strong>data structure</strong> that can be serialized into any data …","","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","","","","","","","","","","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","","","","","","","","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","","","","","Deserialize this value from the given Serde deserializer.","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","","","","If <code>min_degree &lt; self.min_degree</code>, set <code>self.min_degree</code> to …","Extends the bivec such that <code>max_degree()</code> is at least <code>max</code>. …","","","","","Utilities for formatting and printing <code>String</code>s.","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","Views the underlying data as a subslice of the original …","","","","","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","","","","","","","","","This returns the “length” of the bivector, defined to …","","","This returns the largest degree in the bivector. This is …","","","","","","","","","","","","","","","","","","","","","","Serialize this value into the given Serde serializer.","","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","","","Mutably borrows i and j. Panic if i != j.","","","","","","","","","","","","","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","","Determines if the <code>#</code> flag was specified.","","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","","Character used as ‘fill’ whenever there is alignment.","","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","","Optionally specified precision for numeric types. …","","","","","","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","","Writes some formatted information into this instance.","Writes a string slice into this writer, returning whether …","Writes some data to the underlying buffer contained within …",""],"i":[0,0,0,0,1,2,0,0,0,0,2,3,0,0,2,2,2,2,2,2,2,0,4,5,4,5,4,5,4,5,4,5,4,5,4,5,6,4,5,6,4,5,6,4,6,4,2,2,2,4,5,6,6,7,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,6,6,6,4,5,4,5,0,6,4,5,4,5,6,4,5,6,6,3,6,8,6,6,4,5,4,5,6,5,6,6,4,5,1,2,4,6,6,6,6,6,4,5,6,4,5,6,6,6,6,6,4,5,4,5,4,5,4,5,4,5,4,5,6,6,6,4,5,9,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,5,6,6,4,6,4,5,6,4,5,6,4,5,6,0,0,0,10,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,10,0,0,0,11,11,11,12,12,13,14,15,16,17,11,10,18,12,13,14,15,16,17,11,10,18,12,11,18,12,18,12,18,18,11,11,11,11,11,18,18,14,15,16,17,15,16,17,18,13,14,14,11,11,13,14,15,16,17,13,11,11,19,20,21,22,23,24,25,26,27,10,18,18,12,12,13,14,17,12,0,13,14,15,16,17,11,10,18,12,13,17,17,18,15,16,13,14,15,16,17,11,10,18,12,17,11,11,18,12,11,11,13,14,17,12,11,11,11,17,18,12,18,12,13,14,15,16,17,11,10,18,12,13,14,15,16,17,11,10,18,12,13,14,15,16,17,11,10,18,12,17,11,11,0,28,11,28,11,11,28,11,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["result",4,[["usize",15]]]],[[["usize",15]],["result",4,[["usize",15]]]],[[["usize",15]],["result",4,[["usize",15]]]],[[["usize",15]],["result",4,[["usize",15]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bivec",3]],[[],["iter",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],null,null,[[["bivec",3]],["bool",15]],[[["i32",15]]],[[["i32",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["vec",3]]],[[["i32",15]],["option",4]],[[]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bivec",3]],["vec",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[]],[[],["itermut",3]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["i32",15]],[[],["usize",15]],[[],["usize",15]],[[],["i32",15]],[[],["i32",15]],null,[[["bivec",3]],["bool",15]],[[["i32",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],null,null,[[]],[[],["range",3,[["i32",15]]]],[[["usize",15]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["result",4]],[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[["option",4,[["usize",15]]]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15],["str",15]],["result",4]],[[],["result",4]],[[["option",4,[["usize",15]]]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["str",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["str",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15],["str",15]],["result",4]],[[]],[[]],[[["i32",15],["i32",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["i32",15],["i32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4,[["alignment",4]]]],null,[[],["bool",15]],null,[[],["option",4,[["str",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["error",3]],[[],["arguments",3]],[[]],[[]],[[["error",3]],["ordering",4]],[[],["error",3]],[[],["debuglist",3]],[[],["debugmap",3]],[[],["debugset",3]],[[["str",15]],["debugstruct",3]],[[["str",15]],["debugtuple",3]],[[],["error",3]],[[],["str",15]],null,[[],["debugset",3]],[[],["debuglist",3]],[[],["debugmap",3]],[[["debug",8]],["debugset",3]],[[["debug",8]],["debuglist",3]],[[["debug",8],["debug",8]],["debugmap",3]],[[["error",3]],["bool",15]],[[["str",15],["debug",8]],["debugstruct",3]],[[["debug",8]],["debugtuple",3]],null,[[],["char",15]],null,[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["u32",15]],null,[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],null,null,null,null,[[["arguments",3]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["debug",8]],["debugmap",3]],[[["str",15]],["result",4,[["error",3]]]],[[["bool",15],["str",15],["str",15]],["result",4,[["error",3]]]],[[["error",3]],["option",4,[["ordering",4]]]],null,[[],["option",4,[["usize",15]]]],null,null,null,null,[[],["result",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["debug",8]],["debugmap",3]],[[],["option",4,[["usize",15]]]],null,[[["write",8],["arguments",3]],["result",4,[["error",3]]]],[[["char",15]],["result",4,[["error",3]]]],[[["char",15]],["result",4,[["error",3]]]],[[["arguments",3]],["result",4,[["error",3]]]],[[["arguments",3]],["result",4,[["error",3]]]],[[["arguments",3]],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]]],"p":[[8,"Deserializer"],[8,"Serializer"],[8,"Index"],[3,"Iter"],[3,"IterMut"],[3,"BiVec"],[8,"Deserialize"],[8,"IndexMut"],[8,"Serialize"],[4,"Alignment"],[3,"Formatter"],[3,"Arguments"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"Write"]],"a":{"[":[6,7],"[]":[6,7],"]":[6,7],"{:?}":[207],"{}":[214]}},\
"bruner":{"doc":"This script converts between our basis and Bruner’s …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"chart":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"define_module":{"doc":"","t":[5,5,5,5,5],"n":["gens_to_json","get_expression_to_vector","get_gens","interactive_module_define_fdmodule","interactive_module_define_fpmodule"],"q":["define_module","","","",""],"d":["","","","",""],"i":[0,0,0,0,0],"f":[[[["bivec",3]],["value",4]],[[["str",15],["fpvector",4]]],[[],["result",6,[["bivec",3,[["vec",3,[["string",3]]]]]]]],[[["value",4],["validprime",3],["bool",15],["string",3]],["result",6]],[[["value",4],["validprime",3],["bool",15],["string",3]],["result",6]]],"p":[]},\
"differentials":{"doc":"This prints all the differentials in the resolution.","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"ext":{"doc":"<code>ext-rs</code> is a collection of libraries for doing homological …","t":[6,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,0,0,11,12,11,12,11,11,11,11,11,11,11,11,11,0,0,11,11,12,12,12,16,16,8,8,8,4,3,3,16,8,13,3,3,8,13,16,16,16,16,3,16,3,10,10,11,11,11,11,11,11,11,12,0,10,12,12,10,11,11,11,11,11,10,10,11,11,11,11,11,11,11,10,10,12,12,12,11,11,11,0,11,11,11,11,10,10,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,10,10,10,12,10,10,10,10,12,12,12,12,11,10,11,11,12,12,12,10,10,12,12,12,10,12,12,0,11,11,11,11,11,11,11,11,11,10,10,12,12,12,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,12,12,12,12,11,11,11,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,6,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,12,11,12,12,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,12,13,13,13,17,13,3,4,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,11,11,11,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,3,3,3,8,3,17,17,17,12,12,12,5,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,5,12,11,11,11,5,5,5,5,5,5,5,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,12,17,6,5,5,5,5,5,5,5,5],"n":["CCC","FDModule","FPModule","FiniteModule","FiniteModuleHomomorphism","RealProjectiveSpace","act","act_by_element","act_on_basis","act_on_basis_borrow","algebra","apply_to_basis_element","as_fd_module","as_fp_module","as_real_projective_space","basis_element_to_string","borrow","borrow","borrow_mut","borrow_mut","borrow_output","chain_complex","compute_auxiliary_data_through_degree","compute_basis","degree_shift","deref","deref","deref_mut","deref_mut","dimension","drop","drop","eq","fmt","fp_idx_to_gen_idx","from","from","from","from","from","from","from","from_json","gen_idx_to_fp_idx","generators","identity_homomorphism","image","init","init","into","into","into_fd_module","into_fp_module","into_real_projective_space","is_fd_module","is_fp_module","is_real_projective_space","is_unit","kernel","map","max_computed_degree","max_degree","min_degree","ne","prime","quasi_inverse","resolution","resolution_homomorphism","secondary","source","source","target","target","to_json","to_string","try_from","try_from","try_into","try_into","type_","type_id","type_id","utils","yoneda","zero_homomorphism","zero_module","0","0","0","Algebra","Algebra","AugmentedChainComplex","BoundedChainComplex","ChainComplex","ChainComplexGrading","ChainHomotopy","ChainMap","ChainMap","CochainComplex","Cohomological","FiniteAugmentedChainComplex","FiniteChainComplex","FreeChainComplex","Homological","Homomorphism","Homomorphism","Module","Module","StemIterator","TargetComplex","TensorChainComplex","algebra","algebra","apply_quasi_inverse","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cc","chain_homotopy","chain_map","chain_maps","chain_maps","cohomology_basis","cohomology_dimension","compute_cohomology","compute_cohomology_through_bidegree","compute_homology","compute_homology_through_bidegree","compute_through_bidegree","compute_through_bidegree","compute_through_bidegree_concurrent","deref","deref","deref","deref_mut","deref_mut","deref_mut","differential","differential","differentials","differentials","differentials","drop","drop","drop","finite_chain_complex","from","from","from","graded_dimension_string","has_computed_bidegree","homology_basis","homology_dimension","homology_gen_to_cocyle","homology_gen_to_cocyle","homotopies","init","init","init","into","into","into","into_iter","iter_stem","left_cc","lock","map","max_cohomology_degree","max_homology_degree","max_s","max_s","min_degree","min_degree","module","module","modules","modules","modules","n","next","next_homological_degree","prime","prime","right_cc","s","s_shift","set_cohomology_basis","set_homology_basis","shift_s","shift_t","source","target","target","target_cc","tensor_product_chain_complex","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero_module","zero_module","zero_module","zero_module","zero_module","ChainHomotopy","borrow","borrow_mut","deref","deref_mut","drop","extend","extend_all","extend_all_concurrent","extend_step","from","homotopies","homotopy","init","into","into_homotopies","lock","map","new","prime","shift_s","shift_t","source","target","try_from","try_into","type_id","FiniteAugmentedChainComplex","FiniteChainComplex","algebra","algebra","borrow","borrow","borrow_mut","borrow_mut","ccdz","chain_map","chain_maps","compute_through_bidegree","compute_through_bidegree","deref","deref","deref_mut","deref_mut","differential","differential","differentials","differentials","drop","drop","from","from","from","has_computed_bidegree","has_computed_bidegree","homology_basis","homology_basis","init","init","into","into","max_degree","max_homology_degree","max_homology_degree","max_s","max_s","min_degree","min_degree","module","module","modules","modules","next_homological_degree","next_homological_degree","pop","set_homology_basis","set_homology_basis","target","target_cc","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","zero_module","zero_module","zero_module","STM","TensorChainComplex","TensorChainMap","TensorSquareCC","algebra","apply_quasi_inverse","apply_to_basis_element","borrow","borrow","borrow_mut","borrow_mut","calculate_quasi_inverse","chain_map","compute_auxiliary_data_through_degree","compute_through_bidegree","degree_shift","deref","deref","deref_mut","deref_mut","differential","differentials","drop","drop","from","from","has_computed_bidegree","homology_basis","init","init","into","into","left_cc","left_cc","left_cc","max_homology_degree","min_degree","module","modules","new","next_homological_degree","quasi_inverses","right_cc","right_cc","right_cc","set_homology_basis","source","source","source_s","swap","target","target","target","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","zero_module","AugmentationQi","Differential","Kernel","MAX_NEW_GENS","ResQi","Resolution","SaveData","algebra","apply_quasi_inverse","borrow","borrow","borrow_mut","borrow_mut","chain_map","chain_maps","clone","clone_into","cocycle_string","complex","complex","compute_through_bidegree","compute_through_bidegree_concurrent","compute_through_bidegree_concurrent_with_callback","compute_through_bidegree_with_callback","compute_through_stem","compute_through_stem_concurrent","create_save_file","deref","deref","deref_mut","deref_mut","differential","differentials","drop","drop","eq","extend_through_degree","filtration_one_product","fmt","from","from","get_kernel","get_save_path","has_computed_bidegree","homology_basis","homology_dimension","init","init","into","into","kernels","load_quasi_inverse","lock","magic","max_homology_degree","min_degree","module","modules","name","new","new_with_save","next_homological_degree","number_of_gens_in_bidegree","open_save_file","prime","resolution_data","save_dir","search_file","set_homology_basis","should_save","step_resolution","target","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","zero_module","zero_module","ResolutionHomomorphism","act","borrow","borrow_mut","deref","deref_mut","drop","extend","extend_all","extend_all_concurrent","extend_concurrent","extend_profile","extend_profile_concurrent","extend_step","extend_through_stem","extend_through_stem_concurrent","from","from_class","from_module_homomorphism","get_map","get_map_ensure_length","init","into","maps","name","new","next_homological_degree","shift_s","shift_t","source","target","try_from","try_into","type_id","Resolution","SecondaryComposite","SecondaryHomotopy","SecondaryLift","act","act","add_composite","add_composite","algebra","algebra","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_compute","chain_complex","composite","composite","composites","compute_composites","compute_homotopies","compute_intermediates","degree","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","finalize","from","from","from","get_intermediate","homotopies","homotopies","homotopy","init","init","init","initialize_homotopies","intermediates","into","into","into","new","new","new","shift_t","source","target","target","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ChecksumReader","ChecksumWriter","Config","HashMapTuple","QueryModuleResult","RED_ANSI_CODE","STATIC_MODULES_PATH","WHITE_ANSI_CODE","adler","adler","algebra","ascii_num","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","clone","clone_into","construct","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","flush","fmt","from","from","from","from","get_tuple","init","init","init","init","into","into","into","into","load_module_json","module","ne","new","new","parse_module_name","print_element","print_resolution_color","query_bucket","query_module","query_module_only","query_num_threads","read","read_exact","reader","resolution","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate_header","write","write_all","write_header","writer","PENALTY_UNIT","Yoneda","compute_kernel_image","operation_drop","rate_adem_operation","rate_operation","split_mut_borrow","yoneda_representative","yoneda_representative_element","yoneda_representative_with_strategy"],"q":["ext","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::FiniteModule","","","ext::chain_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::chain_complex::chain_homotopy","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::chain_complex::finite_chain_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::chain_complex::tensor_product_chain_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::resolution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::resolution_homomorphism","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::secondary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ext::yoneda","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Whether act_on_basis_borrow is available.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An augmented chain complex is a map of chain complexes C …","A bounded chain complex is a chain complex C for which C_s …","A chain complex is defined to start in degree 0. The …","","A chain homotopy from $f to g$, or equivalently a …","<code>chain_maps</code> is required to be non-empty","","","","","","","","","","","","An iterator returned by <code>ChainComplex::iter_stem</code>","","","","","Apply the quasi-inverse of the (s, t)th differential to …","","","","","","","","","","","","","","","","","","Ensure all bidegrees less than or equal to (s, t) have …","","A concurrent version of …","","","","","","","This returns the differential starting from the sth module.","","","","","","","","","","","","","If the complex has been computed at bidegree (s, t). This …","","","","","Homotopies, indexed by the filtration of the target of f - …","","","","","","","","Iterate through all defind bidegrees in increasing order …","","","A function that given (s, t, idx, result), adds (f - g)(x_…","","","","","","","","","","","","","","The first s such that <code>self.module(s)</code> is not defined.","","","","","","","","The $s$ shift of the original chain map $f - g$.","The $t$ shift of the original chain map $f - g$.","","","","","","","","","","","","","","","","","","","","A chain homotopy from $f to g$, or equivalently a …","","","","","","Lift maps so that the chain <em>homotopy</em> is defined on …","Lift maps so that the chain homotopy is defined on as many …","","","","Homotopies, indexed by the filtration of the target of f - …","","","","Into the vec of homotopies. This Vec is indexed by the …","","A function that given (s, t, idx, result), adds (f - g)(x_…","","","The $s$ shift of the original chain map $f - g$.","The $t$ shift of the original chain map $f - g$.","","","","","","","","","","","","","","","This currently crashes if <code>s</code> is greater than the s degree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","At the moment, this is off by a sign. However, we only use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function sends a (x) b to b (x) a. This makes sense …","","","","","","","","","","","","","","","This is the maximum number of new generators we expect in …","","A resolution of a chain complex.","","","","","","","","","","","","","","","","","","","This function resolves up till a fixed stem instead of a …","A concurrent version of <code>Resolution::compute_through_stem</code>","","","","","","","","","","","This function prepares the Resolution object to perform …","Computes the filtration one product. This returns None if …","","","","Gets the kernel of the differential starting at $(s, t)$. …","This panics if there is no save dir","","","","","","","","For each <em>internal</em> degree, store the kernel of the most …","Whether we should keep the quasi-inverses of the …","","","","","","","","","","","","This panics if there is no save dir","","","","","","Whether we should save newly computed data to the disk. …","Call our resolution $X$, and the chain complex to resolve …","","","","","","","","","","","","","","","","","","Extend the resolution homomorphism such that it is defined …","","","","","","","","","","","","","","","","","","","","","","","","","","","","A homotopy of a map A -&gt; M of pair modules. We assume this …","","","","Compute the image of an element in the source under the …","","Add composites up to and including the specified degree","","","","","","","","","Whether picking δ₂ = 0 gives a valid secondary …","","","The component of the map on the R_B portion. gen_deg -&gt; …","gen_deg -&gt; gen_idx -&gt; composite","","","","","","","","","","","","","","","","","","","gen_deg -&gt; gen_idx -&gt; homotopy","s -&gt; t -&gt; idx -&gt; homotopy","","","","","","","","","","","","","output_t = input_t - shift_t","","","","","","","","","","","","","","","A config object is an object that specifies how a Steenrod …","","","","","","","","The basis for the Steenrod algebra","","","","","","","","","","","","","This constructs a resolution resolving a module according …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The json specification of the module","","","","","Prints an element in the bidegree <code>(n, s)</code> to stdout. For …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function does the following computation:","","","","","This function produces a quasi-isomorphic quotient of <code>cc</code> …","",""],"i":[0,1,1,0,0,1,1,1,1,1,1,2,1,1,1,1,2,1,2,1,1,0,2,1,2,2,1,2,1,1,2,1,1,1,1,2,2,2,1,1,1,1,1,1,1,2,2,2,1,2,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,2,0,0,0,2,2,2,2,1,1,2,1,2,1,1,2,1,0,0,2,1,3,4,5,6,7,0,0,0,0,0,0,8,0,9,0,0,0,9,6,7,6,7,0,8,0,6,7,6,9,10,11,9,10,11,10,0,8,12,11,7,7,7,7,6,6,6,7,6,9,10,11,9,10,11,6,7,13,12,14,9,10,11,0,9,10,11,15,6,6,6,6,7,16,9,10,11,9,10,11,10,6,14,16,16,7,6,17,10,6,7,6,7,13,12,14,10,10,6,6,7,14,10,11,7,6,16,16,16,8,16,12,0,9,10,11,9,10,11,9,10,11,6,7,13,12,14,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,13,12,13,12,13,12,13,12,12,13,12,13,12,13,12,13,12,13,12,13,12,13,13,12,13,12,13,12,13,12,13,12,13,13,12,13,12,13,12,13,12,13,12,13,12,13,13,12,12,12,13,12,13,12,13,12,13,12,13,12,0,0,0,0,14,18,18,14,18,14,18,18,14,18,14,18,14,18,14,18,14,14,14,18,14,18,14,14,14,18,14,18,14,14,18,14,14,14,14,14,14,18,14,14,18,14,18,18,18,14,14,18,18,14,18,14,18,14,18,14,14,19,19,19,0,19,0,0,20,20,20,19,20,19,20,20,19,19,20,20,20,20,20,20,20,20,20,20,20,19,20,19,20,20,20,19,19,20,20,19,20,19,20,20,20,20,20,20,19,20,19,20,20,20,19,20,20,20,20,19,20,20,20,20,20,20,19,20,20,20,20,20,20,19,20,19,20,19,20,19,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,0,22,23,22,23,22,24,22,23,24,22,23,24,0,24,23,22,23,24,24,24,22,22,23,24,22,23,24,22,23,24,22,22,23,24,24,23,24,24,22,23,24,24,24,22,23,24,22,23,24,23,23,22,23,22,23,24,22,23,24,22,23,24,0,0,0,0,0,0,0,0,25,26,27,0,28,25,26,27,28,25,26,27,28,27,27,0,28,25,26,27,28,25,26,27,28,25,25,26,26,27,27,25,27,28,25,26,27,29,28,25,26,27,28,25,26,27,0,27,27,25,26,0,0,0,0,0,0,0,26,26,26,28,27,28,25,26,27,27,27,27,28,25,26,27,28,25,26,27,0,25,25,0,25,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15],["i32",15],["usize",15]]],[[["i32",15],["usize",15],["i32",15],["usize",15]],["fpvector",4]],[[],["arc",3]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[],["option",4,[["finitedimensionalmodule",3]]]],[[],["option",4,[["finitelypresentedmodule",3]]]],[[],["option",4,[["realprojectivespace",3]]]],[[["i32",15],["usize",15]],["string",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[["i32",15]]],[[["i32",15]]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["finitemodule",4]],["bool",15]],[[["formatter",3]],["result",4,[["error",3]]]],[[["i32",15],["usize",15]],["usize",15]],[[]],[[["boundedmodulehomomorphism",3,[["finitemodule",4]]]],["finitemodulehomomorphism",3]],[[["fpmodulehomomorphism",3,[["finitemodule",4]]]],["finitemodulehomomorphism",3]],[[]],[[["realprojectivespace",3,[["steenrodalgebra",4]]]],["finitemodule",4]],[[["finitelypresentedmodule",3,[["steenrodalgebra",4]]]],["finitemodule",4]],[[["finitedimensionalmodule",3,[["steenrodalgebra",4]]]],["finitemodule",4]],[[["arc",3,[["steenrodalgebra",4]]],["value",4]],["result",4,[["finitemodule",4],["error",3]]]],[[["i32",15],["usize",15]],["isize",15]],[[],["arc",3,[["freemodule",3,[["steenrodalgebra",4]]]]]],[[["arc",3,[["finitemodule",4]]]],["finitemodulehomomorphism",3,[["finitemodule",4]]]],[[["i32",15]],["option",4,[["subspace",3]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["option",4,[["finitedimensionalmodule",3,[["steenrodalgebra",4]]]]]],[[],["option",4,[["finitelypresentedmodule",3,[["steenrodalgebra",4]]]]]],[[],["option",4,[["realprojectivespace",3,[["steenrodalgebra",4]]]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["i32",15]],["option",4,[["subspace",3]]]],null,[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["finitemodule",4]],["bool",15]],[[],["validprime",3]],[[["i32",15]],["option",4,[["quasiinverse",3]]]],null,null,null,[[],["arc",3]],null,[[],["arc",3]],null,[[["value",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["str",15]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["arc",3,[["finitemodule",4]]],["arc",3],["i32",15]],["finitemodulehomomorphism",3]],[[["arc",3,[["steenrodalgebra",4]]],["i32",15]],["finitemodule",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arc",3]],[[],["arc",3]],[[["u32",15],["i32",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["u32",15]],["arc",3]],null,null,[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["usize",15]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15],["tokenbucket",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[],["string",3]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["usize",15]],[[["fpvector",4],["u32",15],["u32",15],["i32",15],["usize",15]]],[[["fpvector",4],["u32",15],["u32",15],["i32",15],["usize",15]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["stemiterator",3]],null,null,null,[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[],["u32",15]],null,[[],["i32",15]],[[],["i32",15]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],null,null,null,null,[[],["option",4]],[[],["u32",15]],[[],["validprime",3]],[[],["validprime",3]],null,null,null,[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],null,null,null,[[],["arc",3]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["arc",3]],[[],["arc",3]],null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15],["i32",15]]],[[]],[[["tokenbucket",3]]],[[["u32",15],["i32",15],["fpvector",4]]],[[]],null,[[["u32",15]],["freemodulehomomorphism",3]],[[],["usize",15]],[[]],[[],["oncevec",3,[["freemodulehomomorphism",3]]]],null,null,[[["u32",15],["i32",15]]],[[],["validprime",3]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["arc",3]],[[],["arc",3]],[[]],[[]],[[]],[[]],[[["arc",3]]],[[["u32",15]],["arc",3]],null,[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[["finiteaugmentedchaincomplex",3]],["finitechaincomplex",3]],[[]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["vec",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["i32",15]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[],["u32",15]],[[],["u32",15]],[[],["i32",15]],[[],["i32",15]],[[["u32",15]],["arc",3]],[[["u32",15]],["arc",3]],null,null,[[],["u32",15]],[[],["u32",15]],[[]],[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["arc",3]],[[],["arc",3]],null,null,null,null,null,null,[[],["arc",3]],[[["slicemut",4],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[]],[[]],[[["i32",15]],["vec",3,[["option",4,[["vec",3]]]]]],[[["u32",15]],["arc",3]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["arc",3]],null,[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["vec",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["arc",3]],null,null,[[["u32",15]],["i32",15]],[[],["i32",15]],[[["u32",15]],["arc",3]],null,[[["arc",3],["arc",3]]],[[],["u32",15]],null,[[],["arc",3]],null,null,[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],[[],["arc",3]],null,null,[[["fpvector",4],["fpvector",4],["u32",15],["i32",15]]],[[],["arc",3]],[[],["arc",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["arc",3]],null,null,null,null,null,null,null,null,[[],["arc",3]],[[["u32",15],["i32",15]],["bool",15]],[[]],[[]],[[]],[[]],[[["u32",15]],["arc",3]],null,[[],["savedata",4]],[[]],[[["u32",15],["i32",15],["usize",15]],["string",3]],[[],["arc",3]],null,[[["u32",15],["i32",15]]],[[["u32",15],["i32",15],["tokenbucket",3]]],[[["u32",15],["i32",15],["tokenbucket",3]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15],["tokenbucket",3]]],[[["savedata",4],["u32",15],["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["arc",3]],null,[[["usize",15]]],[[["usize",15]]],[[["savedata",4]],["bool",15]],[[["u32",15]]],[[["i32",15],["usize",15],["u32",15],["i32",15]],["option",4,[["vec",3,[["vec",3,[["u32",15]]]]]]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15],["i32",15]],["subspace",3]],[[["savedata",4],["u32",15],["i32",15]],["pathbuf",3]],[[["u32",15],["i32",15]],["bool",15]],[[["u32",15],["i32",15]],["vec",3]],[[["u32",15],["i32",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,null,[[],["u32",15]],[[["u32",15]],["i32",15]],[[],["i32",15]],[[["u32",15]],["arc",3]],null,[[],["str",15]],[[["arc",3]]],[[["arc",3],["option",4,[["pathbuf",3]]]],["result",6]],[[],["u32",15]],[[["u32",15],["i32",15]],["usize",15]],[[["savedata",4],["u32",15],["i32",15]],["option",4,[["box",3,[["read",8]]]]]],[[],["validprime",3]],[[]],null,[[["pathbuf",3]],["option",4,[["box",3,[["read",8]]]]]],[[["u32",15],["i32",15],["vec",3,[["usize",15]]]]],null,[[["u32",15],["i32",15]]],[[],["arc",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["arc",3]],null,null,[[["slicemut",4],["u32",15],["u32",15],["i32",15],["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15],["i32",15]]],[[]],[[["tokenbucket",3]]],[[["u32",15],["i32",15],["tokenbucket",3]]],[[["u32",15]]],[[["u32",15],["tokenbucket",3]]],[[["u32",15],["i32",15],["option",4,[["matrix",3]]]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15],["tokenbucket",3]]],[[]],[[["string",3],["arc",3],["arc",3],["u32",15],["i32",15]]],[[["string",3],["arc",3,[["resolution",3,[["ccc",6]]]]],["arc",3],["finitemodulehomomorphism",3]]],[[["u32",15]],["freemodulehomomorphism",3]],[[["u32",15]],["freemodulehomomorphism",3]],[[],["usize",15]],[[]],null,null,[[["string",3],["arc",3],["arc",3],["u32",15],["i32",15]]],[[],["i32",15]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["slicemut",4],["u32",15],["i32",15],["slice",4]]],[[["slicemut",4],["u32",15],["i32",15],["slice",4],["bool",15]]],[[["u32",15],["i32",15],["usize",15],["freemodulehomomorphism",3],["freemodulehomomorphism",3]]],[[["i32",15]]],[[],["arc",3]],[[],["arc",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["resolution_",3]],["bool",15]],null,[[["i32",15],["usize",15]],["secondarycomposite",3]],null,null,[[]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["u32",15],["i32",15],["usize",15]],["fpvector",4]],null,null,[[["u32",15]],["secondaryhomotopy",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],null,[[]],[[]],[[]],[[["arc",3,[["freemodule",3]]],["i32",15]]],[[["arc",3,[["freemodule",3]]],["arc",3,[["freemodule",3]]],["i32",15]]],[[["arc",3]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["char",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["config",3]],[[]],[[["option",4,[["pathbuf",3]]]],["result",6,[["resolution",3,[["ccc",6]]]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["config",3]],["bool",15]],[[],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["str",15]],["result",6,[["value",4]]]],null,[[["config",3]],["bool",15]],[[]],[[]],[[["str",15]],["result",6,[["value",4]]]],[[["slice",4],["i32",15],["u32",15]]],[[["u32",15],["hashmap",3]]],[[],["tokenbucket",3]],[[["option",4,[["algebratype",4]]]],["result",6,[["querymoduleresult",3]]]],[[["str",15],["option",4,[["algebratype",4]]]],["result",6,[["resolution",3,[["ccc",6]]]]]],[[],["nonzerousize",3]],[[],["result",6,[["usize",15]]]],[[],["result",6]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15],["validprime",3],["u32",15],["i32",15]],["result",6]],[[],["result",6,[["usize",15]]]],[[],["result",6]],[[["u32",15],["validprime",3],["u32",15],["i32",15]],["result",6]],null,null,null,[[["qm",3],["option",4,[["arc",3,[["modulehomomorphism",8]]]]],["option",4],["option",4,[["subspace",3]]],["i32",15]]],[[["ademalgebra",3],["i32",15],["usize",15]],["i32",15]],[[["ademalgebra",3],["i32",15],["usize",15]],["i32",15]],[[["arc",3],["i32",15],["usize",15]],["i32",15]],[[["vec",3],["usize",15],["usize",15]]],[[["arc",3],["chainmap",3,[["freemodulehomomorphism",3]]]],["yoneda",6]],[[["arc",3],["u32",15],["i32",15],["usize",15]],["yoneda",6]],[[["arc",3],["chainmap",3,[["freemodulehomomorphism",3]]]],["yoneda",6]]],"p":[[4,"FiniteModule"],[3,"FiniteModuleHomomorphism"],[13,"FDModule"],[13,"FPModule"],[13,"RealProjectiveSpace"],[8,"ChainComplex"],[8,"CochainComplex"],[8,"AugmentedChainComplex"],[4,"ChainComplexGrading"],[3,"StemIterator"],[3,"ChainMap"],[3,"FiniteAugmentedChainComplex"],[3,"FiniteChainComplex"],[3,"TensorChainComplex"],[8,"FreeChainComplex"],[3,"ChainHomotopy"],[8,"BoundedChainComplex"],[3,"TensorChainMap"],[4,"SaveData"],[3,"Resolution"],[3,"ResolutionHomomorphism"],[3,"SecondaryComposite"],[3,"SecondaryHomotopy"],[3,"SecondaryLift"],[3,"ChecksumWriter"],[3,"ChecksumReader"],[3,"Config"],[3,"QueryModuleResult"],[8,"HashMapTuple"]]},\
"filtration_one":{"doc":"This computes all available filtration one products for a …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"fp":{"doc":"","t":[17,17,17,17,11,14,0,11,11,11,11,11,11,0,0,0,11,0,0,0,0,17,17,7,17,17,17,6,17,17,17,17,17,17,14,3,5,12,5,5,5,11,11,11,11,5,5,11,11,5,12,5,5,5,5,5,5,11,5,11,11,11,5,3,3,3,3,3,3,12,12,12,12,12,12,12,12,0,12,0,12,12,12,12,0,12,12,0,0,12,12,3,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,8,3,3,3,3,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,14,5,11,11,11,11,11,11,5,5,5,5,5,11,10,10,11,11,11,11,11,11,11,12,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,5,0,6,5,5,5,4,4,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,6,6,6,11,11,11,11,11,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["MAX_MULTINOMIAL_LEN","NUM_PRIMES","PRIMES","PRIME_TO_INDEX_MAP","add_assign","const_for","constants","deserialize","fmt","fmt","from","from","from","limb","matrix","prime","serialize","simd","vector","vector_2","vector_inner","BINOMIAL4_TABLE","BINOMIAL4_TABLE_SIZE","BINOMIAL_TABLE","BITS_PER_LIMB","BYTES_PER_LIMB","INVERSE_TABLE","Limb","MAX_MULTINOMIAL_LEN","MAX_PRIME","NOT_A_PRIME","NUM_PRIMES","PRIMES","PRIME_TO_INDEX_MAP","populate_binomial_table","LimbBitIndexPair","add","bit_index","bit_length","bit_length_const","bitmask","borrow","borrow_mut","clone","clone_into","entries_per_limb","entries_per_limb_const","from","into","is_reduced","limb","limb_bit_index_pair","number","pack","range","reduce","sign_rule","to_owned","truncate","try_from","try_into","type_id","unpack","AugmentedMatrix","Matrix","MatrixSliceMut","QuasiInverse","Subquotient","Subspace","col_end","col_start","columns","dimension","end","gens","image","inner","m4ri","matrix","matrix_inner","p","p","pivots","preimage","quasi_inverse","quotient","start","subquotient","subspace","vectors","vectors","M4riTable","add","borrow","borrow_mut","clear","columns","data","default","fmt","from","generate","into","is_empty","len","min_limb","new","reduce","reduce_naive","rows","rows","try_from","try_into","type_id","AugmentedMatrix","Matrix","MatrixSliceMut","add_assign","add_identity","apply","as_slice_mut","assign","augmented_from_vec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","col_end","col_start","columns","columns","columns","compute_image","compute_image","compute_kernel","compute_kernel","compute_quasi_inverse","compute_quasi_inverse","compute_quasi_inverses","deref","deref","deref_mut","deref_mut","drop_first","end","eq","extend_column_dimension","extend_column_dimension","extend_image","extend_to_surjection","find_first_row_in_block","find_pivots_permutation","fmt","fmt","from","from","from","from_bytes","from_rows","from_vec","index","index_mut","initialize_pivots","inner","into","into","into","into_matrix","is_zero","iter","iter","iter_mut","iter_mut","mul_assign","new","new","new_with_capacity","new_with_capacity","p","p","pivots","pivots","pivots_mut","prime","read_pivot","row","row_mut","row_op","row_reduce","row_segment","row_slice","rows","rows","segment","set_to_zero","slice_mut","split_borrow","start","to_bytes","to_owned","to_owned","to_string","to_vec","trim","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vectors","vectors","write_pivot","QuasiInverse","apply","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_bytes","image","image_dimension","into","ne","new","pivots","preimage","preimage","prime","source_dimension","stream_quasi_inverse","target_dimension","to_bytes","to_owned","try_from","try_into","type_id","Subquotient","add_gen","ambient_dimension","borrow","borrow_mut","clear_gens","clone","clone_into","dimension","dimension","fmt","from","gens","gens","into","is_empty","new","new_full","prime","quotient","quotient","reduce","reduce_by_quotient","reduce_matrix","set_to_full","subquotient","subspace_dimension","subspace_gens","to_owned","to_string","try_from","try_into","type_id","zeros","Subspace","add_basis_elements","add_vector","add_vectors","ambient_dimension","basis","borrow","borrow_mut","clone","clone_into","contains","deref","deref_mut","dimension","empty_space","entire_space","eq","fmt","fmt","from","from_bytes","into","matrix","ne","new","reduce","row_reduce","set_to_entire","set_to_zero","to_bytes","to_owned","to_string","try_from","try_into","type_id","0","Binomial","BinomialIterator","BitflagIterator","InvalidPrimeError","ValidPrime","binomial","binomial2","binomial4","binomial4_rec","binomial_odd","binomial_odd_is_zero","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deserialize","direct_binomial","eq","flag","fmt","fmt","fmt","fmt","from","from","from","from","from_str","impl_binomial","integer_power","into","into","into","into","into_iter","into_iter","inverse","is_valid_prime","log2","logp","minus_one_to_the_n","multinomial","multinomial2","multinomial_odd","ne","new","new","new","new_fixed_length","next","next","p","power_mod","remaining","serialize","set_bit_iterator","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","value","LIMBS_PER_SIMD","add_simd","x86_64","SimdLimb","load","store","xor","FpVector","FpVectorNonZeroIterator","Slice","SliceMut","_2","_2","_2","_2","_3","_3","_3","_3","_5","_5","_5","_5","_7","_7","_7","_7","add","add","add_assign","add_basis_element","add_basis_element","add_carry","add_nosimd","add_offset","add_offset_nosimd","add_tensor","add_truncate","as_slice","as_slice","as_slice_mut","assign","assign","assign_partial","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copy","copy_from_slice","deserialize","dispatch_vector","dispatch_vector_inner","entry","entry","eq","extend_len","first_nonzero","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_slice","hash","impl_try_into","into","into","into","into","into_iter","is_empty","is_empty","is_zero","is_zero","iter","iter","iter_nonzero","iter_nonzero","len","len","limbs","limbs_mut","match_p","ne","new","new_with_capacity","next","next","num_limbs","padded_len","prime","prime","prime","scale","scale","serialize","set_entry","set_entry","set_scratch_vector_size","set_to_zero","set_to_zero","sign_rule","slice","slice","slice_mut","slice_mut","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","trim_start","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","FpVector","FpVectorNonZeroIterator","Slice","SliceMut","from_bytes","from_slice","new","new_with_capacity","num_limbs","padded_len","to_bytes","AddShiftLeftData","AddShiftRightData","FpVectorIterator","FpVectorNonZeroIteratorP","FpVectorP","SliceMutP","SliceP","add","add","add_basis_element","add_basis_element","add_carry","add_carry_limb","add_nosimd","add_offset","add_offset_nosimd","add_shift_left","add_shift_none","add_shift_right","add_tensor","add_truncate","as_slice","as_slice","as_slice_mut","assign","assign","assign_partial","bit_length","bit_mask","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copy","copy_from_slice","counter","cur_limb","cur_limb","cur_limb_entries_left","dim","end","end","entries_left","entries_per_limb_m_1","entry","entry","eq","extend_len","first_nonzero","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bytes","from_raw_parts","from_slice","hash","idx","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","is_zero","is_zero","iter","iter","iter_nonzero","iter_nonzero","len","len","len","len","limb_index","limb_index","limb_masks","limb_range","limb_range_inner","limbs","limbs","limbs","limbs","limbs","limbs","limbs_mut","mask_first_limb","mask_first_limb_a","mask_first_limb_b","mask_last_limb_a","mask_last_limb_a","mask_last_limb_b","mask_last_limb_b","mask_middle_limb_a","mask_middle_limb_a","mask_middle_limb_b","mask_middle_limb_b","max_limb_mask","max_mask","max_mask","min_limb_mask","min_mask","min_mask","min_source_limb","min_source_limb","min_target_limb","min_target_limb","ne","new","new","new","new","new","new_","new_with_capacity","new_with_capacity_","next","next","num_limbs","number_of_source_limbs","number_of_source_limbs","number_of_target_limbs","number_of_target_limbs","offset","offset_shift","offset_shift","padded_len","prime","prime","prime","reduce_limbs","scale","scale","set_entry","set_entry","set_scratch_vector_size","set_to_zero","set_to_zero","sign_rule","skip_n","slice","slice","slice_mut","slice_mut","start","start","tail_shift","tail_shift","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","trim_start","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero_bits","zero_bits"],"q":["fp","","","","","","","","","","","","","","","","","","","","","fp::constants","","","","","","","","","","","","","","fp::limb","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::m4ri","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::matrix_inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::quasi_inverse","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::subquotient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::matrix::subspace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::prime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::simd","","","fp::simd::x86_64","","","","fp::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fp::vector::FpVector","","","","fp::vector::FpVectorNonZeroIterator","","","","fp::vector::Slice","","","","fp::vector::SliceMut","","","","fp::vector_2","","","","","","","","","","","fp::vector_innerd":["","The number of primes that are supported.","An array containing the first <code>NUM_PRIMES</code> prime numbers.","For any integer <code>i</code> less than or equal to <code>MAX_PRIME</code>, …","","","","","","","","","","","","","","","This module is provides wrappers around the contents of …","This module replaces <code>vector</code> when <code>odd-primes</code> is disabled. …","","","","","The number of bits each <code>Limb</code> occupies.","The number of bytes each <code>Limb</code> occupies.","","","","The <code>MAX_PRIME</code>th prime number. Constructing a <code>ValidPrime</code> …","A sentinel value. <code>PRIME_TO_INDEX_MAP[i] == NOT_A_PRIME</code> if …","The number of primes that are supported.","An array containing the first <code>NUM_PRIMES</code> prime numbers.","For any integer <code>i</code> less than or equal to <code>MAX_PRIME</code>, …","","A struct containing the information required to access a …","Return the <code>Limb</code> whose <code>i</code>th entry is …","","Return the number of bits an element of $\\\\mathbb{F}_P$ …","Return the number of bits an element of $\\\\mathbb{F}_P$ …","If <code>l</code> is a limb of elements of $\\\\mathbb{F}_p$, then …","","","","","The number of elements of $\\\\mathbb{F}_p$ that fit in a …","The number of elements of $\\\\mathbb{F}_p$ that fit in a …","","","Check whether or not a limb is reduced, i.e. whether every …","","","Return the number of limbs required to hold <code>dim</code> entries.","Given an interator of <code>u32</code>’s, pack all of them into a …","Return the <code>Range&lt;usize&gt;</code> starting at the index of the limb …","Return the <code>Limb</code> whose entries are the entries of <code>limb</code> …","","","Return either <code>Some(sum)</code> if no carries happen in the limb, …","","","","Give an iterator over the entries of <code>limb</code>.","This models an augmented matrix.","A matrix! In particular, a matrix with values in F_p. The …","","Given a matrix M, a quasi-inverse Q is a map from the …","","A subspace of a vector space.","","","","","","","","","","","","","","The pivot columns of the matrix. <code>pivots[n]</code> is <code>k</code> if column <code>n</code>…","","","","","","","","","M4RI works as follows — first row reduce k rows using …","Add a row to the table.","","","Clear the contents of the table","The list of pivot columns of the rows, in the format …","The 2^k linear combinations of the k rows, apart from the …","","","","Generates the table from the known data <code>num</code> is the number …","","Whether the table has no rows","Number of rows in the M4riTable","The smallest non-zero limb in this table. We use this when …","Create a table with space for <code>k</code> vectors, each with <code>cols</code> …","","","Get the list of pivot rows","The indices of new rows in the table","","","","This models an augmented matrix.","A matrix! In particular, a matrix with values in F_p. The …","","","","Applies a matrix to a vector.","","","Produces a padded augmented matrix from an <code>&amp;[Vec&lt;u32&gt;]</code> …","","","","","","","","","","","","","","Gets the number of columns in the matrix.","","Computes the quasi-inverse of a matrix given a rref of […","","Computes the kernel from an augmented matrix in rref. To …","","Computes the quasi-inverse of a matrix given a rref of […","","This function computes quasi-inverses for matrices A, B …","","","","","","","","","","Given a matrix in rref, say [A|B|C], where B lies between …","Given a matrix M in rref, add rows to make the matrix …","Given a row reduced matrix, find the first row whose pivot …","This is very similar to row_reduce, except we only need to …","","","","","","","Produces a matrix from a list of rows.","Produces a Matrix from an <code>&amp;[Vec&lt;u32&gt;]</code> object. If the …","Returns the ith row of the matrix","Returns the ith row of the matrix","Set the pivots to -1 in every entry. This is called by …","","","","","","","","","","","","Produces a new matrix over F_p with the specified number …","","","","","","","The pivot columns of the matrix. <code>pivots[n]</code> is <code>k</code> if column <code>n</code>…","","","Read a vector of <code>isize</code> of length <code>dim</code>.","","","Subtracts <code>coef * self[source]</code> from <code>self[target]</code>.","Perform row reduction to reduce it to reduced row echelon …","","","","Gets the number of rows in the matrix.","","","","Mutably borrows <code>x[i]</code> and <code>x[j]</code>.","","","","","","","","","","","","","","","","","","","Read a vector of <code>isize</code>","Given a matrix M, a quasi-inverse Q is a map from the …","Apply the quasi-inverse to an input vector and add a …","","","","","","","","","","","","","","","","","","","Given a data file containing a quasi-inverse, apply it to …","","","","","","","","","","","","","","","","","","","","","","","Create a new subquotient of an ambient space of dimension …","Create a new subquotient of an ambient space of dimension …","","","","Given a vector <code>elt</code>, project <code>elt</code> to the complement and …","Project the vector onto the complement of the quotient …","","Set the subquotient to be the full ambient space …","Given a chain of subspaces <code>subspace</code> &lt; <code>space</code> &lt; k^…","The dimension of the subspace part of the subquotient.","The generators of the subspace part of the subquotient.","","","","","","","A subspace of a vector space.","","This adds a vector to the subspace. This function assumes …","","","Returns a basis of the subspace.","","","","","","","","","","","","","","","","","","","","Projects a vector to a complement of the subspace. The …","","Sets the subspace to be the entire subspace.","Sets the subspace to be the zero subspace.","","","","","","","","A number satisfying the Binomial trait supports computing …","Iterates through all numbers with the same number of bits. …","","","","Binomial coefficient n choose k.","mod 2 binomial coefficient n choose k","Binomial coefficients mod 4. We pre-compute the …","Compute binomial coefficients mod 4 using the recursion …","Compute odd binomial coefficients mod p, where p is odd. …","Checks whether n choose k is zero mod p. Since we don’t …","","","","","","","","","","","","","This uses a lookup table for n choose k when n and k are …","","","","","","","","","","","","","Computes b^e.","","","","","","","","","Compute the base 2 log of a number, rounded down to the …","","","Multinomial coefficient of the list l","mod 2 multinomial coefficient","Computes the multinomial coefficient mod p using Lucas’ …","","","","","","","","","Compute b^e mod p.","","","","","","","","","","","","","","","","","","","","Get the underlying prime. This is the same function as …terator over non-zero entries of an FpVector. This is …","An <code>FpVectorP</code> is a vector over $\\\\mathbb{F}_p$ for a fixed …","A <code>SliceMutP</code> is a mutable slice of an <code>FpVectorP</code>. This …","A SliceP is a slice of an FpVectorP. This immutably …","","","","","","","","Add <code>other</code> to <code>self</code> on the assumption that the first <code>offset</code> …","Add <code>other</code> to <code>self</code> on the assumption that the first <code>offset</code> …","","Adds <code>c</code> * <code>other</code> to <code>self</code>. <code>other</code> must have the same length, …","","<code>coeff</code> need not be reduced mod p. Adds v otimes w to self.","","","","","","TODO: improve efficiency","A version of <code>FpVectorP::assign</code> that allows <code>other</code> to be …","","","","","","","","","","","","","","","","","","","","","Generates a version of itself with a shorter lifetime","This replaces the contents of the vector with the contents …","","","","","","","","","","","","","This function ensures the length of the vector is at least …","Find the index and value of the first non-zero entry of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TODO: implement prime 2 version","","","","","","","","","","","This function underflows if <code>self.end == 0</code>, which happens …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This clears the vector and sets the length to <code>len</code>. This is …","","","","","","","","","","","","","","","","Converts a slice to an owned FpVectorP. This is vastly …","","","Permanently remove the first <code>n</code> elements in the vector. <code>n</code> …","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,1,1,2,2,2,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,4,4,4,0,0,4,4,0,4,0,0,0,0,0,0,4,0,4,4,4,0,0,0,0,0,0,0,5,5,6,7,8,7,9,8,0,10,0,5,6,6,9,0,7,8,0,0,5,6,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,6,5,6,6,6,6,5,6,8,5,6,8,6,8,6,8,5,5,5,6,6,6,8,6,8,6,8,8,6,8,6,8,8,8,6,6,8,6,6,6,6,6,6,5,6,8,6,6,6,6,6,6,8,5,6,8,8,6,5,6,5,6,6,6,8,6,8,5,6,6,6,6,6,6,5,5,6,6,8,5,5,6,8,6,6,6,8,6,6,8,6,6,6,5,6,8,5,6,8,5,6,8,5,6,6,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,0,0,0,0,0,13,13,13,13,13,13,14,15,16,12,14,15,16,12,16,16,16,16,0,16,14,16,16,12,12,14,15,16,12,16,0,0,14,15,16,12,14,15,0,0,0,0,0,13,13,13,16,14,15,16,14,14,15,16,0,14,16,14,16,16,12,14,15,16,16,12,14,15,16,12,14,15,16,12,16,15,0,0,0,0,0,0,0,0,0,0,0,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,18,20,18,18,20,18,18,18,18,20,18,18,20,18,18,20,18,17,18,19,20,17,18,19,20,18,19,18,19,20,18,18,0,0,18,19,18,18,18,18,18,19,19,20,17,18,19,19,19,19,20,20,20,18,18,18,0,17,18,19,20,17,18,19,18,19,18,19,18,19,18,19,18,18,0,18,18,18,17,17,18,18,18,19,20,18,20,18,18,20,18,18,20,18,18,19,18,20,18,18,19,19,18,19,18,17,18,19,20,17,18,19,20,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,37,38,37,38,37,37,37,37,37,38,38,38,38,37,37,38,37,37,38,37,39,39,40,41,39,42,37,43,38,40,41,39,42,37,43,38,37,43,37,43,38,37,39,39,42,42,42,43,38,39,39,37,43,37,37,37,37,43,38,40,41,39,42,37,37,43,43,38,38,37,37,37,37,42,40,41,39,42,37,43,38,39,42,37,43,37,43,37,43,37,43,39,37,43,37,39,42,43,43,43,37,39,42,37,43,38,37,40,41,41,40,41,40,41,40,41,40,41,43,40,41,43,40,41,40,41,40,41,37,40,41,39,42,37,37,37,37,39,42,37,40,41,40,41,43,40,41,37,37,43,38,38,37,38,37,38,37,37,38,37,39,37,43,37,38,43,38,40,41,37,37,43,43,37,43,37,40,41,39,42,37,43,38,40,41,39,42,37,43,38,40,41,39,42,37,43,38,40,41],"f":[null,null,null,null,[[["fpvector",6]]],null,null,[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["slice",6]],["slice",6]],[[["slicemut",6]],["slice",6]],[[["slicemut",6]],["slicemut",6]],null,null,null,[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15],["u64",15],["u32",15]],["u64",15]],null,[[["validprime",3]],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[]],[[]],[[],["limbbitindexpair",3]],[[]],[[["validprime",3]],["usize",15]],[[],["usize",15]],[[]],[[]],[[["u64",15]],["bool",15]],null,[[["usize",15]],["limbbitindexpair",3]],[[["usize",15]],["usize",15]],[[["iterator",8]],["u64",15]],[[["usize",15],["usize",15]],["range",3,[["usize",15]]]],[[["u64",15]],["u64",15]],[[["u64",15],["u64",15]],["u32",15]],[[]],[[["u64",15]],["option",4,[["u64",15]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["usize",15]]],[[]],[[]],[[]],null,null,[[],["m4ritable",3]],[[["formatter",3]],["result",6]],[[]],[[["matrix",3]]],[[]],[[],["bool",15]],[[],["usize",15]],null,[[["usize",15],["usize",15]]],[[]],[[["matrix",3],["usize",15]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["matrix",3]]],[[]],[[["slicemut",4],["u32",15],["slice",4]]],[[],["matrixslicemut",3]],[[["matrix",3]]],[[["validprime",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["matrix",3]],[[],["augmentedmatrix",3]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],null,[[["usize",15],["usize",15]],["subspace",3]],[[],["subspace",3]],[[["usize",15]],["subspace",3]],[[],["subspace",3]],[[["usize",15],["usize",15]],["quasiinverse",3]],[[],["quasiinverse",3]],[[]],[[]],[[],["matrix",3]],[[]],[[],["matrix",3]],[[],["augmentedmatrix",3]],null,[[],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15],["subspace",3],["usize",15]],["vec",3,[["usize",15]]]],[[["usize",15],["usize",15],["usize",15]],["vec",3,[["usize",15]]]],[[["usize",15]],["usize",15]],[[["iterator",8]],["vec",3,[["usize",15]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["validprime",3],["usize",15],["usize",15]],["result",6,[["matrix",3]]]],[[["validprime",3],["vec",3,[["fpvector",4]]],["usize",15]]],[[["validprime",3]],["matrix",3]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[],["matrix",3]],[[],["bool",15]],[[]],[[],["iter",3,[["fpvector",4]]]],[[]],[[],["itermut",3,[["fpvector",4]]]],[[["u32",15]]],[[["validprime",3],["usize",15],["usize",15]],["matrix",3]],[[["validprime",3],["usize",15]]],[[["validprime",3],["usize",15],["usize",15],["usize",15],["usize",15]],["matrix",3]],[[["validprime",3],["usize",15],["usize",15],["usize",15]]],null,null,[[]],null,[[]],[[],["validprime",3]],[[["usize",15]],["result",6,[["vec",3,[["isize",15]]]]]],[[["usize",15]],["slice",4]],[[["usize",15]],["slicemut",4]],[[["usize",15],["usize",15],["usize",15],["validprime",3]]],[[],["usize",15]],[[["usize",15],["usize",15],["usize",15]],["slicemut",4]],[[["usize",15],["usize",15]],["matrixslicemut",3]],[[],["usize",15]],[[],["usize",15]],[[["usize",15],["usize",15]],["matrixslicemut",3]],[[]],[[["usize",15],["usize",15],["usize",15],["usize",15]],["matrixslicemut",3]],[[["usize",15],["usize",15]]],null,[[],["result",6]],[[]],[[]],[[],["string",3]],[[],["vec",3,[["vec",3,[["u32",15]]]]]],[[["usize",15],["usize",15],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["result",6]],null,[[["slicemut",4],["u32",15],["slice",4]]],[[]],[[]],[[],["quasiinverse",3]],[[]],[[["quasiinverse",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["validprime",3]],["result",6]],null,[[],["usize",15]],[[]],[[["quasiinverse",3]],["bool",15]],[[["option",4,[["vec",3,[["isize",15]]]]],["matrix",3]]],[[],["option",4]],[[],["matrix",3]],null,[[],["validprime",3]],[[],["usize",15]],[[["validprime",3]],["result",6]],[[],["usize",15]],[[],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["slice",4]]],[[],["usize",15]],[[]],[[]],[[]],[[],["subquotient",3]],[[]],[[],["usize",15]],null,[[["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[],["bool",15]],[[["validprime",3],["usize",15]]],[[["validprime",3],["usize",15]]],[[],["validprime",3]],[[["slice",4]]],null,[[["slicemut",4]],["vec",3,[["u32",15]]]],[[["slicemut",4]]],[[["matrix",3]],["vec",3,[["vec",3,[["u32",15]]]]]],[[]],[[["subspace",3],["subspace",3]],["vec",3,[["usize",15]]]],[[],["usize",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["subspace",3]],null,[[]],[[["slice",4]],["usize",15]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["subspace",3]],[[]],[[["slice",4]],["bool",15]],[[],["matrix",3]],[[],["matrix",3]],[[],["usize",15]],[[["validprime",3],["usize",15]]],[[["validprime",3],["usize",15]]],[[["subspace",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["validprime",3]],["result",6]],[[]],null,[[["subspace",3]],["bool",15]],[[["validprime",3],["usize",15],["usize",15]]],[[["slicemut",4]]],[[],["usize",15]],[[]],[[]],[[],["result",6]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[["validprime",3]]],[[]],[[]],[[]],[[["validprime",3]]],[[["validprime",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["validprime",3]],[[]],[[]],[[],["result",4]],[[["validprime",3],["usize",15],["usize",15]],["u32",15]],[[["validprime",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4,[["string",3]]]],null,[[["u32",15],["u32",15]],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["validprime",3],["u32",15]],["u32",15]],[[["u32",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["u32",15],["u32",15]],["u32",15]],[[["u32",15],["i32",15]],["u32",15]],[[["validprime",3]]],[[]],[[["validprime",3]]],[[["validprime",3]],["bool",15]],[[["u64",15]]],[[["usize",15]]],[[["u32",15]]],[[["u64",15],["usize",15]]],[[],["option",4]],[[],["option",4]],null,[[["u32",15],["u32",15],["u32",15]],["u32",15]],null,[[],["result",4]],[[["u64",15]]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["u32",15]],["result",4,[["invalidprimeerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],null,null,[[["usize",15]]],null,null,[[],["__m128i",3]],[[["__m128i",3]]],[[["__m128i",3],["__m128i",3]],["__m128i",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15]]],[[["slice",4],["u32",15]]],[[["fpvector",4]]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[["u32",15]],["bool",15]],[[["u32",15]]],[[["u32",15],["usize",15]]],[[["u32",15],["usize",15]]],[[["usize",15],["u32",15],["slice",4],["slice",4]]],[[["u32",15]],["option",4]],[[],["slice",4]],[[],["slice",4]],[[],["slicemut",4]],[[]],[[["slice",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpvector",4]],[[],["slice",4]],[[]],[[]],[[],["slicemut",4]],[[]],[[],["result",4]],null,null,[[["usize",15]],["u32",15]],[[["usize",15]],["u32",15]],[[["fpvector",4]],["bool",15]],[[["usize",15]]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["fpvector",4]],["slice",4]],[[["slicemut",4]],["slice",4]],[[["slice",4]],["slice",4]],[[]],[[["fpvector",4]],["slicemut",4]],[[["slicemut",4]],["slicemut",4]],[[]],[[["validprime",3],["usize",15]],["result",6]],[[["validprime",3]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpvectoriterator",3]],[[],["fpvectoriterator",3]],[[],["fpvectornonzeroiterator",4]],[[],["fpvectornonzeroiterator",4]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[["fpvector",4]],["bool",15]],[[["validprime",3],["usize",15]],["fpvector",4]],[[["validprime",3],["usize",15],["usize",15]],["fpvector",4]],[[],["option",4]],[[],["option",4]],[[["validprime",3],["usize",15]],["usize",15]],[[["validprime",3],["usize",15]],["usize",15]],[[],["validprime",3]],[[],["validprime",3]],[[],["validprime",3]],[[["u32",15]]],[[["u32",15]]],[[],["result",4]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[["usize",15]]],[[]],[[]],[[],["bool",15]],[[["usize",15],["usize",15]],["slice",4]],[[["usize",15],["usize",15]],["slice",4]],[[["usize",15],["usize",15]],["slicemut",4]],[[["usize",15],["usize",15]],["slicemut",4]],[[],["result",6]],[[]],[[],["fpvector",4]],[[]],[[],["string",3]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["validprime",3],["usize",15]],["result",6]],[[["validprime",3]]],[[["validprime",3],["usize",15]],["fpvector",6]],[[["validprime",3],["usize",15],["usize",15]],["fpvector",6]],[[["validprime",3],["usize",15]],["usize",15]],[[["validprime",3],["usize",15]],["usize",15]],[[],["result",6]],null,null,null,null,null,null,null,[[["fpvectorp",3],["u32",15]]],[[["slicep",3],["u32",15]]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[["u32",15]],["bool",15]],[[["usize",15],["u64",15],["u32",15]],["bool",15]],[[["fpvectorp",3],["u32",15]]],[[["fpvectorp",3],["u32",15],["usize",15]]],[[["fpvectorp",3],["u32",15],["usize",15]]],[[["slicep",3],["u32",15]]],[[["slicep",3],["u32",15]]],[[["slicep",3],["u32",15]]],[[["usize",15],["u32",15],["slicep",3],["slicep",3]]],[[["u32",15]],["option",4]],[[],["slicep",3]],[[],["slicep",3]],[[],["slicemutp",3]],[[]],[[["slicep",3]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpvectorp",3]],[[],["slicep",3]],[[]],[[]],[[],["slicemutp",3]],[[]],null,null,null,null,null,null,null,null,null,[[["usize",15]],["u32",15]],[[["usize",15]],["u32",15]],[[["fpvectorp",3]],["bool",15]],[[["usize",15]]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fpvectorp",3]]],[[]],[[["fpvectorp",3]]],[[["validprime",3],["usize",15]],["result",6]],[[["usize",15],["vec",3,[["u64",15]]]]],[[["validprime",3]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpvectoriterator",3]],[[],["fpvectoriterator",3]],[[],["fpvectornonzeroiteratorp",3]],[[],["fpvectornonzeroiteratorp",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,[[]],[[],["range",3,[["usize",15]]]],[[],["range",3,[["usize",15]]]],[[]],null,null,null,null,null,[[]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[["slicep",3],["usize",15]],["u64",15]],[[],["u64",15]],null,null,[[],["u64",15]],null,null,null,null,null,null,[[["fpvectorp",3]],["bool",15]],[[["slicep",3],["slicep",3]]],[[["slicep",3],["slicep",3]]],[[["slicep",3]]],[[["slicep",3]]],[[["validprime",3],["usize",15]],["fpvector",6]],[[["usize",15]]],[[["validprime",3],["usize",15],["usize",15]],["fpvector",6]],[[["usize",15],["usize",15]]],[[],["option",4]],[[],["option",4]],[[["validprime",3],["usize",15]],["usize",15]],null,null,null,null,[[],["usize",15]],null,null,[[["validprime",3],["usize",15]],["usize",15]],[[],["validprime",3]],[[],["validprime",3]],[[],["validprime",3]],[[]],[[["u32",15]]],[[["u32",15]]],[[["usize",15],["u32",15]]],[[["usize",15],["u32",15]]],[[["usize",15]]],[[]],[[]],[[],["bool",15]],[[["usize",15]]],[[["usize",15],["usize",15]],["slicep",3]],[[["usize",15],["usize",15]],["slicep",3]],[[["usize",15],["usize",15]],["slicemutp",3]],[[["usize",15],["usize",15]],["slicemutp",3]],null,null,null,null,[[],["result",6]],[[]],[[]],[[],["fpvectorp",3]],[[],["string",3]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[6,"FpVector"],[6,"Slice"],[6,"SliceMut"],[3,"LimbBitIndexPair"],[3,"MatrixSliceMut"],[3,"Matrix"],[3,"Subquotient"],[3,"AugmentedMatrix"],[3,"QuasiInverse"],[3,"Subspace"],[3,"M4riTable"],[3,"InvalidPrimeError"],[8,"Binomial"],[3,"BitflagIterator"],[3,"BinomialIterator"],[3,"ValidPrime"],[4,"FpVectorNonZeroIterator"],[4,"FpVector"],[4,"Slice"],[4,"SliceMut"],[13,"_2"],[13,"_3"],[13,"_5"],[13,"_7"],[13,"_2"],[13,"_3"],[13,"_5"],[13,"_7"],[13,"_2"],[13,"_3"],[13,"_5"],[13,"_7"],[13,"_2"],[13,"_3"],[13,"_5"],[13,"_7"],[3,"FpVectorP"],[3,"SliceMutP"],[3,"FpVectorIterator"],[3,"AddShiftLeftData"],[3,"AddShiftRightData"],[3,"FpVectorNonZeroIteratorP"],[3,"SliceP"]]},\
"hidden":{"doc":"Compute hidden α-extensions using precomputed tables. …","t":[5,5,5],"n":["gen_matrix","gen_matrix_aug","parse_matrix"],"q":["hidden","",""],"d":["","",""],"i":[0,0,0],"f":[[[],["vec",3,[["vec",3,[["augmentedmatrix",3]]]]]],[[],["vec",3,[["vec",3,[["augmentedmatrix",3]]]]]],[[["usize",15],["str",15]],["result",6]]],"p":[]},\
"lift_hom":{"doc":"Given an element in $\\\\Ext(M, N)$, this computes the …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"massey":{"doc":"Computes the triple Massey product up to a sign","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"num_gens":{"doc":"This prints the number of generators in each $\\\\Ext^{s, n + …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"once":{"doc":"","t":[13,13,3,8,14,8,8,8,16,16,16,17,3,3,3,3,4,16,8,8,14,13,13,13,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,4,3,8,13,8,14,3,3,3,3,3,8,3,3,13,8,8,8,8,6,13,8,8,8,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,10,10,10,10,10,10,10,10,10,11,11,11,11,11,12,12,12,12,5,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,10,11,11],"n":["AcqRel","Acquire","AtomicUsize","Eq","Eq","Index","IndexMut","IntoParallelIterator","Item","Item","Iter","MAX_OUTER_LENGTH","Mutex","MutexGuard","OnceBiVec","OnceVec","Ordering","Output","ParallelIterator","PartialEq","PartialEq","Relaxed","Release","SeqCst","USIZE_LEN","UnsafeCell","all","any","as_mut_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone_into","clone_into","clone_into","cloned","collect","compare_and_swap","compare_exchange","compare_exchange_weak","copied","count","data","data","data","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","extend","extend","failure","fetch_add","fetch_and","fetch_max","fetch_min","fetch_nand","fetch_or","fetch_sub","fetch_update","fetch_xor","filter","filter_map","find_any","find_first","find_last","find_map_any","find_map_first","find_map_last","flat_map","flat_map_iter","flatten","flatten_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_with","for_each","for_each_init","for_each_with","from","from","from","from","from","from","from","from","from","from","from","from","from_bivec","from_mut","from_vec","from_vec","get","get","get","get_inner","get_mut","get_mut","get_mut","hash","index","index","index","index","index_mut","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","inner","inner_index","inspect","intersperse","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_par_iter","into_vec","is_empty","is_empty","is_poisoned","iter","iter","iter_enum","last","last","len","len","len","load","load_consume","lock","lock","lock","lock","lock","map","map_init","map_with","max","max_by","max_by_key","max_degree","min","min_by","min_by_key","min_degree","min_degree","ne","ne","new","new","new","new","new","opt_len","panic_fuse","par_extend","par_extend","partition","partition_map","poison","poison","product","push","push","push_checked","push_checked","range","raw_get","reduce","reduce_with","serialize","serialize","store","success","sum","swap","to_owned","to_owned","to_owned","to_string","try_fold","try_fold_with","try_for_each","try_for_each_init","try_for_each_with","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_reduce","try_reduce_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unzip","update","v","value","while_some","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","align","alternate","args","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone_into","clone_into","cmp","custom","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","drop","empty_name","entries","entries","entries","entry","entry","entry","eq","field","field","fields","fill","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","has_fields","has_fields","has_key","hash","init","init","init","init","init","init","init","init","init","inner","inner","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","pieces","precision","precision","result","result","result","serialize","sign_aware_zero_pad","sign_minus","sign_plus","state","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str"],"q":["onceonce::fmtd":["Has the effects of both <code>Acquire</code> and <code>Release</code> together: For …","When coupled with a load, if the loaded value was written …","An integer type which can be safely shared between threads.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","<code>IntoParallelIterator</code> implements the conversion to a …","The type of item that the parallel iterator will produce.","The type of item that this parallel iterator produces. For …","The parallel iterator type that will be created.","The maximum length of a OnceVec is 2^{MAX_OUTER_LENGTH} - …","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","","A OnceVec is a push-only vector which is (hopefully) …","Atomic memory orderings","The returned type after indexing.","Parallel version of the standard iterator trait.","Trait for equality comparisons which are partial …","Derive macro generating an impl of the trait <code>PartialEq</code>.","No ordering constraints, only atomic operations.","When coupled with a store, all previous operations become …","Like <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …","","The core primitive for interior mutability in Rust.","Tests that every item in the parallel iterator matches the …","Searches for <strong>some</strong> item in the parallel iterator that …","Returns a mutable pointer to the underlying integer.","","","","","","","","","","","","","","","Takes two iterators and creates a new iterator over both.","","","","","","","Creates an iterator which clones all of its elements.  …","Creates a fresh collection containing all the elements …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Creates an iterator which copies all of its elements.  …","Counts the number of items in this parallel iterator.","","","","","Creates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","","Extend the <code>OnceVec</code> to up to index <code>new_max</code>, filling in the …","Extend the <code>OnceBiVec</code> to up to index <code>new_max</code>, filling in …","","Adds to the current value, returning the previous value.","Bitwise “and” with the current value.","Maximum with the current value.","Minimum with the current value.","Bitwise “nand” with the current value.","Bitwise “or” with the current value.","Subtracts from the current value, returning the previous …","Fetches the value, and applies a function to it that …","Bitwise “xor” with the current value.","Applies <code>filter_op</code> to each item of this iterator, producing …","Applies <code>filter_op</code> to each item of this iterator to get an …","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies <code>map_op</code> to each item of this iterator to get nested …","Applies <code>map_op</code> to each item of this iterator to get nested …","An adaptor that flattens parallel-iterable <code>Item</code>s into one …","An adaptor that flattens serial-iterable <code>Item</code>s into one …","Utilities for formatting and printing <code>String</code>s.","","","","","","","","","Parallel fold is similar to sequential fold except that the","Applies <code>fold_op</code> to the given <code>init</code> value with each item of …","Executes <code>OP</code> on each item produced by the iterator, in …","Executes <code>OP</code> on a value returned by <code>init</code> with each item …","Executes <code>OP</code> on the given <code>init</code> value with each item …","","","Creates a new mutex in an unlocked state ready for use. …","","","","","","","","Converts an <code>usize</code> into an <code>AtomicUsize</code>.","","","Get atomic access to a <code>&amp;mut usize</code>.","Creates a OnceVec from a Vec.","","","","Gets a mutable pointer to the wrapped value.","","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying integer.","","Performs the indexing (<code>container[index]</code>) operation.","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","Applies <code>inspect_op</code> to a reference to each item of this …","Intersperses clones of an element between items of this …","","","","","","","","Consumes this mutex, returning the underlying data.","Unwraps the value.","Consumes the atomic and returns the contained value.","","Converts <code>self</code> into a parallel iterator.","","","","Determines whether the mutex is poisoned.","","","","","","All data up to length self.len() are guaranteed to be …","This returns the “length” of the bivector, defined to …","","Loads a value from the atomic integer.","","Takes a lock on the <code>OnceVec</code>. The <code>OnceVec</code> cannot be updated …","Takes a lock on the <code>OnceBiVec</code>. The <code>OnceBiVec</code> cannot be …","Acquires a mutex, blocking the current thread until it is …","","","Applies <code>map_op</code> to each item of this iterator, producing a …","Applies <code>map_op</code> to a value returned by <code>init</code> with each item …","Applies <code>map_op</code> to the given <code>init</code> value with each item of …","Computes the maximum of all the items in the iterator. If …","Computes the maximum of all the items in the iterator with …","Computes the item that yields the maximum value for the …","This returns the largest degree in the bivector. This is …","Computes the minimum of all the items in the iterator. If …","Computes the minimum of all the items in the iterator with …","Computes the item that yields the minimum value for the …","","","","This method tests for <code>!=</code>.","","","Creates a new mutex in an unlocked state ready for use.","Constructs a new instance of <code>UnsafeCell</code> which will wrap …","Creates a new atomic integer.","Internal method used to define the behavior of this …","Wraps an iterator with a fuse in case of panics, to halt …","A parallel version of <code>extend</code>, where the function <code>f</code> is run …","A parallel version of <code>extend</code>, where the function <code>f</code> is run …","Partitions the items of a parallel iterator into a pair of …","Partitions and maps the items of a parallel iterator into …","","","Multiplies all the items in the iterator.","Append an element to the end of the vector.","","Push an element into the vector and check that it was …","","","Gets a mutable pointer to the wrapped value. The …","Reduces the items in the iterator into one item using <code>op</code>. …","Reduces the items in the iterator into one item using <code>op</code>. …","","","Stores a value into the atomic integer.","","Sums up the items in the iterator.","Stores a value into the atomic integer, returning the …","","","","","Performs a fallible parallel fold.","Performs a fallible parallel fold with a cloneable <code>init</code> …","Executes a fallible <code>OP</code> on each item produced by the …","Executes a fallible <code>OP</code> on a value returned by <code>init</code> with …","Executes a fallible <code>OP</code> on the given <code>init</code> value with each …","","","","","","","","","","","","","","","Attempts to acquire this lock.","Reduces the items in the iterator into one item using a …","Reduces the items in the iterator into one item using a …","","","","","","","","Immediately drops the guard, and consequently unlocks the …","Unzips the items of a parallel iterator into a pair of …","Mutates each item of this iterator before yielding it.","","","Creates an iterator over the <code>Some</code> items of this iterator, …","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","","Determines if the <code>#</code> flag was specified.","","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","","Character used as ‘fill’ whenever there is alignment.","","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","","Optionally specified precision for numeric types. …","","","","","","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","","Writes some formatted information into this instance.","Writes a string slice into this writer, returning whether …","","Writes some data to the underlying buffer contained within …"],"i":[1,1,0,0,0,0,0,0,2,3,2,0,0,0,0,0,0,4,0,0,0,1,1,1,0,0,3,3,5,6,7,8,9,10,1,5,6,7,8,9,10,1,5,3,6,7,1,6,7,1,3,3,5,5,5,3,3,6,7,8,6,8,10,5,6,7,8,9,9,10,1,5,6,7,8,9,9,10,1,5,8,5,3,6,7,8,9,9,10,1,5,11,6,7,1,6,7,1,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,0,6,7,8,9,9,10,1,5,3,3,3,3,3,6,7,8,8,8,9,10,10,10,1,5,5,7,5,6,7,6,7,10,6,8,10,5,1,4,6,6,7,12,6,6,7,6,7,8,9,10,1,5,8,6,3,3,6,7,8,9,10,1,5,8,10,5,6,2,6,6,7,8,6,7,7,6,7,6,7,6,5,5,6,7,8,6,9,3,3,3,3,3,3,7,3,3,3,7,7,7,11,6,7,8,10,5,3,3,6,7,3,3,8,9,3,6,7,6,7,7,10,3,3,8,5,5,1,3,5,6,7,1,9,3,3,3,3,3,6,7,8,9,10,1,5,6,7,8,9,10,1,5,8,3,3,6,7,8,9,10,1,5,8,3,3,5,10,3,0,0,0,13,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,13,0,0,0,14,14,14,15,15,16,17,18,19,20,14,13,21,15,16,17,18,19,20,14,13,21,15,14,21,15,21,15,21,21,14,14,14,14,14,21,16,17,18,19,20,14,13,21,15,16,17,18,19,20,14,13,21,15,21,16,17,18,19,20,14,13,21,15,17,18,19,20,18,19,20,21,16,17,17,14,14,16,17,18,19,20,16,14,14,22,23,24,25,26,27,28,29,30,13,21,21,15,15,16,17,20,15,0,16,17,18,19,20,14,13,21,15,16,20,20,21,16,17,18,19,20,14,13,21,15,18,19,16,17,18,19,20,14,13,21,15,20,14,14,21,15,14,14,16,17,20,15,14,14,14,20,21,15,21,15,16,17,18,19,20,14,13,21,15,16,17,18,19,20,14,13,21,15,16,17,18,19,20,14,13,21,15,20,14,14,0,31,14,31,14,14,31,14,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chain",3]],[[]],[[],["oncebivec",3]],[[],["ordering",4]],[[]],[[]],[[]],[[],["cloned",3]],[[]],[[["usize",15],["usize",15],["ordering",4]],["usize",15]],[[["usize",15],["usize",15],["ordering",4],["ordering",4]],["result",4,[["usize",15],["usize",15]]]],[[["usize",15],["usize",15],["ordering",4],["ordering",4]],["result",4,[["usize",15],["usize",15]]]],[[],["copied",3]],[[],["usize",15]],null,null,null,[[]],[[],["mutex",3]],[[],["unsafecell",3]],[[],["atomicusize",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4,[["mutex",3]]]],[[],["result",4,[["atomicusize",3]]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["oncevec",3]],["bool",15]],[[["oncebivec",3]],["bool",15]],[[["ordering",4]],["bool",15]],[[["usize",15]]],[[["i32",15]]],[[],["ordering",4]],[[["usize",15],["ordering",4]],["usize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["ordering",4],["ordering",4]],["result",4,[["usize",15],["usize",15]]]],[[["usize",15],["ordering",4]],["usize",15]],[[],["filter",3]],[[],["filtermap",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["flatmap",3]],[[],["flatmapiter",3]],[[],["flatten",3]],[[],["flatteniter",3]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[],["fold",3]],[[],["foldwith",3]],[[]],[[]],[[]],[[]],[[]],[[],["mutex",3]],[[]],[[["never",15]]],[[]],[[["never",15]]],[[]],[[],["unsafecell",3]],[[]],[[["usize",15]],["atomicusize",3]],[[]],[[["bivec",3]]],[[["usize",15]],["atomicusize",3]],[[["vec",3]]],[[["i32",15],["vec",3]]],[[["usize",15]],["option",4]],[[["i32",15]],["option",4]],[[]],[[]],[[],["result",4,[["poisonerror",3]]]],[[]],[[],["usize",15]],[[]],[[]],[[["u32",15]]],[[["usize",15]]],[[["i32",15]]],[[]],[[["u32",15]]],[[["usize",15]]],[[["i32",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["usize",15]]],[[],["inspect",3]],[[],["intersperse",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["poisonerror",3]]]],[[]],[[],["usize",15]],[[]],[[]],[[],["vec",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["i32",15]],null,[[["ordering",4]],["usize",15]],[[]],[[],["mutexguard",3]],[[],["mutexguard",3]],[[],["result",4,[["mutexguard",3],["poisonerror",3,[["mutexguard",3]]]]]],null,null,[[],["map",3]],[[],["mapinit",3]],[[],["mapwith",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["i32",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["i32",15]],null,[[["oncebivec",3]],["bool",15]],[[],["bool",15]],[[]],[[["i32",15]]],[[],["mutex",3]],[[],["unsafecell",3]],[[["usize",15]],["atomicusize",3]],[[],["option",4,[["usize",15]]]],[[],["panicfuse",3]],[[["usize",15]]],[[["i32",15]]],[[]],[[]],null,null,[[]],[[],["usize",15]],[[],["i32",15]],[[["usize",15]]],[[["i32",15]]],[[],["range",3,[["i32",15]]]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["ordering",4]]],[[],["ordering",4]],[[]],[[["usize",15],["ordering",4]],["usize",15]],[[]],[[]],[[]],[[],["string",3]],[[],["tryfold",3]],[[],["tryfoldwith",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["mutexguard",3],["trylockerror",4,[["mutexguard",3]]]]]],[[]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["mutexguard",3]]],[[]],[[],["update",3]],null,null,[[],["whilesome",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4,[["alignment",4]]]],null,[[],["bool",15]],null,[[],["option",4,[["str",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["error",3]],[[],["arguments",3]],[[]],[[]],[[["error",3]],["ordering",4]],[[],["error",3]],[[],["debuglist",3]],[[],["debugmap",3]],[[],["debugset",3]],[[["str",15]],["debugstruct",3]],[[["str",15]],["debugtuple",3]],[[],["error",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["str",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[],["debugset",3]],[[],["debuglist",3]],[[],["debugmap",3]],[[["debug",8]],["debugset",3]],[[["debug",8]],["debuglist",3]],[[["debug",8],["debug",8]],["debugmap",3]],[[["error",3]],["bool",15]],[[["str",15],["debug",8]],["debugstruct",3]],[[["debug",8]],["debugtuple",3]],null,[[],["char",15]],null,[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["u32",15]],null,[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],null,null,null,null,[[["arguments",3]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["debug",8]],["debugmap",3]],[[["str",15]],["result",4,[["error",3]]]],[[["bool",15],["str",15],["str",15]],["result",4,[["error",3]]]],[[["error",3]],["option",4,[["ordering",4]]]],null,[[],["option",4,[["usize",15]]]],null,null,null,null,[[],["result",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["debug",8]],["debugmap",3]],[[],["option",4,[["usize",15]]]],null,[[["write",8],["arguments",3]],["result",4,[["error",3]]]],[[["char",15]],["result",4,[["error",3]]]],[[["char",15]],["result",4,[["error",3]]]],[[["arguments",3]],["result",4,[["error",3]]]],[[["arguments",3]],["result",4,[["error",3]]]],[[["arguments",3]],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]]],"p":[[4,"Ordering"],[8,"IntoParallelIterator"],[8,"ParallelIterator"],[8,"Index"],[3,"AtomicUsize"],[3,"OnceVec"],[3,"OnceBiVec"],[3,"Mutex"],[3,"MutexGuard"],[3,"UnsafeCell"],[8,"PartialEq"],[8,"IndexMut"],[4,"Alignment"],[3,"Formatter"],[3,"Arguments"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"Write"]],"a":{"!=":[3,19],"==":[3,19],"[":[5,6],"[]":[5,6],"]":[5,6],"{:?}":[292],"{}":[299]}},\
"query":{"doc":"This library gives various functions that are used to …","t":[17,3,8,3,8,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,10,11,11,11,11,5],"n":["ARGV","Args","Display","RefCell","Write","as_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","clone","clone_from","clone_into","cmp","default","eq","flush","fmt","fmt","fmt","from","from","from","from","ge","get_mut","gt","inner","into","into","into_inner","into_iter","is_empty","is_write_vectored","le","len","lt","new","next","next_back","optional","partial_cmp","raw","replace","replace_with","size_hint","stderr","stdin","swap","take","to_owned","try_borrow","try_borrow_mut","try_borrow_unguarded","try_from","try_from","try_into","try_into","type_id","type_id","undo_leak","value","with_default","write","write_all","write_all_vectored","write_fmt","write_vectored","yes_no"],"q":["query","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An iterator over the arguments of a process, yielding a …","Format trait for an empty format, <code>{}</code>.","A mutable memory location with dynamically checked borrow …","A trait for objects which are byte-oriented sinks.","Returns a raw pointer to the underlying data in this cell.","","","Immutably borrows the wrapped value.","","","Mutably borrows the wrapped value.","","Creates a “by reference” adapter for this instance of …","Panics","Panics","","Panics","Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Panics","Flush this output stream, ensuring that all intermediately …","Formats the value using the given formatter.","","","","","","","Panics","Returns a mutable reference to the underlying data.","Panics","","","","Consumes the <code>RefCell</code>, returning the wrapped value.","","","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Panics","","Panics","Creates a new <code>RefCell</code> containing <code>value</code>.","","","","Panics","","Replaces the wrapped value with a new one, returning the …","Replaces the wrapped value with a new one computed from <code>f</code>, …","","Constructs a new handle to the standard error of the …","Constructs a new handle to the standard input of the …","Swaps the wrapped value of <code>self</code> with the wrapped value of …","Takes the wrapped value, leaving <code>Default::default()</code> in its …","","Immutably borrows the wrapped value, returning an error if …","Mutably borrows the wrapped value, returning an error if …","Immutably borrows the wrapped value, returning an error if …","","","","","","","Undo the effect of leaked guards on the borrow state of …","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.",""],"i":[0,0,0,0,0,1,2,1,1,1,2,1,1,3,1,1,1,1,1,1,3,4,2,1,2,1,1,1,1,1,1,2,2,1,1,2,2,3,1,2,1,1,2,2,0,1,0,1,1,2,0,0,1,1,1,1,1,1,2,1,2,1,2,1,1,1,0,3,3,3,3,3,0],"f":[null,null,null,null,null,[[]],[[]],[[]],[[],["ref",3]],null,[[]],[[],["refmut",3]],[[]],[[]],[[],["refcell",3]],[[["refcell",3]]],[[]],[[["refcell",3]],["ordering",4]],[[],["refcell",3]],[[["refcell",3]],["bool",15]],[[],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["never",15]]],[[],["refcell",3]],[[["refcell",3]],["bool",15]],[[]],[[["refcell",3]],["bool",15]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["refcell",3]],["bool",15]],[[],["usize",15]],[[["refcell",3]],["bool",15]],[[],["refcell",3]],[[],["option",4,[["string",3]]]],[[],["option",4,[["string",3]]]],[[["str",15]],["option",4]],[[["refcell",3]],["option",4,[["ordering",4]]]],[[["str",15]]],[[]],[[]],[[]],[[],["stderr",3]],[[],["stdin",3]],[[["refcell",3]]],[[]],[[]],[[],["result",4,[["ref",3],["borrowerror",3]]]],[[],["result",4,[["refmut",3],["borrowmuterror",3]]]],[[],["result",4,[["borrowerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[["str",15],["str",15]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["arguments",3]],["result",4,[["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[["str",15]],["bool",15]]],"p":[[3,"RefCell"],[3,"Args"],[8,"Write"],[8,"Display"]],"a":{"{}":[2]}},\
"resolution_size":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"resolve":{"doc":"Resolves a module up to a fixed $(s, t)$ and prints an …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"resolve_through_stem":{"doc":"Resolves a module up to a $(s, n)$ and prints an ASCII …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"save_bruner":{"doc":"This saves a resolution to Bruner’s format. This saves …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"secondary":{"doc":"This computes $d_2$ differentials in the Adams spectral …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"secondary_product":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"sseq":{"doc":"","t":[3,3,3,3,8,0,12,0,12,12,12,12,12,12,12,12,12,12,10,12,10,12,0,12,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,12,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,3,18,18,3,8,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,12,11,12,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11],"n":["Adams","DenseBigradedModule","Differential","Sseq","SseqProfile","bigraded","classes","differential","differentials","dimensions","error","first_empty_row","invalid","matrix","min_y","p","page_data","permanent_classes","profile","profile","profile_inverse","source_dim","sseq","target_dim","DenseBigradedModule","borrow","borrow_mut","defined","deref","deref_mut","dimension","dimensions","drop","from","init","into","max_x","max_y","min_x","min_y","min_y","new","range","set_dimension","try_from","try_into","type_id","Differential","add","borrow","borrow_mut","deref","deref_mut","drop","error","evaluate","first_empty_row","from","get_source_target_pairs","inconsistent","init","into","matrix","new","prime","reduce_target","set_to_zero","source_dim","target_dim","try_from","try_into","type_id","Adams","MIN_R","MIN_R","Sseq","SseqProfile","add_differential","add_permanent_class","borrow","borrow","borrow_mut","borrow_mut","classes","classes","clear","complete","defined","deref","deref","deref_mut","deref_mut","differentials","differentials","differentials_hitting","dimension","drop","drop","extend_differential","extend_page_data","from","from","inconsistent","init","init","into","into","invalid","invalid","max_x","max_y","min_x","min_y","new","p","page_data","page_data","permanent_classes","permanent_classes","profile","profile","profile","profile_inverse","profile_inverse","range","set_dimension","try_from","try_from","try_into","try_into","type_id","type_id","update","update_bidegree"],"q":["sseq","","","","","","","","","","","","","","","","","","","","","","","","sseq::bigraded","","","","","","","","","","","","","","","","","","","","","","","sseq::differential","","","","","","","","","","","","","","","","","","","","","","","","","sseq::sseq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","The direction of the differentials","","The first page of the spectral sequence","","x -&gt; y -&gt; r -&gt; differential","","","","x -&gt; y -&gt; validity. A bidegree is invalid if the page_data …","","","","x -&gt; y -&gt; r -&gt; E_r^{x, y} as a subquotient of the original …","x -&gt; y -&gt; permanent_classes","","","","","","","","","","","","","","","","","","","","","","","","","","This can only be set when bidegrees to the left and bottom …","","","","","Add a differential","","","","","","","This evaluates the differential on <code>source</code>, adding the …","","","An iterator of differentials in the form <code>(source, target)</code>","Whether the current set of differentials is inconsistent. …","","","","","","Given a subspace of the target space, project the target …","","","","","","","","","","","The direction of the differentials","Add a $d_r$ differential from bidegree $(x, y)$, with the …","Returns","","","","","","The first page of the spectral sequence","","Whether the calcuations at bidegree (x, y) are complete. …","","","","","","","x -&gt; y -&gt; r -&gt; differential","","","","","Ensure <code>self.differentials[x][y][r]</code> is defined. Must call …","Ensure <code>self.page_data[x][y][r]</code> is defined","","","Whether there is an inconsistent differential involving …","","","","","","x -&gt; y -&gt; validity. A bidegree is invalid if the page_data …","","","","","","","","x -&gt; y -&gt; r -&gt; E_r^{x, y} as a subquotient of the original …","","x -&gt; y -&gt; permanent_classes","","","","","","","","","","","","","","","This returns the vec of differentials to draw on each page."],"i":[0,0,0,0,0,0,1,0,1,2,3,3,1,3,2,1,1,1,4,1,4,3,0,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,0,0,1,1,5,1,5,1,1,1,1,1,1,5,1,5,1,1,1,1,1,5,1,1,1,5,1,1,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,1,4,5,1,1,5,1,5,1,5,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15],["i32",15],["i32",15]]],null,[[["i32",15],["i32",15],["i32",15]]],null,null,null,null,[[]],[[]],[[["i32",15],["i32",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["i32",15]],["usize",15]],null,[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,[[["i32",15],["i32",15]]],[[["i32",15]],["range",3,[["i32",15]]]],[[["i32",15],["i32",15],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["slice",4],["option",4,[["slice",4]]]],["bool",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["slice",4],["slicemut",4]]],null,[[]],[[],["vec",3]],[[],["bool",15]],[[],["usize",15]],[[]],null,[[["validprime",3],["usize",15],["usize",15]]],[[],["validprime",3]],[[["subspace",3]]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["i32",15],["i32",15],["i32",15],["slice",4],["slice",4]],["bool",15]],[[["i32",15],["i32",15],["slice",4]],["bool",15]],[[]],[[]],[[]],[[]],[[],["arc",3,[["densebigradedmodule",3]]]],null,[[]],[[["i32",15],["i32",15]],["bool",15]],[[["i32",15],["i32",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["i32",15]],["bivec",3]],null,[[["i32",15],["i32",15]]],[[["i32",15],["i32",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["i32",15],["i32",15]]],[[["i32",15],["i32",15],["i32",15]]],[[]],[[]],[[["i32",15],["i32",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["i32",15],["i32",15]],["bool",15]],null,[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["validprime",3],["i32",15],["i32",15]]],null,[[["i32",15],["i32",15]],["bivec",3]],null,[[["i32",15],["i32",15]],["subspace",3]],null,[[["i32",15],["i32",15],["i32",15]]],[[["i32",15],["i32",15],["i32",15]]],null,[[["i32",15],["i32",15],["i32",15]]],[[["i32",15],["i32",15],["i32",15]]],[[["i32",15]],["range",3,[["i32",15]]]],[[["i32",15],["i32",15],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["i32",15],["i32",15]],["bivec",3,[["vec",3,[["vec",3,[["u32",15]]]]]]]]],"p":[[3,"Sseq"],[3,"DenseBigradedModule"],[3,"Differential"],[8,"SseqProfile"],[3,"Adams"]]},\
"steenrod":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"tensor":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"thread_token":{"doc":"","t":[12,3,13,13,3,3,3,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Condvar","Disconnected","Empty","Mutex","NonZeroUsize","Receiver","Token","TokenBucket","TryRecvError","bitor","bitor","bitor_assign","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","capacity","checked_add","checked_mul","checked_next_power_of_two","checked_pow","clone","clone","clone","clone_into","clone_into","clone_into","cmp","condvar","data","default","default","default","drop","drop","eq","eq","flavor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get_mut","hash","inner","inner","into","into","into","into","into","into","into","into_inner","into_iter","is_disconnected","is_empty","is_empty","is_full","is_poisoned","is_power_of_two","iter","leading_zeros","len","lock","max_threads","ne","new","new","new","new","new_unchecked","notify_all","notify_one","partial_cmp","poison","recv","recv2_or_release","recv_deadline","recv_or_release","recv_timeout","release","release_token","running_threads","same_channel","saturating_add","saturating_mul","saturating_pow","take_token","to_owned","to_owned","to_owned","to_string","to_string","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_lock","try_recv","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_add","unchecked_mul","unlock","wait","wait_timeout","wait_timeout_ms","wait_timeout_while","wait_while"],"q":["thread_tokend":["","A Condition Variable","The message could not be received because the channel is …","A message could not be received because the channel is …","A mutual exclusion primitive useful for protecting shared …","An integer that is known not to equal zero.","The receiving side of a channel.","A <code>Token</code> is what <code>TokenBucket::take_token</code> returns. The token …","A <code>TokenBucket</code> is a bucket containing a fixed number of “…","An error returned from the <code>try_recv</code> method.","","","","","","","","","","","","","","","","","","","","If the channel is bounded, returns its capacity.","Add an unsigned integer to a non-zero value. Check for …","Multiply two non-zero integers together. Check for …","Returns the smallest power of two greater than or equal to …","Raise non-zero value to an integer power. Check for …","","","","","","","","","","The default value of TokenBucket has two threads.","Creates a <code>Condvar</code> which is ready to be waited on and …","Creates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.","","","","","","","","","","","","","","","","","","","","","","Creates a new mutex in an unlocked state ready for use. …","","Converts <code>NonZeroU8</code> to <code>NonZeroUsize</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroUsize</code> losslessly.","","","","","Returns the value as a primitive type.","Returns a mutable reference to the underlying data.","","","","","","","","","","","Consumes this mutex, returning the underlying data.","","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is full.","Determines whether the mutex is poisoned.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","A blocking iterator over messages in the channel.","Returns the number of leading zeros in the binary …","Returns the number of messages in the channel.","Acquires a mutex, blocking the current thread until it is …","","","Constructs a new <code>TokenBucket</code> with a fixed number of tokens.","Creates a new condition variable which is ready to be …","Creates a new mutex in an unlocked state ready for use.","Creates a non-zero if the given value is not zero.","Creates a non-zero without checking whether the value is …","Wakes up all blocked threads on this condvar.","Wakes up one blocked thread on this condvar.","","","Blocks the current thread until a message is received or …","This function attempts to read a message from <code>receiver</code> (if …","Waits for a message to be received from the channel, but …","This function attempts to read a message from <code>receiver</code> (if …","Waits for a message to be received from the channel, but …","This function does not do anything. It simply takes …","","","Returns <code>true</code> if receivers belong to the same channel.","Add an unsigned integer to a non-zero value.","Multiply two non-zero integers together.","Raise non-zero value to an integer power.","Attempts to take a token from the bucket. This will block …","","","","","","Returns the number of trailing zeros in the binary …","","","","","Attempts to convert <code>usize</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroUsize</code>.","","","","","","","","","","","A non-blocking iterator over messages in the channel.","Attempts to acquire this lock.","Attempts to receive a message from the channel without …","","","","","","","","Add an unsigned integer to a non-zero value, assuming …","Multiply two non-zero integers together, assuming overflow …","Immediately drops the guard, and consequently unlocks the …","Blocks the current thread until this condition variable …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …","Blocks the current thread until this condition variable …"],"i":[1,0,2,2,0,0,0,0,0,0,1,1,1,1,3,4,5,6,1,7,2,3,4,5,6,1,7,2,4,7,1,1,1,1,1,7,2,1,7,2,1,3,6,3,5,6,4,7,1,2,7,5,6,1,1,1,1,1,1,7,2,2,3,4,5,6,6,6,1,1,1,7,2,2,1,1,6,1,5,6,3,4,5,6,1,7,2,6,7,2,7,2,7,6,1,7,1,7,6,3,1,3,5,6,1,1,5,5,1,6,7,3,7,3,7,4,3,3,7,1,1,1,3,1,7,2,1,2,1,3,4,5,6,1,1,1,1,1,1,1,1,1,1,1,7,2,3,4,5,6,1,7,2,7,6,7,3,4,5,6,1,7,2,1,1,6,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["nonzerousize",3]]],[[["nonzerousize",3]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["option",4,[["usize",15]]]],[[["usize",15]],["option",4,[["nonzerousize",3]]]],[[["nonzerousize",3]],["option",4,[["nonzerousize",3]]]],[[],["option",4,[["nonzerousize",3]]]],[[["u32",15]],["option",4,[["nonzerousize",3]]]],[[],["nonzerousize",3]],[[],["receiver",3]],[[],["tryrecverror",4]],[[]],[[]],[[]],[[["nonzerousize",3]],["ordering",4]],null,null,[[]],[[],["condvar",3]],[[],["mutex",3]],[[]],[[]],[[["nonzerousize",3]],["bool",15]],[[["tryrecverror",4]],["bool",15]],null,[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[["never",15]]],[[],["mutex",3]],[[]],[[["nonzerou8",3]],["nonzerousize",3]],[[["nonzerou16",3]],["nonzerousize",3]],[[]],[[]],[[["recverror",3]],["tryrecverror",4]],[[["str",15]],["result",4,[["nonzerousize",3]]]],[[],["usize",15]],[[],["result",4,[["poisonerror",3]]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["poisonerror",3]]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["u32",15]],[[],["usize",15]],[[],["result",4,[["mutexguard",3],["poisonerror",3,[["mutexguard",3]]]]]],null,[[["nonzerousize",3]],["bool",15]],[[["nonzerousize",3]]],[[],["condvar",3]],[[],["mutex",3]],[[["usize",15]],["option",4,[["nonzerousize",3]]]],[[["usize",15]],["nonzerousize",3]],[[]],[[]],[[["nonzerousize",3]],["option",4,[["ordering",4]]]],null,[[],["result",4,[["recverror",3]]]],[[["token",3],["option",4],["option",4]],["token",3]],[[["instant",3]],["result",4,[["recvtimeouterror",4]]]],[[["token",3],["option",4]],["token",3]],[[["duration",3]],["result",4,[["recvtimeouterror",4]]]],[[]],[[]],null,[[["receiver",3]],["bool",15]],[[["usize",15]],["nonzerousize",3]],[[["nonzerousize",3]],["nonzerousize",3]],[[["u32",15]],["nonzerousize",3]],[[],["token",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4,[["nonzerousize",3]]]],[[["nonzeroi64",3]],["result",4,[["nonzerousize",3]]]],[[["nonzeroisize",3]],["result",4,[["nonzerousize",3]]]],[[["nonzerou64",3]],["result",4,[["nonzerousize",3]]]],[[["nonzeroi128",3]],["result",4,[["nonzerousize",3]]]],[[["nonzerou32",3]],["result",4,[["nonzerousize",3]]]],[[["nonzerou128",3]],["result",4,[["nonzerousize",3]]]],[[["nonzeroi32",3]],["result",4,[["nonzerousize",3]]]],[[["nonzeroi16",3]],["result",4,[["nonzerousize",3]]]],[[["nonzeroi8",3]],["result",4,[["nonzerousize",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tryiter",3]],[[],["result",4,[["mutexguard",3],["trylockerror",4,[["mutexguard",3]]]]]],[[],["result",4,[["tryrecverror",4]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["nonzerousize",3]],[[["nonzerousize",3]],["nonzerousize",3]],[[["mutexguard",3]]],[[["mutexguard",3]],["result",4,[["mutexguard",3],["poisonerror",3,[["mutexguard",3]]]]]],[[["mutexguard",3],["duration",3]],["result",4,[["poisonerror",3]]]],[[["mutexguard",3],["u32",15]],["result",4,[["poisonerror",3]]]],[[["mutexguard",3],["duration",3]],["result",4,[["poisonerror",3]]]],[[["mutexguard",3]],["result",4,[["mutexguard",3],["poisonerror",3,[["mutexguard",3]]]]]]],"p":[[3,"NonZeroUsize"],[4,"TryRecvError"],[3,"TokenBucket"],[3,"Token"],[3,"Condvar"],[3,"Mutex"],[3,"Receiver"]]},\
"yoneda":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};
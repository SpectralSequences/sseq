searchState.loadedDescShard("maybe_rayon", 0, "An iterator that supports “random access” to its data, …\nThe type of item that this parallel iterator produces. For …\nParallel version of the standard iterator trait.\nTests that every item in the parallel iterator matches the …\nSearches for <strong>some</strong> item in the parallel iterator that …\nDivides an iterator into sequential blocks of …\nDivides an iterator into sequential blocks of the given …\nTakes two iterators and creates a new iterator over both.\nSplits an iterator up into fixed-size chunks.\nCreates an iterator which clones all of its elements.  …\nLexicographically compares the elements of this …\nCreates a fresh collection containing all the elements …\nCollects the results of the iterator into the specified …\nCollects this iterator into a linked list of vectors.\nCreates an iterator which copies all of its elements.  …\nCounts the number of items in this parallel iterator.\nInternal method used to define the behavior of this …\nInternal method used to define the behavior of this …\nYields an index along with each item.\nDetermines if the elements of this <code>ParallelIterator</code> are …\nApplies <code>filter_op</code> to each item of this iterator, producing …\nApplies <code>filter_op</code> to each item of this iterator to get an …\nSearches for <strong>some</strong> item in the parallel iterator that …\nSearches for the sequentially <strong>first</strong> item in the parallel …\nSearches for the sequentially <strong>last</strong> item in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies the given predicate to the items in the parallel …\nApplies <code>map_op</code> to each item of this iterator to get nested …\nApplies <code>map_op</code> to each item of this iterator to get nested …\nAn adaptor that flattens parallel-iterable <code>Item</code>s into one …\nAn adaptor that flattens serial-iterable <code>Item</code>s into one …\nParallel fold is similar to sequential fold except that the\nSplits an iterator into fixed-size chunks, performing a …\nSplits an iterator into fixed-size chunks, performing a …\nApplies <code>fold_op</code> to the given <code>init</code> value with each item of …\nExecutes <code>OP</code> on each item produced by the iterator, in …\nExecutes <code>OP</code> on a value returned by <code>init</code> with each item …\nExecutes <code>OP</code> on the given <code>init</code> value with each item …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nApplies <code>inspect_op</code> to a reference to each item of this …\nInterleaves elements of this iterator and the other given …\nInterleaves elements of this iterator and the other given …\nIntersperses clones of an element between items of this …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nProduces an exact count of how many items this iterator …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nApplies <code>map_op</code> to each item of this iterator, producing a …\nApplies <code>map_op</code> to a value returned by <code>init</code> with each item …\nApplies <code>map_op</code> to the given <code>init</code> value with each item of …\nComputes the maximum of all the items in the iterator. If …\nComputes the maximum of all the items in the iterator with …\nComputes the item that yields the maximum value for the …\nComputes the minimum of all the items in the iterator. If …\nComputes the minimum of all the items in the iterator with …\nComputes the item that yields the minimum value for the …\nDetermines if the elements of this <code>ParallelIterator</code> are …\nInternal method used to define the behavior of this …\nWraps an iterator with a fuse in case of panics, to halt …\nLexicographically compares the elements of this …\nPartitions the items of a parallel iterator into a pair of …\nPartitions and maps the items of a parallel iterator into …\nSearches for <strong>some</strong> item in the parallel iterator that …\nSearches for the sequentially <strong>first</strong> item in the parallel …\nSearches for the sequentially <strong>last</strong> item in the parallel …\nSearches for items in the parallel iterator that match the …\nMultiplies all the items in the iterator.\nReduces the items in the iterator into one item using <code>op</code>. …\nReduces the items in the iterator into one item using <code>op</code>. …\nProduces a new iterator with the elements of this iterator …\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips <code>n</code> elements from <em>anywhere</em> in …\nCreates an iterator that skips elements from <em>anywhere</em> in …\nCreates an iterator that steps by the given amount\nSums up the items in the iterator.\nCreates an iterator that yields the first <code>n</code> elements.\nCreates an iterator that yields <code>n</code> elements from <em>anywhere</em> …\nCreates an iterator that takes elements from <em>anywhere</em> in …\nPerforms a fallible parallel fold.\nPerforms a fallible parallel fold with a cloneable <code>init</code> …\nExecutes a fallible <code>OP</code> on each item produced by the …\nExecutes a fallible <code>OP</code> on a value returned by <code>init</code> with …\nExecutes a fallible <code>OP</code> on the given <code>init</code> value with each …\nReduces the items in the iterator into one item using a …\nReduces the items in the iterator into one item using a …\nUnzips the items of a parallel iterator into a pair of …\nUnzips the results of the iterator into the specified …\nMutates each item of this iterator before yielding it.\nCreates an iterator over the <code>Some</code> items of this iterator, …\nSets the maximum length of iterators desired to process in …\nSets the minimum length of iterators desired to process in …\nInternal method used to define the behavior of this …\nIterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …\nThe same as <code>Zip</code>, but requires that both iterators have the …")
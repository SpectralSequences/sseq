searchState.loadedDescShard("ext", 0, "<code>ext-rs</code> is a collection of libraries for doing homological …\nThis module implements Nassau’s algorithm. The main …\nThis module exports the <code>Resolution</code> object, which is a …\nThis module defines <code>MuResolutionHomomorphism</code>, which is a …\nA module containing various utility functions related to …\nAn augmented chain complex is a map of chain complexes C …\nA bounded chain complex is a chain complex C for which C_s …\nA chain complex is defined to start in degree 0. The …\n<code>chain_maps</code> is required to be non-empty\nAn iterator returned by <code>ChainComplex::iter_stem</code>\nApply the quasi-inverse of the (s, t)th differential to …\nGet a string representation of d(gen), where d is the …\nEnsure all bidegrees less than or equal to (s, t) have …\nThis returns the differential starting from the sth module.\nComputes the filtration one product.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf the complex has been computed at bidegree (s, t). This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all defined bidegrees in increasing order …\nThe first s such that <code>self.module(s)</code> is not defined.\nA directory used to save information about the chain …\nGet the save file of a bidegree\nThis currently crashes if <code>s</code> is greater than the s degree …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis should be used when you want an entry of the profile …\nSome magic constants used in the save file\nA Milnor subalgebra to be used in Nassau’s algorithm. …\nA resolution of <code>S_2</code> using Nassau’s algorithm. This aims …\nSee <code>resolution::SenderData</code>. This differs by not having the …\nSee <code>MilnorSubalgebra::iter_signatures</code>.\nAn iterator that iterates through a sequence of …\nThis function resolves up till a fixed stem instead of a …\nThis function prepares the Resolution object to perform …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the signature of an element\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all signatures of this algebra that …\nGive a list of basis elements in degree <code>degree</code> that has …\nGet the matrix of a free module homomorphism when …\nStep resolution for s = 0\nStep resolution for s = 1\nThe algebra with trivial profile, corresponding to the …\nThis is the maximum number of new generators we expect in …\nA minimal resolution of a chain complex. The functions …\nIn <code>MuResolution::compute_through_stem</code> and …\nThis function resolves up till a fixed stem instead of a …\nThis function prepares the Resolution object to perform …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the kernel of the differential starting at $(s, t)$. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each <em>internal</em> degree, store the kernel of the most …\nFor each <em>internal</em> degree, store the kernel of the most …\nFor each <em>internal</em> degree, store the kernel of the most …\nWhether we should keep the quasi-inverses of the …\nWhether we should keep the quasi-inverses of the …\nWhether we should keep the quasi-inverses of the …\nWhether this bidegree was newly calculated or have already …\nThe sender object used to send the <code>SenderData</code>. We put this …\nWhether we should save newly computed data to the disk. …\nWhether we should save newly computed data to the disk. …\nWhether we should save newly computed data to the disk. …\nCall our resolution $X$, and the chain complex to resolve …\nA chain complex homomorphims from a <code>FreeChainComplex</code>. This …\nGiven a chain map $f: C \\to C’$ between free chain …\nExtend the resolution homomorphism such that it is defined …\nExtend the resolution homomorphism as far as possible, as …\nExtends the resolution homomorphism up to a given range. …\nExtend the <code>MuResolutionHomomorphism</code> to be defined on …\nExtend the <code>MuResolutionHomomorphism</code> to be defined on …\nExtend the resolution homomorphism such that it is defined …\nReturns the argument unchanged.\nConstruct a chain map that lifts a given module …\nReturns the chain map on the <code>s</code>th source module.\nCalls <code>U::from(self)</code>.\nThe quasi-inverse of the augmentation map\nA chain homotopy\nA chain map\nIn addition to checking the checksum, we also keep track …\nThe differential and augmentation map in a resolution\nThe kernel of a resolution differential\nThe differential with Nassau’s algorithm. This does not …\nThe quasi-inverse data in Nassau’s algorithm\nThe quasi-inverse of the resolution differential\nSecondary composite\nA secondary homotopy\nIntermediate data used by secondary code\nArguments\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis panics if there is no save dir\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen the file pointed to by <code>path</code> as a <code>Box&lt;dyn Read&gt;</code>. If …\nA DashSet&gt; of files that are currently opened and being …\nWhether the composite can hit generators. This is true for …\nA homotopy of a map A -&gt; M of pair modules. We assume this …\nWhen lifting a thing to its secondary version, often what …\nCompute the image of an element in the source under the …\nAdd composites up to and including the specified degree\nThe component of the map on the R_B portion. gen_deg -&gt; …\ngen_deg -&gt; gen_idx -&gt; composite\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngen_deg -&gt; gen_idx -&gt; homotopy\ns -&gt; t -&gt; idx -&gt; homotopy\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noutput_t = input_t - shift_t\nA config object is an object that specifies how a Steenrod …\nThe type returned by <code>query_module</code>. The value of this type …\nThe basis for the Steenrod algebra\nThis constructs a resolution resolving a module according …\nSee <code>construct</code>\nSee <code>construct</code>\nReturns the argument unchanged.\nGiven a resolution, return a resolution of the unit, …\nCalls <code>U::from(self)</code>.\nGiven the name of a module file (without the <code>.json</code> …\nThe json specification of the module\nGiven a module specification string, load a json …\nQuery the user for a module and a bidegree, and return a …\nQuery the user for a module and its save directory. See …\nThe value of the SECONDARY_JOB environment variable. This …\nGiven an <code>n: usize</code>, return a UTF-8 character that best …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the throughput in MiB/s\nThis function does the following computation:\nThis function produces a quasi-isomorphic quotient of <code>cc</code> …")
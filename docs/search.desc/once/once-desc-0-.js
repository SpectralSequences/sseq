searchState.loadedDescShard("once", 0, "The maximum length of a OnceVec is 2^{MAX_OUTER_LENGTH} - …\nA <code>OnceVec</code> is a push-only vector which is thread-safe. To …\nThis is a wrapper around our out-of-order push tracker. …\nAllocate enough space to fit <code>new_max</code> many elements in …\nSafety\nSafety\nReturns\nExtend the <code>OnceVec</code> to up to index <code>new_max</code>, filling in the …\nExtend the <code>OnceBiVec</code> to up to index <code>new_max</code>, filling in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a OnceVec from a Vec.\nReturns whether the <code>OnceBiVec</code> has remaining out-of-order …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through the <code>OnceVec</code>.\nThis always returns a layout of non-zero size.\nAll data up to length self.len() are guaranteed to be …\nThis returns the “length” of the bivector, defined to …\nTakes a lock on the <code>OnceVec</code>. The <code>OnceVec</code> cannot be updated …\nTakes a lock on the <code>OnceBiVec</code>. The <code>OnceBiVec</code> cannot be …\nThis returns the largest degree in the bivector. This is …\nA parallel version of <code>extend</code>. If the <code>concurrent</code> feature is …\nA parallel version of <code>extend</code>. If the <code>concurrent</code> feature is …\n<code>BTreeSet</code> of elements that have been added out of order. We …\nReturns a list of out-of-order elements remaining.\nObtain an immutable reference to the <code>page</code>th page. This …\nReturns\nAppend an element to the end of the vector.\nPush an element into the vector and check that it was …\nAppend an element to an arbitrary position in the OnceVec.\nSee <code>OnceVec::push_ooo</code>.")
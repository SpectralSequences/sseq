initSidebarItems({"constant":[["STATIC_MODULES_PATH",""]],"enum":[["LoadQuasiInverseOption","Options for whether to load a quasi-inverse in a resolution."]],"fn":[["construct","This constructs a resolution resolving a module according to the specifications"],["get_unit","Given a resolution, return a resolution of the unit, together with a boolean indicating whether this is the original resolution was already a resolution of the unit. If the boolean is true, then the original resolution is returned."],["iter_s_t","Given a function `f(s, t)`, compute it for every `s` in `[min_s, max_s]` and every `t` in `[min_t, max_t(s)]`.  Further, we only compute `f(s, t)` when `f(s - 1, t')` has been computed for all `t' < t`."],["load_module_json","Given the name of a module file (without the `.json` extension), find a json file with this name, and return the parsed json object. The search path for this json file is described here."],["log_time","If the `logging` feature is enabled, this prints the given duration together with some information about what this duration measures. This is useful for performance benchmarks and analysis."],["parse_module_name","Given a module specification string, load a json description of the module as described here."],["print_element","Prints an element in the bidegree `(n, s)` to stdout. For example, `[0, 2, 1]` will be printed as `2 x_(n, s, 1) + x_(n, s, 2)`."],["query_module","Query the user for a module and a bidegree, and return a resolution resolved up to said bidegree. This is mainly a wrapper around [`query_module_only`] that also asks for the bidegree to resolve up to as well. The prompt of [`query_module_only`] is always set to `\"Module\"` when invoked through this function."],["query_module_only","Query the user for a module and its save directory. See here for details on the propmt format."],["query_module_only_standard","A version of [`query_module_only`] that always returns the usual resolution, even when the `nassau` feature is enabled. This is useful for scripts that must use the Adem basis."],["secondary_job","The value of the SECONDARY_JOB environment variable. This is used for distributing the `secondary`. If set, only data with `s = SECONDARY_JOB` will be computed. The minimum value of `s` is the `shift_s` of the `SecondaryLift` and the maximum value (inclusive) is the maximum `s` of the resolution."],["unicode_num","Given an `n: usize`, return a UTF-8 character that best depicts this number. If `n < 9`, then this is a UTF-8 when `n` many dots. If `n = 9`, then this is the number `9`. Otherwise, it is `*`."]],"struct":[["Config","A config object is an object that specifies how a Steenrod module should be constructed."]],"type":[["QueryModuleResolution","The type returned by [`query_module`]. The value of this type depends on whether `nassau` is enabled. In any case, it is an augmented free chain complex over either [`SteenrodAlgebra`] or `MilnorAlgebra` and supports the `compute_through_stem` function."]]});